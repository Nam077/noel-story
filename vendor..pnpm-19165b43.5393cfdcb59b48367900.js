"use strict";(self.webpackChunkpixijs_game=self.webpackChunkpixijs_game||[]).push([[2],{7371:(t,i,h)=>{h.d(i,{o:()=>s});class s{constructor(t,i,h){this._x=i||0,this._y=h||0,this._observer=t}clone(t){return new s(t??this._observer,this._x,this._y)}set(t=0,i=t){return this._x===t&&this._y===i||(this._x=t,this._y=i,this._observer._onUpdate(this)),this}copyFrom(t){return this._x===t.x&&this._y===t.y||(this._x=t.x,this._y=t.y,this._observer._onUpdate(this)),this}copyTo(t){return t.set(this._x,this._y),t}equals(t){return t.x===this._x&&t.y===this._y}toString(){return`[pixi.js/math:ObservablePoint x=0 y=0 scope=${this._observer}]`}get x(){return this._x}set x(t){this._x!==t&&(this._x=t,this._observer._onUpdate(this))}get y(){return this._y}set y(t){this._y!==t&&(this._y=t,this._observer._onUpdate(this))}}},5638:(t,i,h)=>{h.d(i,{b:()=>s});class s{constructor(t=0,i=0){this.x=0,this.y=0,this.x=t,this.y=i}clone(){return new s(this.x,this.y)}copyFrom(t){return this.set(t.x,t.y),this}copyTo(t){return t.set(this.x,this.y),t}equals(t){return t.x===this.x&&t.y===this.y}set(t=0,i=t){return this.x=t,this.y=i,this}toString(){return`[pixi.js/math:Point x=${this.x} y=${this.y}]`}static get shared(){return e.x=0,e.y=0,e}}const e=new s},8486:(t,i,h)=>{h.d(i,{j:()=>e});var s=h(7474);class e{constructor(t=0,i=0,h=0){this.type="circle",this.x=t,this.y=i,this.radius=h}clone(){return new e(this.x,this.y,this.radius)}contains(t,i){if(this.radius<=0)return!1;const h=this.radius*this.radius;let s=this.x-t,e=this.y-i;return s*=s,e*=e,s+e<=h}strokeContains(t,i,h){if(0===this.radius)return!1;const s=this.x-t,e=this.y-i,r=this.radius,n=h/2,o=Math.sqrt(s*s+e*e);return o<r+n&&o>r-n}getBounds(t){return t||(t=new s.M),t.x=this.x-this.radius,t.y=this.y-this.radius,t.width=2*this.radius,t.height=2*this.radius,t}copyFrom(t){return this.x=t.x,this.y=t.y,this.radius=t.radius,this}copyTo(t){return t.copyFrom(this),t}toString(){return`[pixi.js/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`}}},4952:(t,i,h)=>{h.d(i,{P:()=>e});var s=h(7474);class e{constructor(t=0,i=0,h=0,s=0){this.type="ellipse",this.x=t,this.y=i,this.halfWidth=h,this.halfHeight=s}clone(){return new e(this.x,this.y,this.halfWidth,this.halfHeight)}contains(t,i){if(this.halfWidth<=0||this.halfHeight<=0)return!1;let h=(t-this.x)/this.halfWidth,s=(i-this.y)/this.halfHeight;return h*=h,s*=s,h+s<=1}strokeContains(t,i,h){const{halfWidth:s,halfHeight:e}=this;if(s<=0||e<=0)return!1;const r=h/2,n=s-r,o=e-r,y=s+r,a=e+r,x=t-this.x,u=i-this.y;return x*x/(n*n)+u*u/(o*o)>1&&x*x/(y*y)+u*u/(a*a)<=1}getBounds(t){return t||(t=new s.M),t.x=this.x-this.halfWidth,t.y=this.y-this.halfHeight,t.width=2*this.halfWidth,t.height=2*this.halfHeight,t}copyFrom(t){return this.x=t.x,this.y=t.y,this.halfWidth=t.halfWidth,this.halfHeight=t.halfHeight,this}copyTo(t){return t.copyFrom(this),t}toString(){return`[pixi.js/math:Ellipse x=${this.x} y=${this.y} halfWidth=${this.halfWidth} halfHeight=${this.halfHeight}]`}}},4360:(t,i,h)=>{h.d(i,{t:()=>r});var s=h(2390),e=h(7474);class r{constructor(...t){this.type="polygon";let i=Array.isArray(t[0])?t[0]:t;if("number"!=typeof i[0]){const t=[];for(let h=0,s=i.length;h<s;h++)t.push(i[h].x,i[h].y);i=t}this.points=i,this.closePath=!0}clone(){const t=this.points.slice(),i=new r(t);return i.closePath=this.closePath,i}contains(t,i){let h=!1;const s=this.points.length/2;for(let e=0,r=s-1;e<s;r=e++){const s=this.points[2*e],n=this.points[2*e+1],o=this.points[2*r],y=this.points[2*r+1];n>i!=y>i&&t<(i-n)/(y-n)*(o-s)+s&&(h=!h)}return h}strokeContains(t,i,h){const e=h/2,r=e*e,{points:n}=this,o=n.length-(this.closePath?0:2);for(let h=0;h<o;h+=2){const e=n[h],o=n[h+1],y=n[(h+2)%n.length],a=n[(h+3)%n.length];if((0,s.z)(t,i,e,o,y,a)<=r)return!0}return!1}getBounds(t){t||(t=new e.M);const i=this.points;let h=1/0,s=-1/0,r=1/0,n=-1/0;for(let t=0,e=i.length;t<e;t+=2){const e=i[t],o=i[t+1];h=e<h?e:h,s=e>s?e:s,r=o<r?o:r,n=o>n?o:n}return t.x=h,t.width=s-h,t.y=r,t.height=n-r,t}copyFrom(t){return this.points=t.points.slice(),this.closePath=t.closePath,this}copyTo(t){return t.copyFrom(this),t}toString(){return`[pixi.js/math:PolygoncloseStroke=${this.closePath}points=${this.points.reduce(((t,i)=>`${t}, ${i}`),"")}]`}get lastX(){return this.points[this.points.length-2]}get lastY(){return this.points[this.points.length-1]}get x(){return this.points[this.points.length-2]}get y(){return this.points[this.points.length-1]}}},7474:(t,i,h)=>{h.d(i,{M:()=>r});var s=h(5638);const e=[new s.b,new s.b,new s.b,new s.b];class r{constructor(t=0,i=0,h=0,s=0){this.type="rectangle",this.x=Number(t),this.y=Number(i),this.width=Number(h),this.height=Number(s)}get left(){return this.x}get right(){return this.x+this.width}get top(){return this.y}get bottom(){return this.y+this.height}isEmpty(){return this.left===this.right||this.top===this.bottom}static get EMPTY(){return new r(0,0,0,0)}clone(){return new r(this.x,this.y,this.width,this.height)}copyFromBounds(t){return this.x=t.minX,this.y=t.minY,this.width=t.maxX-t.minX,this.height=t.maxY-t.minY,this}copyFrom(t){return this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,this}copyTo(t){return t.copyFrom(this),t}contains(t,i){return!(this.width<=0||this.height<=0)&&(t>=this.x&&t<this.x+this.width&&i>=this.y&&i<this.y+this.height)}strokeContains(t,i,h){const{width:s,height:e}=this;if(s<=0||e<=0)return!1;const r=this.x,n=this.y;return t>=r-h/2&&t<=r+s+h/2&&i>=n-h/2&&i<=n+e+h/2&&!(t>r+h/2&&t<r+s-h/2&&i>n+h/2&&i<n+e-h/2)}intersects(t,i){if(!i){const i=this.x<t.x?t.x:this.x;if((this.right>t.right?t.right:this.right)<=i)return!1;const h=this.y<t.y?t.y:this.y;return(this.bottom>t.bottom?t.bottom:this.bottom)>h}const h=this.left,s=this.right,r=this.top,n=this.bottom;if(s<=h||n<=r)return!1;const o=e[0].set(t.left,t.top),y=e[1].set(t.left,t.bottom),a=e[2].set(t.right,t.top),x=e[3].set(t.right,t.bottom);if(a.x<=o.x||y.y<=o.y)return!1;const u=Math.sign(i.a*i.d-i.b*i.c);if(0===u)return!1;if(i.apply(o,o),i.apply(y,y),i.apply(a,a),i.apply(x,x),Math.max(o.x,y.x,a.x,x.x)<=h||Math.min(o.x,y.x,a.x,x.x)>=s||Math.max(o.y,y.y,a.y,x.y)<=r||Math.min(o.y,y.y,a.y,x.y)>=n)return!1;const c=u*(y.y-o.y),g=u*(o.x-y.x),l=c*h+g*r,d=c*s+g*r,p=c*h+g*n,m=c*s+g*n;if(Math.max(l,d,p,m)<=c*o.x+g*o.y||Math.min(l,d,p,m)>=c*x.x+g*x.y)return!1;const f=u*(o.y-a.y),w=u*(a.x-o.x),_=f*h+w*r,M=f*s+w*r,b=f*h+w*n,$=f*s+w*n;return!(Math.max(_,M,b,$)<=f*o.x+w*o.y||Math.min(_,M,b,$)>=f*x.x+w*x.y)}pad(t=0,i=t){return this.x-=t,this.y-=i,this.width+=2*t,this.height+=2*i,this}fit(t){const i=Math.max(this.x,t.x),h=Math.min(this.x+this.width,t.x+t.width),s=Math.max(this.y,t.y),e=Math.min(this.y+this.height,t.y+t.height);return this.x=i,this.width=Math.max(h-i,0),this.y=s,this.height=Math.max(e-s,0),this}ceil(t=1,i=.001){const h=Math.ceil((this.x+this.width-i)*t)/t,s=Math.ceil((this.y+this.height-i)*t)/t;return this.x=Math.floor((this.x+i)*t)/t,this.y=Math.floor((this.y+i)*t)/t,this.width=h-this.x,this.height=s-this.y,this}enlarge(t){const i=Math.min(this.x,t.x),h=Math.max(this.x+this.width,t.x+t.width),s=Math.min(this.y,t.y),e=Math.max(this.y+this.height,t.y+t.height);return this.x=i,this.width=h-i,this.y=s,this.height=e-s,this}getBounds(t){return t||(t=new r),t.copyFrom(this),t}toString(){return`[pixi.js/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`}}},8116:(t,i,h)=>{h.d(i,{T:()=>r});var s=h(7474);const e=(t,i,h,s,e,r)=>{const n=t-h,o=i-s,y=Math.sqrt(n*n+o*o);return y>=e-r&&y<=e+r};class r{constructor(t=0,i=0,h=0,s=0,e=20){this.type="roundedRectangle",this.x=t,this.y=i,this.width=h,this.height=s,this.radius=e}getBounds(t){return t||(t=new s.M),t.x=this.x,t.y=this.y,t.width=this.width,t.height=this.height,t}clone(){return new r(this.x,this.y,this.width,this.height,this.radius)}copyFrom(t){return this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height,this}copyTo(t){return t.copyFrom(this),t}contains(t,i){if(this.width<=0||this.height<=0)return!1;if(t>=this.x&&t<=this.x+this.width&&i>=this.y&&i<=this.y+this.height){const h=Math.max(0,Math.min(this.radius,Math.min(this.width,this.height)/2));if(i>=this.y+h&&i<=this.y+this.height-h||t>=this.x+h&&t<=this.x+this.width-h)return!0;let s=t-(this.x+h),e=i-(this.y+h);const r=h*h;if(s*s+e*e<=r)return!0;if(s=t-(this.x+this.width-h),s*s+e*e<=r)return!0;if(e=i-(this.y+this.height-h),s*s+e*e<=r)return!0;if(s=t-(this.x+h),s*s+e*e<=r)return!0}return!1}strokeContains(t,i,h){const{x:s,y:r,width:n,height:o,radius:y}=this,a=h/2,x=s+y,u=r+y,c=s+n,g=r+o;return(t>=s-a&&t<=s+a||t>=c-a&&t<=c+a)&&i>=u&&i<=u+(o-2*y)||((i>=r-a&&i<=r+a||i>=g-a&&i<=g+a)&&t>=x&&t<=x+(n-2*y)||(t<x&&i<u&&e(t,i,x,u,y,a)||t>c-y&&i<u&&e(t,i,c-y,u,y,a)||t>c-y&&i>g-y&&e(t,i,c-y,g-y,y,a)||t<x&&i>g-y&&e(t,i,x,g-y,y,a)))}toString(){return`[pixi.js/math:RoundedRectangle x=${this.x} y=${this.y}width=${this.width} height=${this.height} radius=${this.radius}]`}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,