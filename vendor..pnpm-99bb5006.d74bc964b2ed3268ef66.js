"use strict";(self.webpackChunkpixijs_game=self.webpackChunkpixijs_game||[]).push([[404],{7628:(t,e,n)=>{n.d(e,{t:()=>a});var r=n(9084),i=n(9678);class a{constructor(){this._didUpload=!1,this._tempState=i.U.for2d()}init(t){t.renderer.runners.contextChange.add(this)}contextChange(){this._didUpload=!1}start(t,e,n){const r=t.renderer;r.shader.bind(n,this._didUpload),r.shader.updateUniformGroup(r.globalUniforms.uniformGroup),r.geometry.bind(e,n.glProgram)}execute(t,e){const n=t.renderer;this._didUpload=!0,this._tempState.blendMode=e.blendMode,n.state.set(this._tempState);const r=e.textures.textures;for(let t=0;t<e.textures.count;t++)n.texture.bind(r[t],t);n.geometry.draw(e.topology,e.size,e.start)}}a.extension={type:[r.Ag.WebGLPipesAdaptor],name:"batch"}},3490:(t,e,n)=>{n.d(e,{a:()=>s});var r=n(8985);const i=["precision mediump float;","void main(void){","float test = 0.1;","%forloop%","gl_FragColor = vec4(0.0);","}"].join("\n");function a(t){let e="";for(let n=0;n<t;++n)n>0&&(e+="\nelse "),n<t-1&&(e+=`if(test == ${n}.0){}`);return e}let o=null;function s(){if(o)return o;const t=(0,r.W)();return o=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),o=function(t,e){if(0===t)throw new Error("Invalid value of `0` passed to `checkMaxIfStatementsInShader`");const n=e.createShader(e.FRAGMENT_SHADER);try{for(;;){const r=i.replace(/%forloop%/gi,a(t));if(e.shaderSource(n,r),e.compileShader(n),e.getShaderParameter(n,e.COMPILE_STATUS))break;t=t/2|0}}finally{e.deleteShader(n)}return t}(o,t),t.getExtension("WEBGL_lose_context")?.loseContext(),o}},5056:(t,e,n)=>{n.d(e,{E:()=>s});var r=n(9084),i=n(9678),a=n(1980);const o=i.U.for2d();class s{start(t,e,n){const r=t.renderer,i=r.encoder,a=n.gpuProgram;this._shader=n,this._geometry=e,i.setGeometry(e,a),o.blendMode="normal",r.pipeline.getPipeline(e,a,o);const s=r.globalUniforms.bindGroup;i.resetBindGroup(1),i.setBindGroup(0,s,a)}execute(t,e){const n=this._shader.gpuProgram,r=t.renderer,i=r.encoder;if(!e.bindGroup){const t=e.textures;e.bindGroup=(0,a.w)(t.textures,t.count)}o.blendMode=e.blendMode;const s=r.bindGroup.getBindGroup(e.bindGroup,n,1),u=r.pipeline.getPipeline(this._geometry,n,o,e.topology);e.bindGroup._touch(r.textureGC.count),i.setPipeline(u),i.renderPassEncoder.setBindGroup(1,s),i.renderPassEncoder.drawIndexed(e.size,1,e.start)}}s.extension={type:[r.Ag.WebGPUPipesAdaptor],name:"batch"}},1980:(t,e,n)=>{n.d(e,{w:()=>s});var r=n(5108),i=n(8554),a=n(3490);const o={};function s(t,e){let n=2166136261;for(let r=0;r<e;r++)n^=t[r].uid,n=Math.imul(n,16777619),n>>>=0;return o[n]||function(t,e,n){const s={};let c=0;u||(u=(0,a.a)());for(let n=0;n<u;n++){const r=n<e?t[n]:i.g.EMPTY.source;s[c++]=r.source,s[c++]=r.style}const l=new r.T(s);return o[n]=l,l}(t,e,n)}let u=0},9745:(t,e,n)=>{n.d(e,{s:()=>s});var r=n(9084),i=n(9678),a=n(5834);const o=class t{constructor(t,e){this.state=i.U.for2d(),this._batchersByInstructionSet=Object.create(null),this._activeBatches=Object.create(null),this.renderer=t,this._adaptor=e,this._adaptor.init?.(this)}static getBatcher(t){return new this._availableBatchers[t]}buildStart(t){let e=this._batchersByInstructionSet[t.uid];e||(e=this._batchersByInstructionSet[t.uid]=Object.create(null),e.default||(e.default=new a.J)),this._activeBatches=e,this._activeBatch=this._activeBatches.default;for(const t in this._activeBatches)this._activeBatches[t].begin()}addToBatch(e,n){if(this._activeBatch.name!==e.batcherName){this._activeBatch.break(n);let r=this._activeBatches[e.batcherName];r||(r=this._activeBatches[e.batcherName]=t.getBatcher(e.batcherName),r.begin()),this._activeBatch=r}this._activeBatch.add(e)}break(t){this._activeBatch.break(t)}buildEnd(t){this._activeBatch.break(t);const e=this._activeBatches;for(const t in e){const n=e[t],r=n.geometry;r.indexBuffer.setDataWithSize(n.indexBuffer,n.indexSize,!0),r.buffers[0].setDataWithSize(n.attributeBuffer.float32View,n.attributeSize,!1)}}upload(t){const e=this._batchersByInstructionSet[t.uid];for(const t in e){const n=e[t],r=n.geometry;n.dirty&&(n.dirty=!1,r.buffers[0].update(4*n.attributeSize))}}execute(t){if("startBatch"===t.action){const e=t.batcher,n=e.geometry,r=e.shader;this._adaptor.start(this,n,r)}this._adaptor.execute(this,t)}destroy(){this.state=null,this.renderer=null,this._adaptor=null;for(const t in this._activeBatches)this._activeBatches[t].destroy();this._activeBatches=null}};o.extension={type:[r.Ag.WebGLPipes,r.Ag.WebGPUPipes,r.Ag.CanvasPipes],name:"batch"},o._availableBatchers=Object.create(null);let s=o;r.XO.handleByMap(r.Ag.Batcher,s._availableBatchers),r.XO.add(a.J)},5834:(t,e,n)=>{n.d(e,{J:()=>k});var r=n(9084),i=n(4124),a=n(3439),o=n(6949),s=n(3618),u=n(3490);class c{constructor(){this.ids=Object.create(null),this.textures=[],this.count=0}clear(){for(let t=0;t<this.count;t++){const e=this.textures[t];this.textures[t]=null,this.ids[e.uid]=null}this.count=0}}class l{constructor(){this.renderPipeId="batch",this.action="startBatch",this.start=0,this.size=0,this.textures=new c,this.blendMode="normal",this.topology="triangle-strip",this.canBundle=!0}destroy(){this.textures=null,this.gpuBindGroup=null,this.bindGroup=null,this.batcher=null}}const d=[];let h=0;function f(){return h>0?d[--h]:new l}function x(t){d[h++]=t}let m=0;const b=class t{constructor(e={}){this.uid=(0,i.L)("batcher"),this.dirty=!0,this.batchIndex=0,this.batches=[],this._elements=[],t.defaultOptions.maxTextures=t.defaultOptions.maxTextures??(0,u.a)(),e={...t.defaultOptions,...e};const{maxTextures:n,attributesInitialSize:r,indicesInitialSize:o}=e;this.attributeBuffer=new a.u(4*r),this.indexBuffer=new Uint16Array(o),this.maxTextures=n}begin(){this.elementSize=0,this.elementStart=0,this.indexSize=0,this.attributeSize=0;for(let t=0;t<this.batchIndex;t++)x(this.batches[t]);this.batchIndex=0,this._batchIndexStart=0,this._batchIndexSize=0,this.dirty=!0}add(t){this._elements[this.elementSize++]=t,t._indexStart=this.indexSize,t._attributeStart=this.attributeSize,t._batcher=this,this.indexSize+=t.indexSize,this.attributeSize+=t.attributeSize*this.vertexSize}checkAndUpdateTexture(t,e){const n=t._batch.textures.ids[e._source.uid];return!(!n&&0!==n)&&(t._textureId=n,t.texture=e,!0)}updateElement(t){this.dirty=!0;const e=this.attributeBuffer;t.packAsQuad?this.packQuadAttributes(t,e.float32View,e.uint32View,t._attributeStart,t._textureId):this.packAttributes(t,e.float32View,e.uint32View,t._attributeStart,t._textureId)}break(t){const e=this._elements;if(!e[this.elementStart])return;let n=f(),r=n.textures;r.clear();const i=e[this.elementStart];let a=(0,s.i)(i.blendMode,i.texture._source),o=i.topology;4*this.attributeSize>this.attributeBuffer.size&&this._resizeAttributeBuffer(4*this.attributeSize),this.indexSize>this.indexBuffer.length&&this._resizeIndexBuffer(this.indexSize);const u=this.attributeBuffer.float32View,c=this.attributeBuffer.uint32View,l=this.indexBuffer;let d=this._batchIndexSize,h=this._batchIndexStart,x="startBatch";const b=this.maxTextures;for(let i=this.elementStart;i<this.elementSize;++i){const v=e[i];e[i]=null;const p=v.texture._source,g=(0,s.i)(v.blendMode,p),_=a!==g||o!==v.topology;p._batchTick!==m||_?(p._batchTick=m,(r.count>=b||_)&&(this._finishBatch(n,h,d-h,r,a,o,t,x),x="renderBatch",h=d,a=g,o=v.topology,n=f(),r=n.textures,r.clear(),++m),v._textureId=p._textureBindLocation=r.count,r.ids[p.uid]=r.count,r.textures[r.count++]=p,v._batch=n,d+=v.indexSize,v.packAsQuad?(this.packQuadAttributes(v,u,c,v._attributeStart,v._textureId),this.packQuadIndex(l,v._indexStart,v._attributeStart/this.vertexSize)):(this.packAttributes(v,u,c,v._attributeStart,v._textureId),this.packIndex(v,l,v._indexStart,v._attributeStart/this.vertexSize))):(v._textureId=p._textureBindLocation,d+=v.indexSize,v.packAsQuad?(this.packQuadAttributes(v,u,c,v._attributeStart,v._textureId),this.packQuadIndex(l,v._indexStart,v._attributeStart/this.vertexSize)):(this.packAttributes(v,u,c,v._attributeStart,v._textureId),this.packIndex(v,l,v._indexStart,v._attributeStart/this.vertexSize)),v._batch=n)}r.count>0&&(this._finishBatch(n,h,d-h,r,a,o,t,x),h=d,++m),this.elementStart=this.elementSize,this._batchIndexStart=h,this._batchIndexSize=d}_finishBatch(t,e,n,r,i,a,o,s){t.gpuBindGroup=null,t.bindGroup=null,t.action=s,t.batcher=this,t.textures=r,t.blendMode=i,t.topology=a,t.start=e,t.size=n,++m,this.batches[this.batchIndex++]=t,o.add(t)}finish(t){this.break(t)}ensureAttributeBuffer(t){4*t<=this.attributeBuffer.size||this._resizeAttributeBuffer(4*t)}ensureIndexBuffer(t){t<=this.indexBuffer.length||this._resizeIndexBuffer(t)}_resizeAttributeBuffer(t){const e=Math.max(t,2*this.attributeBuffer.size),n=new a.u(e);(0,o.W)(this.attributeBuffer.rawBinaryData,n.rawBinaryData),this.attributeBuffer=n}_resizeIndexBuffer(t){const e=this.indexBuffer;let n=Math.max(t,1.5*e.length);n+=n%2;const r=n>65535?new Uint32Array(n):new Uint16Array(n);if(r.BYTES_PER_ELEMENT!==e.BYTES_PER_ELEMENT)for(let t=0;t<e.length;t++)r[t]=e[t];else(0,o.W)(e.buffer,r.buffer);this.indexBuffer=r}packQuadIndex(t,e,n){t[e]=n+0,t[e+1]=n+1,t[e+2]=n+2,t[e+3]=n+0,t[e+4]=n+2,t[e+5]=n+3}packIndex(t,e,n,r){const i=t.indices,a=t.indexSize,o=t.indexOffset,s=t.attributeOffset;for(let t=0;t<a;t++)e[n++]=r+i[t+o]-s}destroy(){for(let t=0;t<this.batches.length;t++)x(this.batches[t]);this.batches=null;for(let t=0;t<this._elements.length;t++)this._elements[t]._batch=null;this._elements=null,this.indexBuffer=null,this.attributeBuffer.destroy(),this.attributeBuffer=null}};b.defaultOptions={maxTextures:null,attributesInitialSize:4,indicesInitialSize:6};let v=b;var p=n(7752),g=n(4583),_=n(6712);const S=new Float32Array(1),B=new Uint32Array(1);class y extends _.V{constructor(){const t=new p.h({data:S,label:"attribute-batch-buffer",usage:g.S.VERTEX|g.S.COPY_DST,shrinkToFit:!1});super({attributes:{aPosition:{buffer:t,format:"float32x2",stride:24,offset:0},aUV:{buffer:t,format:"float32x2",stride:24,offset:8},aColor:{buffer:t,format:"unorm8x4",stride:24,offset:16},aTextureIdAndRound:{buffer:t,format:"uint16x2",stride:24,offset:20}},indexBuffer:new p.h({data:B,label:"index-batch-buffer",usage:g.S.INDEX|g.S.COPY_DST,shrinkToFit:!1})})}}var T=n(684),I=n(9278),P=n(7955),z=n(2152),C=n(2137),U=n(5106);class M extends U.M{constructor(t){super({glProgram:(0,T.I)({name:"batch",bits:[I.a,(0,P.P)(t),z.m]}),gpuProgram:(0,T.v)({name:"batch",bits:[I.F,(0,P._)(t),z.b]}),resources:{batchSamplers:(0,C.n)(t)}})}}let w=null;const A=class t extends v{constructor(){super(...arguments),this.geometry=new y,this.shader=w||(w=new M(this.maxTextures)),this.name=t.extension.name,this.vertexSize=6}packAttributes(t,e,n,r,i){const a=i<<16|65535&t.roundPixels,o=t.transform,s=o.a,u=o.b,c=o.c,l=o.d,d=o.tx,h=o.ty,{positions:f,uvs:x}=t,m=t.color,b=t.attributeOffset,v=b+t.attributeSize;for(let t=b;t<v;t++){const i=2*t,o=f[i],b=f[i+1];e[r++]=s*o+c*b+d,e[r++]=l*b+u*o+h,e[r++]=x[i],e[r++]=x[i+1],n[r++]=m,n[r++]=a}}packQuadAttributes(t,e,n,r,i){const a=t.texture,o=t.transform,s=o.a,u=o.b,c=o.c,l=o.d,d=o.tx,h=o.ty,f=t.bounds,x=f.maxX,m=f.minX,b=f.maxY,v=f.minY,p=a.uvs,g=t.color,_=i<<16|65535&t.roundPixels;e[r+0]=s*m+c*v+d,e[r+1]=l*v+u*m+h,e[r+2]=p.x0,e[r+3]=p.y0,n[r+4]=g,n[r+5]=_,e[r+6]=s*x+c*v+d,e[r+7]=l*v+u*x+h,e[r+8]=p.x1,e[r+9]=p.y1,n[r+10]=g,n[r+11]=_,e[r+12]=s*x+c*b+d,e[r+13]=l*b+u*x+h,e[r+14]=p.x2,e[r+15]=p.y2,n[r+16]=g,n[r+17]=_,e[r+18]=s*m+c*b+d,e[r+19]=l*b+u*m+h,e[r+20]=p.x3,e[r+21]=p.y3,n[r+22]=g,n[r+23]=_}};A.extension={type:[r.Ag.Batcher],name:"default"};let k=A},684:(t,e,n)=>{n.d(e,{I:()=>z,v:()=>P});var r=n(1368),i=n(4557),a=n(8273);function o(t,e,n){if(t)for(const r in t){const i=e[r.toLocaleLowerCase()];if(i){let e=t[r];"header"===r&&(e=e.replace(/@in\s+[^;]+;\s*/g,"").replace(/@out\s+[^;]+;\s*/g,"")),n&&i.push(`//----${n}----//`),i.push(e)}else(0,a.R)(`${r} placement hook does not exist in shader`)}}const s=/\{\{(.*?)\}\}/g;function u(t){const e={};return(t.match(s)?.map((t=>t.replace(/[{()}]/g,"")))??[]).forEach((t=>{e[t]=[]})),e}function c(t,e){let n;const r=/@in\s+([^;]+);/g;for(;null!==(n=r.exec(t));)e.push(n[1])}function l(t,e,n=!1){const r=[];c(e,r),t.forEach((t=>{t.header&&c(t.header,r)}));const i=r;n&&i.sort();const a=i.map(((t,e)=>`       @location(${e}) ${t},`)).join("\n");let o=e.replace(/@in\s+[^;]+;\s*/g,"");return o=o.replace("{{in}}",`\n${a}\n`),o}function d(t,e){let n;const r=/@out\s+([^;]+);/g;for(;null!==(n=r.exec(t));)e.push(n[1])}function h(t,e){let n=t;for(const t in e){const r=e[t];n=r.join("\n").length?n.replace(`{{${t}}}`,`//-----${t} START-----//\n${r.join("\n")}\n//----${t} FINISH----//`):n.replace(`{{${t}}}`,"")}return n}const f=Object.create(null),x=new Map;let m=0;function b({template:t,bits:e}){const n=p(t,e);if(f[n])return f[n];const{vertex:r,fragment:i}=function(t,e){const n=e.map((t=>t.vertex)).filter((t=>!!t)),r=e.map((t=>t.fragment)).filter((t=>!!t));let i=l(n,t.vertex,!0);i=function(t,e){const n=[];d(e,n),t.forEach((t=>{t.header&&d(t.header,n)}));let r=0;const i=n.sort().map((t=>t.indexOf("builtin")>-1?t:`@location(${r++}) ${t}`)).join(",\n"),a=n.sort().map((t=>{return`       var ${e=t,e.replace(/@.*?\s+/g,"")};`;var e})).join("\n"),o=`return VSOutput(\n            ${n.sort().map((t=>` ${function(t){const e=/\b(\w+)\s*:/g.exec(t);return e?e[1]:""}(t)}`)).join(",\n")});`;let s=e.replace(/@out\s+[^;]+;\s*/g,"");return s=s.replace("{{struct}}",`\n${i}\n`),s=s.replace("{{start}}",`\n${a}\n`),s=s.replace("{{return}}",`\n${o}\n`),s}(n,i);const a=l(r,t.fragment,!0);return{vertex:i,fragment:a}}(t,e);return f[n]=g(r,i,e),f[n]}function v({template:t,bits:e}){const n=p(t,e);return f[n]||(f[n]=g(t.vertex,t.fragment,e)),f[n]}function p(t,e){return e.map((t=>(x.has(t)||x.set(t,m++),x.get(t)))).sort(((t,e)=>t-e)).join("-")+t.vertex+t.fragment}function g(t,e,n){const r=u(t),i=u(e);return n.forEach((t=>{o(t.vertex,r,t.name),o(t.fragment,i,t.name)})),{vertex:h(t,r),fragment:h(e,i)}}const _="\n    @in aPosition: vec2<f32>;\n    @in aUV: vec2<f32>;\n\n    @out @builtin(position) vPosition: vec4<f32>;\n    @out vUV : vec2<f32>;\n    @out vColor : vec4<f32>;\n\n    {{header}}\n\n    struct VSOutput {\n        {{struct}}\n    };\n\n    @vertex\n    fn main( {{in}} ) -> VSOutput {\n\n        var worldTransformMatrix = globalUniforms.uWorldTransformMatrix;\n        var modelMatrix = mat3x3<f32>(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        var position = aPosition;\n        var uv = aUV;\n\n        {{start}}\n        \n        vColor = vec4<f32>(1., 1., 1., 1.);\n\n        {{main}}\n\n        vUV = uv;\n\n        var modelViewProjectionMatrix = globalUniforms.uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        vPosition =  vec4<f32>((modelViewProjectionMatrix *  vec3<f32>(position, 1.0)).xy, 0.0, 1.0);\n       \n        vColor *= globalUniforms.uWorldColorAlpha;\n\n        {{end}}\n\n        {{return}}\n    };\n",S="\n    @in vUV : vec2<f32>;\n    @in vColor : vec4<f32>;\n   \n    {{header}}\n\n    @fragment\n    fn main(\n        {{in}}\n      ) -> @location(0) vec4<f32> {\n        \n        {{start}}\n\n        var outColor:vec4<f32>;\n      \n        {{main}}\n        \n        var finalColor:vec4<f32> = outColor * vColor;\n\n        {{end}}\n\n        return finalColor;\n      };\n",B="\n    in vec2 aPosition;\n    in vec2 aUV;\n\n    out vec4 vColor;\n    out vec2 vUV;\n\n    {{header}}\n\n    void main(void){\n\n        mat3 worldTransformMatrix = uWorldTransformMatrix;\n        mat3 modelMatrix = mat3(\n            1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0,\n            0.0, 0.0, 1.0\n          );\n        vec2 position = aPosition;\n        vec2 uv = aUV;\n        \n        {{start}}\n        \n        vColor = vec4(1.);\n        \n        {{main}}\n        \n        vUV = uv;\n        \n        mat3 modelViewProjectionMatrix = uProjectionMatrix * worldTransformMatrix * modelMatrix;\n\n        gl_Position = vec4((modelViewProjectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n\n        vColor *= uWorldColorAlpha;\n\n        {{end}}\n    }\n",y="\n   \n    in vec4 vColor;\n    in vec2 vUV;\n\n    out vec4 finalColor;\n\n    {{header}}\n\n    void main(void) {\n        \n        {{start}}\n\n        vec4 outColor;\n      \n        {{main}}\n        \n        finalColor = outColor * vColor;\n        \n        {{end}}\n    }\n",T={name:"global-uniforms-bit",vertex:{header:"\n        struct GlobalUniforms {\n            uProjectionMatrix:mat3x3<f32>,\n            uWorldTransformMatrix:mat3x3<f32>,\n            uWorldColorAlpha: vec4<f32>,\n            uResolution: vec2<f32>,\n        }\n\n        @group(0) @binding(0) var<uniform> globalUniforms : GlobalUniforms;\n        "}},I={name:"global-uniforms-bit",vertex:{header:"\n          uniform mat3 uProjectionMatrix;\n          uniform mat3 uWorldTransformMatrix;\n          uniform vec4 uWorldColorAlpha;\n          uniform vec2 uResolution;\n        "}};function P({bits:t,name:e}){const n=b({template:{fragment:S,vertex:_},bits:[T,...t]});return i.B.from({name:e,vertex:{source:n.vertex,entryPoint:"main"},fragment:{source:n.fragment,entryPoint:"main"}})}function z({bits:t,name:e}){return new r.M({name:e,...v({template:{vertex:B,fragment:y},bits:[I,...t]})})}},9278:(t,e,n)=>{n.d(e,{F:()=>r,a:()=>i});const r={name:"color-bit",vertex:{header:"\n            @in aColor: vec4<f32>;\n        ",main:"\n            vColor *= vec4<f32>(aColor.rgb * aColor.a, aColor.a);\n        "}},i={name:"color-bit",vertex:{header:"\n            in vec4 aColor;\n        ",main:"\n            vColor *= vec4(aColor.rgb * aColor.a, aColor.a);\n        "}}},7955:(t,e,n)=>{n.d(e,{P:()=>c,_:()=>o});const r={};function i(t){const e=[];if(1===t)e.push("@group(1) @binding(0) var textureSource1: texture_2d<f32>;"),e.push("@group(1) @binding(1) var textureSampler1: sampler;");else{let n=0;for(let r=0;r<t;r++)e.push(`@group(1) @binding(${n++}) var textureSource${r+1}: texture_2d<f32>;`),e.push(`@group(1) @binding(${n++}) var textureSampler${r+1}: sampler;`)}return e.join("\n")}function a(t){const e=[];if(1===t)e.push("outColor = textureSampleGrad(textureSource1, textureSampler1, vUV, uvDx, uvDy);");else{e.push("switch vTextureId {");for(let n=0;n<t;n++)n===t-1?e.push("  default:{"):e.push(`  case ${n}:{`),e.push(`      outColor = textureSampleGrad(textureSource${n+1}, textureSampler${n+1}, vUV, uvDx, uvDy);`),e.push("      break;}");e.push("}")}return e.join("\n")}function o(t){return r[t]||(r[t]={name:"texture-batch-bit",vertex:{header:"\n                @in aTextureIdAndRound: vec2<u32>;\n                @out @interpolate(flat) vTextureId : u32;\n            ",main:"\n                vTextureId = aTextureIdAndRound.y;\n            ",end:"\n                if(aTextureIdAndRound.x == 1)\n                {\n                    vPosition = vec4<f32>(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n                }\n            "},fragment:{header:`\n                @in @interpolate(flat) vTextureId: u32;\n\n                ${i(t)}\n            `,main:`\n                var uvDx = dpdx(vUV);\n                var uvDy = dpdy(vUV);\n\n                ${a(t)}\n            `}}),r[t]}const s={};function u(t){const e=[];for(let n=0;n<t;n++)n>0&&e.push("else"),n<t-1&&e.push(`if(vTextureId < ${n}.5)`),e.push("{"),e.push(`\toutColor = texture(uTextures[${n}], vUV);`),e.push("}");return e.join("\n")}function c(t){return s[t]||(s[t]={name:"texture-batch-bit",vertex:{header:"\n                in vec2 aTextureIdAndRound;\n                out float vTextureId;\n\n            ",main:"\n                vTextureId = aTextureIdAndRound.y;\n            ",end:"\n                if(aTextureIdAndRound.x == 1.)\n                {\n                    gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n                }\n            "},fragment:{header:`\n                in float vTextureId;\n\n                uniform sampler2D uTextures[${t}];\n\n            `,main:`\n\n                ${u(t)}\n            `}}),s[t]}},544:(t,e,n)=>{n.d(e,{Ls:()=>r,_Q:()=>i,mA:()=>a});const r={name:"local-uniform-bit",vertex:{header:"\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "}},i={...r,vertex:{...r.vertex,header:r.vertex.header.replace("group(1)","group(2)")}},a={name:"local-uniform-bit",vertex:{header:"\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "}}},2152:(t,e,n)=>{n.d(e,{b:()=>r,m:()=>i});const r={name:"round-pixels-bit",vertex:{header:"\n            fn roundPixels(position: vec2<f32>, targetSize: vec2<f32>) -> vec2<f32> \n            {\n                return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n            }\n        "}},i={name:"round-pixels-bit",vertex:{header:"   \n            vec2 roundPixels(vec2 position, vec2 targetSize)\n            {       \n                return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n            }\n        "}}},3086:(t,e,n)=>{n.d(e,{R:()=>r,m:()=>i});const r={name:"texture-bit",vertex:{header:"\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        ",main:"\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        "},fragment:{header:"\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        ",main:"\n            outColor = textureSample(uTexture, uSampler, vUV);\n        "}},i={name:"texture-bit",vertex:{header:"\n            uniform mat3 uTextureMatrix;\n        ",main:"\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        "},fragment:{header:"\n        uniform sampler2D uTexture;\n\n         \n        ",main:"\n            outColor = texture(uTexture, vUV);\n        "}}},924:(t,e,n)=>{var r=n(9084),i=n(2066),a=n(2602),o=n(2314),s=n(8898),u=n(7655),c=n(600),l=n(8914);n(5388);r.XO.add(i.Z,a.W,o.r,l.$,c.b,u.q,s.P)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,