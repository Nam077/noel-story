"use strict";(self.webpackChunkpixijs_game=self.webpackChunkpixijs_game||[]).push([[410],{6816:(e,t,s)=>{s.d(t,{v:()=>r});var n=s(413),i=s(2597);class r extends n.A{constructor(){super(...arguments),this.chars=Object.create(null),this.lineHeight=0,this.fontFamily="",this.fontMetrics={fontSize:0,ascent:0,descent:0},this.baseLineOffset=0,this.distanceField={type:"none",range:0},this.pages=[],this.applyFillAsTint=!0,this.baseMeasurementFontSize=100,this.baseRenderedFontSize=100}get font(){return(0,i.t6)(i.lj,"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead."),this.fontFamily}get pageTextures(){return(0,i.t6)(i.lj,"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead."),this.pages}get size(){return(0,i.t6)(i.lj,"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead."),this.fontMetrics.fontSize}get distanceFieldRange(){return(0,i.t6)(i.lj,"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead."),this.distanceField.range}get distanceFieldType(){return(0,i.t6)(i.lj,"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead."),this.distanceField.type}destroy(e=!1){this.emit("destroy",this),this.removeAllListeners();for(const e in this.chars)this.chars[e].texture?.destroy();this.chars=null,e&&(this.pages.forEach((e=>e.texture.destroy(!0))),this.pages=null)}}},3413:(e,t,s)=>{s.d(t,{c:()=>b});var n=s(6354),i=s(2597),r=s(8273),a=s(9914),o=s(1598),l=s(7474),h=s(1875),d=s(600),c=s(8554),u=s(5315),p=s(1425),g=s(3605),f=s(6816);function x(e){if(""===e)return[];"string"==typeof e&&(e=[e]);const t=[];for(let s=0,n=e.length;s<n;s++){const n=e[s];if(Array.isArray(n)){if(2!==n.length)throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${n.length}.`);if(0===n[0].length||0===n[1].length)throw new Error("[BitmapFont]: Invalid character delimiter.");const e=n[0].charCodeAt(0),s=n[1].charCodeAt(0);if(s<e)throw new Error("[BitmapFont]: Invalid character range.");for(let n=e,i=s;n<=i;n++)t.push(String.fromCharCode(n))}else t.push(...Array.from(n))}if(0===t.length)throw new Error("[BitmapFont]: Empty set when resolving characters.");return t}const m=class e extends f.v{constructor(t){super(),this.resolution=1,this.pages=[],this._padding=0,this._measureCache=Object.create(null),this._currentChars=[],this._currentX=0,this._currentY=0,this._currentPageIndex=-1,this._skipKerning=!1;const s={...e.defaultOptions,...t};this._textureSize=s.textureSize,this._mipmap=s.mipmap;const n=s.style.clone();s.overrideFill&&(n._fill.color=16777215,n._fill.alpha=1,n._fill.texture=c.g.WHITE,n._fill.fill=null),this.applyFillAsTint=s.overrideFill;const i=n.fontSize;n.fontSize=this.baseMeasurementFontSize;const r=(0,p.Z)(n);s.overrideSize?n._stroke&&(n._stroke.width*=this.baseRenderedFontSize/i):n.fontSize=this.baseRenderedFontSize=i,this._style=n,this._skipKerning=s.skipKerning??!1,this.resolution=s.resolution??1,this._padding=s.padding??4,this.fontMetrics=u.P.measureFont(r),this.lineHeight=n.lineHeight||this.fontMetrics.fontSize||n.fontSize}ensureCharacters(e){const t=x(e).filter((e=>!this._currentChars.includes(e))).filter(((e,t,s)=>s.indexOf(e)===t));if(!t.length)return;let s;this._currentChars=[...this._currentChars,...t],s=-1===this._currentPageIndex?this._nextPage():this.pages[this._currentPageIndex];let{canvas:n,context:i}=s.canvasAndContext,r=s.texture.source;const a=this._style;let o=this._currentX,h=this._currentY;const d=this.baseRenderedFontSize/this.baseMeasurementFontSize,p=this._padding*d;let g=0,f=!1;const m=n.width/this.resolution,y=n.height/this.resolution;for(let e=0;e<t.length;e++){const s=t[e],x=u.P.measureText(s,a,n,!1);x.lineHeight=x.height;const _=x.width*d,w=Math.ceil(("italic"===a.fontStyle?2:1)*_)+2*p,b=x.height*d+2*p;if(f=!1,"\n"!==s&&"\r"!==s&&"\t"!==s&&" "!==s&&(f=!0,g=Math.ceil(Math.max(b,g))),o+w>m&&(h+=g,g=b,o=0,h+g>y)){r.update();const e=this._nextPage();n=e.canvasAndContext.canvas,i=e.canvasAndContext.context,r=e.texture.source,h=0}const S=_/d-(a.dropShadow?.distance??0)-(a._stroke?.width??0);if(this.chars[s]={id:s.codePointAt(0),xOffset:-this._padding,yOffset:-this._padding,xAdvance:S,kerning:{}},f){this._drawGlyph(i,x,o+p,h+p,d,a);const e=r.width*d,t=r.height*d,n=new l.M(o/e*r.width,h/t*r.height,w/e*r.width,b/t*r.height);this.chars[s].texture=new c.g({source:r,frame:n}),o+=Math.ceil(w)}}r.update(),this._currentX=o,this._currentY=h,this._skipKerning&&this._applyKerning(t,i)}get pageTextures(){return(0,i.t6)(i.lj,"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead."),this.pages}_applyKerning(e,t){const s=this._measureCache;for(let n=0;n<e.length;n++){const i=e[n];for(let e=0;e<this._currentChars.length;e++){const n=this._currentChars[e];let r=s[i];r||(r=s[i]=t.measureText(i).width);let a=s[n];a||(a=s[n]=t.measureText(n).width);let o=t.measureText(i+n).width,l=o-(r+a);l&&(this.chars[i].kerning[n]=l),o=t.measureText(i+n).width,l=o-(r+a),l&&(this.chars[n].kerning[i]=l)}}}_nextPage(){this._currentPageIndex++;const e=this.resolution,t=h.N.getOptimalCanvasAndContext(this._textureSize,this._textureSize,e);this._setupContext(t.context,this._style,e);const s=e*(this.baseRenderedFontSize/this.baseMeasurementFontSize),n={canvasAndContext:t,texture:new c.g({source:new d.b({resource:t.canvas,resolution:s,alphaMode:"premultiply-alpha-on-upload",autoGenerateMipmaps:this._mipmap})})};return this.pages[this._currentPageIndex]=n,n}_setupContext(e,t,s){t.fontSize=this.baseRenderedFontSize,e.scale(s,s),e.font=(0,p.Z)(t),t.fontSize=this.baseMeasurementFontSize,e.textBaseline=t.textBaseline;const n=t._stroke,i=n?.width??0;if(n&&(e.lineWidth=i,e.lineJoin=n.join,e.miterLimit=n.miterLimit,e.strokeStyle=(0,g.r)(n,e)),t._fill&&(e.fillStyle=(0,g.r)(t._fill,e)),t.dropShadow){const n=t.dropShadow,i=o.Q.shared.setValue(n.color).toArray(),r=n.blur*s,a=n.distance*s;e.shadowColor=`rgba(${255*i[0]},${255*i[1]},${255*i[2]},${n.alpha})`,e.shadowBlur=r,e.shadowOffsetX=Math.cos(n.angle)*a,e.shadowOffsetY=Math.sin(n.angle)*a}else e.shadowColor="black",e.shadowBlur=0,e.shadowOffsetX=0,e.shadowOffsetY=0}_drawGlyph(e,t,s,n,i,r){const a=t.text,o=t.fontProperties,l=r._stroke,h=(l?.width??0)*i,d=s+h/2,c=n-h/2,u=o.descent*i,p=t.lineHeight*i;r.stroke&&h&&e.strokeText(a,d,c+p-u),r._fill&&e.fillText(a,d,c+p-u)}destroy(){super.destroy();for(let e=0;e<this.pages.length;e++){const{canvasAndContext:t,texture:s}=this.pages[e];h.N.returnCanvasAndContext(t),s.destroy(!0)}this.pages=null}};m.defaultOptions={textureSize:512,style:new a.x,mipmap:!0};let y=m;var _=s(2708);let w=0;const b=new class{constructor(){this.ALPHA=[["a","z"],["A","Z"]," "],this.NUMERIC=[["0","9"]],this.ALPHANUMERIC=[["a","z"],["A","Z"],["0","9"]," "],this.ASCII=[[" ","~"]],this.defaultOptions={chars:this.ALPHANUMERIC,resolution:1,padding:4,skipKerning:!1}}getFont(e,t){let s=`${t.fontFamily}-bitmap`,i=!0;if(t._fill.fill&&!t._stroke)s+=t._fill.fill.styleKey,i=!1;else if(t._stroke||t.dropShadow){let e=t.styleKey;e=e.substring(0,e.lastIndexOf("-")),s=`${e}-bitmap`,i=!1}if(!n.l.has(s)){const e=new y({style:t,overrideFill:i,overrideSize:!0,...this.defaultOptions});w++,w>50&&(0,r.R)("BitmapText",`You have dynamically created ${w} bitmap fonts, this can be inefficient. Try pre installing your font styles using \`BitmapFont.install({name:"style1", style})\``),e.once("destroy",(()=>{w--,n.l.remove(s)})),n.l.set(s,e)}const a=n.l.get(s);return a.ensureCharacters?.(e),a}getLayout(e,t,s=!0){const n=this.getFont(e,t);return(0,_.Z)([...e],t,n,s)}measureText(e,t,s=!0){return this.getLayout(e,t,s)}install(...e){let t=e[0];"string"==typeof t&&(t={name:t,style:e[1],chars:e[2]?.chars,resolution:e[2]?.resolution,padding:e[2]?.padding,skipKerning:e[2]?.skipKerning},(0,i.t6)(i.lj,"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})"));const s=t?.name;if(!s)throw new Error("[BitmapFontManager] Property `name` is required.");t={...this.defaultOptions,...t};const r=t.style,o=r instanceof a.x?r:new a.x(r),l=null!==o._fill.fill&&void 0!==o._fill.fill,h=new y({style:o,overrideFill:l,skipKerning:t.skipKerning,padding:t.padding,resolution:t.resolution,overrideSize:!1}),d=x(t.chars);return h.ensureCharacters(d.join("")),n.l.set(`${s}-bitmap`,h),h.once("destroy",(()=>n.l.remove(`${s}-bitmap`))),h}uninstall(e){const t=`${e}-bitmap`,s=n.l.get(t);s&&s.destroy()}}},9162:(e,t,s)=>{s.d(t,{w:()=>m,R:()=>y});var n=s(9160),i=s(4494),r=s(4184),a=s(9084),o=s(2138),l=s(7474),h=s(8554),d=s(6816),c=s(3413);class u extends d.v{constructor(e,t){super();const{textures:s,data:n}=e;Object.keys(n.pages).forEach((e=>{const t=n.pages[parseInt(e,10)],i=s[t.id];this.pages.push({texture:i})})),Object.keys(n.chars).forEach((e=>{const t=n.chars[e],{frame:i,source:r}=s[t.page],a=new l.M(t.x+i.x,t.y+i.y,t.width,t.height),o=new h.g({source:r,frame:a});this.chars[e]={id:e.codePointAt(0),xOffset:t.xOffset,yOffset:t.yOffset,xAdvance:t.xAdvance,kerning:t.kerning??{},texture:o}})),this.baseRenderedFontSize=n.fontSize,this.baseMeasurementFontSize=n.fontSize,this.fontMetrics={ascent:0,descent:0,fontSize:n.fontSize},this.baseLineOffset=n.baseLineOffset,this.lineHeight=n.lineHeight,this.fontFamily=n.fontFamily,this.distanceField=n.distanceField??{type:"none",range:0},this.url=t}destroy(){super.destroy();for(let e=0;e<this.pages.length;e++){const{texture:t}=this.pages[e];t.destroy(!0)}this.pages=null}static install(e){c.c.install(e)}static uninstall(e){c.c.uninstall(e)}}const p={test:e=>"string"==typeof e&&e.startsWith("info face="),parse(e){const t=e.match(/^[a-z]+\s+.+$/gm),s={info:[],common:[],page:[],char:[],chars:[],kerning:[],kernings:[],distanceField:[]};for(const e in t){const n=t[e].match(/^[a-z]+/gm)[0],i=t[e].match(/[a-zA-Z]+=([^\s"']+|"([^"]*)")/gm),r={};for(const e in i){const t=i[e].split("="),s=t[0],n=t[1].replace(/"/gm,""),a=parseFloat(n),o=isNaN(a)?n:a;r[s]=o}s[n].push(r)}const n={chars:{},pages:[],lineHeight:0,fontSize:0,fontFamily:"",distanceField:null,baseLineOffset:0},[i]=s.info,[r]=s.common,[a]=s.distanceField??[];a&&(n.distanceField={range:parseInt(a.distanceRange,10),type:a.fieldType}),n.fontSize=parseInt(i.size,10),n.fontFamily=i.face,n.lineHeight=parseInt(r.lineHeight,10);const o=s.page;for(let e=0;e<o.length;e++)n.pages.push({id:parseInt(o[e].id,10)||0,file:o[e].file});const l={};n.baseLineOffset=n.lineHeight-parseInt(r.base,10);const h=s.char;for(let e=0;e<h.length;e++){const t=h[e],s=parseInt(t.id,10);let i=t.letter??t.char??String.fromCharCode(s);"space"===i&&(i=" "),l[s]=i,n.chars[i]={id:s,page:parseInt(t.page,10)||0,x:parseInt(t.x,10),y:parseInt(t.y,10),width:parseInt(t.width,10),height:parseInt(t.height,10),xOffset:parseInt(t.xoffset,10),yOffset:parseInt(t.yoffset,10),xAdvance:parseInt(t.xadvance,10),kerning:{}}}const d=s.kerning||[];for(let e=0;e<d.length;e++){const t=parseInt(d[e].first,10),s=parseInt(d[e].second,10),i=parseInt(d[e].amount,10);n.chars[l[s]].kerning[l[t]]=i}return n}},g={test(e){const t=e;return"string"!=typeof t&&"getElementsByTagName"in t&&t.getElementsByTagName("page").length&&null!==t.getElementsByTagName("info")[0].getAttribute("face")},parse(e){const t={chars:{},pages:[],lineHeight:0,fontSize:0,fontFamily:"",distanceField:null,baseLineOffset:0},s=e.getElementsByTagName("info")[0],n=e.getElementsByTagName("common")[0],i=e.getElementsByTagName("distanceField")[0];i&&(t.distanceField={type:i.getAttribute("fieldType"),range:parseInt(i.getAttribute("distanceRange"),10)});const r=e.getElementsByTagName("page"),a=e.getElementsByTagName("char"),o=e.getElementsByTagName("kerning");t.fontSize=parseInt(s.getAttribute("size"),10),t.fontFamily=s.getAttribute("face"),t.lineHeight=parseInt(n.getAttribute("lineHeight"),10);for(let e=0;e<r.length;e++)t.pages.push({id:parseInt(r[e].getAttribute("id"),10)||0,file:r[e].getAttribute("file")});const l={};t.baseLineOffset=t.lineHeight-parseInt(n.getAttribute("base"),10);for(let e=0;e<a.length;e++){const s=a[e],n=parseInt(s.getAttribute("id"),10);let i=s.getAttribute("letter")??s.getAttribute("char")??String.fromCharCode(n);"space"===i&&(i=" "),l[n]=i,t.chars[i]={id:n,page:parseInt(s.getAttribute("page"),10)||0,x:parseInt(s.getAttribute("x"),10),y:parseInt(s.getAttribute("y"),10),width:parseInt(s.getAttribute("width"),10),height:parseInt(s.getAttribute("height"),10),xOffset:parseInt(s.getAttribute("xoffset"),10),yOffset:parseInt(s.getAttribute("yoffset"),10),xAdvance:parseInt(s.getAttribute("xadvance"),10),kerning:{}}}for(let e=0;e<o.length;e++){const s=parseInt(o[e].getAttribute("first"),10),n=parseInt(o[e].getAttribute("second"),10),i=parseInt(o[e].getAttribute("amount"),10);t.chars[l[n]].kerning[l[s]]=i}return t}},f={test:e=>!("string"!=typeof e||!e.includes("<font>"))&&g.test(r.e.get().parseXML(e)),parse:e=>g.parse(r.e.get().parseXML(e))},x=[".xml",".fnt"],m={extension:{type:a.Ag.CacheParser,name:"cacheBitmapFont"},test:e=>e instanceof u,getCacheableAssets(e,t){const s={};return e.forEach((e=>{s[e]=t,s[`${e}-bitmap`]=t})),s[`${t.fontFamily}-bitmap`]=t,s}},y={extension:{type:a.Ag.LoadParser,priority:n.T.Normal},name:"loadBitmapFont",test:e=>x.includes(o.A.extname(e).toLowerCase()),testParse:async e=>p.test(e)||f.test(e),async parse(e,t,s){const n=p.test(e)?p.parse(e):f.parse(e),{src:r}=t,{pages:a}=n,l=[],h=n.distanceField?{scaleMode:"linear",alphaMode:"premultiply-alpha-on-upload",autoGenerateMipmaps:!1,resolution:1}:{};for(let e=0;e<a.length;++e){const t=a[e].file;let s=o.A.join(o.A.dirname(r),t);s=(0,i.Y)(s,r),l.push({src:s,data:h})}const d=await s.load(l),c=l.map((e=>d[e.src]));return new u({data:n,textures:c},r)},async load(e,t){const s=await r.e.get().fetch(e);return await s.text()},async unload(e,t,s){await Promise.all(e.pages.map((e=>s.unload(e.texture.source._sourceOrigin)))),e.destroy()}}},169:(e,t,s)=>{var n=s(9084),i=s(6354),r=s(8143),a=s(9201),o=s(3521),l=s(3413),h=s(2708);class d{constructor(e){this._gpuBitmapText={},this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuBitmapText")}validateRenderable(e){const t=this._getGpuBitmapText(e);return e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,t)),this._renderer.renderPipes.graphics.validateRenderable(t)}addRenderable(e,t){const s=this._getGpuBitmapText(e);c(e,s),e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,s)),this._renderer.renderPipes.graphics.addRenderable(s,t),s.context.customShader&&this._updateDistanceField(e)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableByUid(e.uid)}_destroyRenderableByUid(e){const t=this._gpuBitmapText[e].context;t.customShader&&(r.Z.return(t.customShader),t.customShader=null),r.Z.return(this._gpuBitmapText[e]),this._gpuBitmapText[e]=null}updateRenderable(e){const t=this._getGpuBitmapText(e);c(e,t),this._renderer.renderPipes.graphics.updateRenderable(t),t.context.customShader&&this._updateDistanceField(e)}_updateContext(e,t){const{context:s}=t,n=l.c.getFont(e.text,e._style);s.clear(),"none"!==n.distanceField.type&&(s.customShader||(s.customShader=r.Z.get(o.$)));const i=Array.from(e.text),a=e._style;let d=n.baseLineOffset;const c=(0,h.Z)(i,a,n,!0);let u=0;const p=a.padding,g=c.scale;let f=c.width,x=c.height+c.offsetY;a._stroke&&(f+=a._stroke.width/g,x+=a._stroke.width/g),s.translate(-e._anchor._x*f-p,-e._anchor._y*x-p).scale(g,g);const m=n.applyFillAsTint?a._fill.color:16777215;for(let e=0;e<c.lines.length;e++){const t=c.lines[e];for(let e=0;e<t.charPositions.length;e++){const r=i[u++],a=n.chars[r];a?.texture&&s.texture(a.texture,m||"black",Math.round(t.charPositions[e]+a.xOffset),Math.round(d+a.yOffset))}d+=n.lineHeight}}_getGpuBitmapText(e){return this._gpuBitmapText[e.uid]||this.initGpuText(e)}initGpuText(e){const t=r.Z.get(a.A);return this._gpuBitmapText[e.uid]=t,this._updateContext(e,t),e.on("destroyed",this._destroyRenderableBound),this._gpuBitmapText[e.uid]}_updateDistanceField(e){const t=this._getGpuBitmapText(e).context,s=e._style.fontFamily,n=i.l.get(`${s}-bitmap`),{a:r,b:a,c:o,d:l}=e.groupTransform,h=Math.sqrt(r*r+a*a),d=Math.sqrt(o*o+l*l),c=(Math.abs(h)+Math.abs(d))/2,u=n.baseRenderedFontSize/e._style.fontSize,p=c*n.distanceField.range*(1/u);t.customShader.resources.localUniforms.uniforms.uDistance=p}destroy(){for(const e in this._gpuBitmapText)this._destroyRenderableByUid(e);this._gpuBitmapText=null,this._renderer=null}}function c(e,t){t.groupTransform=e.groupTransform,t.groupColorAlpha=e.groupColorAlpha,t.groupColor=e.groupColor,t.groupBlendMode=e.groupBlendMode,t.globalDisplayStatus=e.globalDisplayStatus,t.groupTransform=e.groupTransform,t.localDisplayStatus=e.localDisplayStatus,t.groupAlpha=e.groupAlpha,t._roundPixels=e._roundPixels}d.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"bitmapText"},n.XO.add(d)},2708:(e,t,s)=>{function n(e,t,s,n){const i={width:0,height:0,offsetY:0,scale:t.fontSize/s.baseMeasurementFontSize,lines:[{width:0,charPositions:[],spaceWidth:0,spacesIndex:[],chars:[]}]};i.offsetY=s.baseLineOffset;let r=i.lines[0],a=null,o=!0;const l={spaceWord:!1,width:0,start:0,index:0,positions:[],chars:[]},h=e=>{const t=r.width;for(let s=0;s<l.index;s++){const n=e.positions[s];r.chars.push(e.chars[s]),r.charPositions.push(n+t)}r.width+=e.width,o=!1,l.width=0,l.index=0,l.chars.length=0},d=()=>{let e=r.chars.length-1;if(n){let t=r.chars[e];for(;" "===t;)r.width-=s.chars[t].xAdvance,t=r.chars[--e]}i.width=Math.max(i.width,r.width),r={width:0,charPositions:[],chars:[],spaceWidth:0,spacesIndex:[]},o=!0,i.lines.push(r),i.height+=s.lineHeight},c=s.baseMeasurementFontSize/t.fontSize,u=t.letterSpacing*c,p=t.wordWrapWidth*c;for(let n=0;n<e.length+1;n++){let i;const c=n===e.length;c||(i=e[n]);const g=s.chars[i]||s.chars[" "];if(/(?:\s)/.test(i)||"\r"===i||"\n"===i||c){if(!o&&t.wordWrap&&r.width+l.width-u>p?(d(),h(l),c||r.charPositions.push(0)):(l.start=r.width,h(l),c||r.charPositions.push(0)),"\r"===i||"\n"===i)0!==r.width&&d();else if(!c){const e=g.xAdvance+(g.kerning[a]||0)+u;r.width+=e,r.spaceWidth=e,r.spacesIndex.push(r.charPositions.length),r.chars.push(i)}}else{const e=g.kerning[a]||0,t=g.xAdvance+e+u;l.positions[l.index++]=l.width+e,l.chars.push(i),l.width+=t}a=i}return d(),"center"===t.align?function(e){for(let t=0;t<e.lines.length;t++){const s=e.lines[t],n=e.width/2-s.width/2;for(let e=0;e<s.charPositions.length;e++)s.charPositions[e]+=n}}(i):"right"===t.align?function(e){for(let t=0;t<e.lines.length;t++){const s=e.lines[t],n=e.width-s.width;for(let e=0;e<s.charPositions.length;e++)s.charPositions[e]+=n}}(i):"justify"===t.align&&function(e){const t=e.width;for(let s=0;s<e.lines.length;s++){const n=e.lines[s];let i=0,r=n.spacesIndex[i++],a=0;const o=n.spacesIndex.length,l=(t-n.width)/o;for(let e=0;e<n.charPositions.length;e++)e===r&&(r=n.spacesIndex[i++],a+=l),n.charPositions[e]+=a}}(i),i}s.d(t,{Z:()=>n})},6689:(e,t,s)=>{var n=s(9084),i=s(8554),r=s(4579),a=s(8143),o=s(5235);class l{constructor(e){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.runners.resolutionChange.add(this),this._renderer.renderableGC.addManagedHash(this,"_gpuText")}resolutionChange(){for(const e in this._gpuText){const t=this._gpuText[e];if(!t)continue;const s=t.batchableSprite.renderable;s._autoResolution&&(s._resolution=this._renderer.resolution,s.onViewUpdate())}}validateRenderable(e){const t=this._getGpuText(e),s=e._getKey();return t.textureNeedsUploading?(t.textureNeedsUploading=!1,!0):t.currentKey!==s}addRenderable(e,t){const s=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(s,t)}updateRenderable(e){const t=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),t._batcher.updateElement(t)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.htmlText.decreaseReferenceCount(t.currentKey),a.Z.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),s=this._getGpuText(e),n=s.batchableSprite;s.currentKey!==t&&this._updateGpuText(e).catch((e=>{console.error(e)})),e._didTextUpdate=!1;const i=e._style.padding;(0,r.y)(n.bounds,e._anchor,n.texture,i)}async _updateGpuText(e){e._didTextUpdate=!1;const t=this._getGpuText(e);if(t.generatingTexture)return;const s=e._getKey();this._renderer.htmlText.decreaseReferenceCount(t.currentKey),t.generatingTexture=!0,t.currentKey=s;const n=e.resolution??this._renderer.resolution,i=await this._renderer.htmlText.getManagedTexture(e.text,n,e._style,e._getKey()),a=t.batchableSprite;a.texture=t.texture=i,t.generatingTexture=!1,t.textureNeedsUploading=!0,e.onViewUpdate();const o=e._style.padding;(0,r.y)(a.bounds,e._anchor,a.texture,o)}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:i.g.EMPTY,currentKey:"--",batchableSprite:a.Z.get(o.K),textureNeedsUploading:!1,generatingTexture:!1},s=t.batchableSprite;return s.renderable=e,s.transform=e.groupTransform,s.texture=i.g.EMPTY,s.bounds={minX:0,maxX:1,minY:0,maxY:0},s.roundPixels=this._renderer._roundPixels|e._roundPixels,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,this._gpuText[e.uid]=t,e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}l.extension={type:[n.Ag.WebGLPipes,n.Ag.WebGPUPipes,n.Ag.CanvasPipes],name:"htmlText"};var h=s(1875),d=s(1448),c=s(2672),u=s(472),p=s(8273),g=s(5331);const f="http://www.w3.org/2000/svg",x="http://www.w3.org/1999/xhtml";class m{constructor(){this.svgRoot=document.createElementNS(f,"svg"),this.foreignObject=document.createElementNS(f,"foreignObject"),this.domElement=document.createElementNS(x,"div"),this.styleElement=document.createElementNS(x,"style"),this.image=new Image;const{foreignObject:e,svgRoot:t,styleElement:s,domElement:n}=this;e.setAttribute("width","10000"),e.setAttribute("height","10000"),e.style.overflow="hidden",t.appendChild(e),e.appendChild(s),e.appendChild(n)}}var y=s(9914),_=s(9088),w=s(1598);function b(e){const t=e._stroke,s=e._fill,n=[`div { ${[`color: ${w.Q.shared.setValue(s.color).toHex()}`,`font-size: ${e.fontSize}px`,`font-family: ${e.fontFamily}`,`font-weight: ${e.fontWeight}`,`font-style: ${e.fontStyle}`,`font-variant: ${e.fontVariant}`,`letter-spacing: ${e.letterSpacing}px`,`text-align: ${e.align}`,`padding: ${e.padding}px`,`white-space: ${"pre"===e.whiteSpace&&e.wordWrap?"pre-wrap":e.whiteSpace}`,...e.lineHeight?[`line-height: ${e.lineHeight}px`]:[],...e.wordWrap?["word-wrap: "+(e.breakWords?"break-all":"break-word"),`max-width: ${e.wordWrapWidth}px`]:[],...t?[T(t)]:[],...e.dropShadow?[S(e.dropShadow)]:[],...e.cssOverrides].join(";")} }`];return function(e,t){for(const s in e){const n=e[s],i=[];for(const e in n)v[e]?i.push(v[e](n[e])):A[e]&&i.push(A[e].replace("{{VALUE}}",n[e]));t.push(`${s} { ${i.join(";")} }`)}}(e.tagStyles,n),n.join(" ")}function S(e){const t=w.Q.shared.setValue(e.color).setAlpha(e.alpha).toHexa(),s=`${Math.round(Math.cos(e.angle)*e.distance)}px ${Math.round(Math.sin(e.angle)*e.distance)}px`;return e.blur>0?`text-shadow: ${s} ${e.blur}px ${t}`:`text-shadow: ${s} ${t}`}function T(e){return[`-webkit-text-stroke-width: ${e.width}px`,`-webkit-text-stroke-color: ${w.Q.shared.setValue(e.color).toHex()}`,`text-stroke-width: ${e.width}px`,`text-stroke-color: ${w.Q.shared.setValue(e.color).toHex()}`,"paint-order: stroke"].join(";")}const A={fontSize:"font-size: {{VALUE}}px",fontFamily:"font-family: {{VALUE}}",fontWeight:"font-weight: {{VALUE}}",fontStyle:"font-style: {{VALUE}}",fontVariant:"font-variant: {{VALUE}}",letterSpacing:"letter-spacing: {{VALUE}}px",align:"text-align: {{VALUE}}",padding:"padding: {{VALUE}}px",whiteSpace:"white-space: {{VALUE}}",lineHeight:"line-height: {{VALUE}}px",wordWrapWidth:"max-width: {{VALUE}}px"},v={fill:e=>`color: ${w.Q.shared.setValue(e).toHex()}`,breakWords:e=>"word-wrap: "+(e?"break-all":"break-word"),stroke:T,dropShadow:S};class F extends y.x{constructor(e={}){super(e),this._cssOverrides=[],this.cssOverrides??(this.cssOverrides=e.cssOverrides),this.tagStyles=e.tagStyles??{}}set cssOverrides(e){this._cssOverrides=e instanceof Array?e:[e],this.update()}get cssOverrides(){return this._cssOverrides}_generateKey(){return this._styleKey=(0,_.V)(this)+this._cssOverrides.join("-"),this._styleKey}update(){this._cssStyle=null,super.update()}clone(){return new F({align:this.align,breakWords:this.breakWords,dropShadow:this.dropShadow?{...this.dropShadow}:null,fill:this._fill,fontFamily:this.fontFamily,fontSize:this.fontSize,fontStyle:this.fontStyle,fontVariant:this.fontVariant,fontWeight:this.fontWeight,letterSpacing:this.letterSpacing,lineHeight:this.lineHeight,padding:this.padding,stroke:this._stroke,whiteSpace:this.whiteSpace,wordWrap:this.wordWrap,wordWrapWidth:this.wordWrapWidth,cssOverrides:this.cssOverrides})}get cssStyle(){return this._cssStyle||(this._cssStyle=b(this)),this._cssStyle}addOverride(...e){const t=e.filter((e=>!this.cssOverrides.includes(e)));t.length>0&&(this.cssOverrides.push(...t),this.update())}removeOverride(...e){const t=e.filter((e=>this.cssOverrides.includes(e)));t.length>0&&(this.cssOverrides=this.cssOverrides.filter((e=>!t.includes(e))),this.update())}set fill(e){"string"!=typeof e&&"number"!=typeof e&&(0,p.R)("[HTMLTextStyle] only color fill is not supported by HTMLText"),super.fill=e}set stroke(e){e&&"string"!=typeof e&&"number"!=typeof e&&(0,p.R)("[HTMLTextStyle] only color stroke is not supported by HTMLText"),super.stroke=e}}var C=s(6354),M=s(4184);async function k(e,t){const s=await async function(e){const t=await M.e.get().fetch(e),s=await t.blob(),n=new FileReader;return await new Promise(((e,t)=>{n.onloadend=()=>e(n.result),n.onerror=t,n.readAsDataURL(s)}))}(t);return`@font-face {\n        font-family: "${e.fontFamily}";\n        src: url('${s}');\n        font-weight: ${e.fontWeight};\n        font-style: ${e.fontStyle};\n    }`}const B=new Map;let O;class I{constructor(e){this._activeTextures={},this._renderer=e,this._createCanvas=e.type===c.W.WEBGPU}getTexture(e){return this._buildTexturePromise(e.text,e.resolution,e.style)}getManagedTexture(e,t,s,n){if(this._activeTextures[n])return this._increaseReferenceCount(n),this._activeTextures[n].promise;const i=this._buildTexturePromise(e,t,s).then((e=>(this._activeTextures[n].texture=e,e)));return this._activeTextures[n]={texture:null,promise:i,usageCount:1},i}async _buildTexturePromise(e,t,s){const n=a.Z.get(m),i=function(e,t){const s=t.fontFamily,n=[],i={},r=e.match(/font-family:([^;"\s]+)/g);function a(e){i[e]||(n.push(e),i[e]=!0)}if(Array.isArray(s))for(let e=0;e<s.length;e++)a(s[e]);else a(s);r&&r.forEach((e=>{a(e.split(":")[1].trim())}));for(const e in t.tagStyles)a(t.tagStyles[e].fontFamily);return n}(e,s),r=await async function(e,t,s){const n=e.filter((e=>C.l.has(`${e}-and-url`))).map(((e,n)=>{if(!B.has(e)){const{url:i}=C.l.get(`${e}-and-url`);0===n?B.set(e,k({fontWeight:t.fontWeight,fontStyle:t.fontStyle,fontFamily:e},i)):B.set(e,k({fontWeight:s.fontWeight,fontStyle:s.fontStyle,fontFamily:e},i))}return B.get(e)}));return(await Promise.all(n)).join("\n")}(i,s,F.defaultTextStyle),o=function(e,t,s,n){n||(n=O||(O=new m));const{domElement:i,styleElement:r,svgRoot:a}=n;i.innerHTML=`<style>${t.cssStyle};</style><div style='padding:0'>${e}</div>`,i.setAttribute("style","transform-origin: top left; display: inline-block"),s&&(r.textContent=s),document.body.appendChild(a);const o=i.getBoundingClientRect();a.remove();const l=2*t.padding;return{width:o.width-l,height:o.height-l}}(e,s,r,n),l=Math.ceil(Math.ceil(Math.max(1,o.width)+2*s.padding)*t),d=Math.ceil(Math.ceil(Math.max(1,o.height)+2*s.padding)*t),c=n.image;c.width=2+(0|l),c.height=2+(0|d);const p=function(e,t,s,n,i){const{domElement:r,styleElement:a,svgRoot:o}=i;r.innerHTML=`<style>${t.cssStyle}</style><div style='padding:0;'>${e}</div>`,r.setAttribute("style",`transform: scale(${s});transform-origin: top left; display: inline-block`),a.textContent=n;const{width:l,height:h}=i.image;return o.setAttribute("width",l.toString()),o.setAttribute("height",h.toString()),(new XMLSerializer).serializeToString(o)}(e,s,t,r,n);await function(e,t,s){return new Promise((async n=>{s&&await new Promise((e=>setTimeout(e,100))),e.onload=()=>{n()},e.src=`data:image/svg+xml;charset=utf8,${encodeURIComponent(t)}`,e.crossOrigin="anonymous"}))}(c,p,(0,u.n)()&&i.length>0);const f=c;let x;this._createCanvas&&(x=function(e,t){const s=h.N.getOptimalCanvasAndContext(e.width,e.height,t),{context:n}=s;return n.clearRect(0,0,e.width,e.height),n.drawImage(e,0,0),s}(c,t));const y=(0,g.M)(x?x.canvas:f,c.width-2,c.height-2,t);return this._createCanvas&&(this._renderer.texture.initSource(y.source),h.N.returnCanvasAndContext(x)),a.Z.return(n),y}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];t&&(t.usageCount--,0===t.usageCount&&(t.texture?this._cleanUp(t):t.promise.then((e=>{t.texture=e,this._cleanUp(t)})).catch((()=>{(0,p.R)("HTMLTextSystem: Failed to clean texture")})),this._activeTextures[e]=null))}_cleanUp(e){d.W.returnTexture(e.texture),e.texture.source.resource=null,e.texture.source.uploadMethodId="unknown"}getReferenceCount(e){return this._activeTextures[e].usageCount}destroy(){this._activeTextures=null}}I.extension={type:[n.Ag.WebGLSystem,n.Ag.WebGPUSystem,n.Ag.CanvasSystem],name:"htmlText"},I.defaultFontOptions={fontFamily:"Arial",fontStyle:"normal",fontWeight:"normal"},n.XO.add(I),n.XO.add(l)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,