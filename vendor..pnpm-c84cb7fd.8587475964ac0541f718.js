/*! For license information please see vendor..pnpm-c84cb7fd.8587475964ac0541f718.js.LICENSE.txt */
"use strict";(self.webpackChunkpixijs_game=self.webpackChunkpixijs_game||[]).push([[346],{1944:(t,e,r)=>{function i(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function n(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}r.d(e,{Ay:()=>Hi});var s,a,o,u,h,f,l,c,p,_,d,m,g,v,y,T,x,w={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},b={duration:.5,overwrite:!1,delay:0},O=1e8,M=1e-8,k=2*Math.PI,A=k/4,C=0,D=Math.sqrt,E=Math.cos,S=Math.sin,P=function(t){return"string"==typeof t},z=function(t){return"function"==typeof t},R=function(t){return"number"==typeof t},F=function(t){return void 0===t},B=function(t){return"object"==typeof t},L=function(t){return!1!==t},I=function(){return"undefined"!=typeof window},Y=function(t){return z(t)||P(t)},N="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},U=Array.isArray,X=/(?:-?\.?\d|\.)+/gi,q=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,V=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,j=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,G=/[+-]=-?[.\d]+/,W=/[^,'"\[\]\s]+/gi,Q=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,H={},Z={},$=function(t){return(Z=kt(t,H))&&Ar},J=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},K=function(t,e){return!e&&console.warn(t)},tt=function(t,e){return t&&(H[t]=e)&&Z&&(Z[t]=e)||H},et=function(){return 0},rt={suppressEvents:!0,isStart:!0,kill:!1},it={suppressEvents:!0,kill:!1},nt={suppressEvents:!0},st={},at=[],ot={},ut={},ht={},ft=30,lt=[],ct="",pt=function(t){var e,r,i=t[0];if(B(i)||z(i)||(t=[t]),!(e=(i._gsap||{}).harness)){for(r=lt.length;r--&&!lt[r].targetTest(i););e=lt[r]}for(r=t.length;r--;)t[r]&&(t[r]._gsap||(t[r]._gsap=new Ue(t[r],e)))||t.splice(r,1);return t},_t=function(t){return t._gsap||pt(ne(t))[0]._gsap},dt=function(t,e,r){return(r=t[e])&&z(r)?t[e]():F(r)&&t.getAttribute&&t.getAttribute(e)||r},mt=function(t,e){return(t=t.split(",")).forEach(e)||t},gt=function(t){return Math.round(1e5*t)/1e5||0},vt=function(t){return Math.round(1e7*t)/1e7||0},yt=function(t,e){var r=e.charAt(0),i=parseFloat(e.substr(2));return t=parseFloat(t),"+"===r?t+i:"-"===r?t-i:"*"===r?t*i:t/i},Tt=function(t,e){for(var r=e.length,i=0;t.indexOf(e[i])<0&&++i<r;);return i<r},xt=function(){var t,e,r=at.length,i=at.slice(0);for(ot={},at.length=0,t=0;t<r;t++)(e=i[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},wt=function(t,e,r,i){at.length&&!a&&xt(),t.render(e,r,i||a&&e<0&&(t._initted||t._startAt)),at.length&&!a&&xt()},bt=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(W).length<2?e:P(t)?t.trim():t},Ot=function(t){return t},Mt=function(t,e){for(var r in e)r in t||(t[r]=e[r]);return t},kt=function(t,e){for(var r in e)t[r]=e[r];return t},At=function t(e,r){for(var i in r)"__proto__"!==i&&"constructor"!==i&&"prototype"!==i&&(e[i]=B(r[i])?t(e[i]||(e[i]={}),r[i]):r[i]);return e},Ct=function(t,e){var r,i={};for(r in t)r in e||(i[r]=t[r]);return i},Dt=function(t){var e,r=t.parent||u,i=t.keyframes?(e=U(t.keyframes),function(t,r){for(var i in r)i in t||"duration"===i&&e||"ease"===i||(t[i]=r[i])}):Mt;if(L(t.inherit))for(;r;)i(t,r.vars.defaults),r=r.parent||r._dp;return t},Et=function(t,e,r,i,n){void 0===r&&(r="_first"),void 0===i&&(i="_last");var s,a=t[i];if(n)for(s=e[n];a&&a[n]>s;)a=a._prev;return a?(e._next=a._next,a._next=e):(e._next=t[r],t[r]=e),e._next?e._next._prev=e:t[i]=e,e._prev=a,e.parent=e._dp=t,e},St=function(t,e,r,i){void 0===r&&(r="_first"),void 0===i&&(i="_last");var n=e._prev,s=e._next;n?n._next=s:t[r]===e&&(t[r]=s),s?s._prev=n:t[i]===e&&(t[i]=n),e._next=e._prev=e.parent=null},Pt=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove&&t.parent.remove(t),t._act=0},zt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var r=t;r;)r._dirty=1,r=r.parent;return t},Rt=function(t,e,r,i){return t._startAt&&(a?t._startAt.revert(it):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,i))},Ft=function t(e){return!e||e._ts&&t(e.parent)},Bt=function(t){return t._repeat?Lt(t._tTime,t=t.duration()+t._rDelay)*t:0},Lt=function(t,e){var r=Math.floor(t/=e);return t&&r===t?r-1:r},It=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},Yt=function(t){return t._end=vt(t._start+(t._tDur/Math.abs(t._ts||t._rts||M)||0))},Nt=function(t,e){var r=t._dp;return r&&r.smoothChildTiming&&t._ts&&(t._start=vt(r._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),Yt(t),r._dirty||zt(r,t)),t},Ut=function(t,e){var r;if((e._time||!e._dur&&e._initted||e._start<t._time&&(e._dur||!e.add))&&(r=It(t.rawTime(),e),(!e._dur||Kt(0,e.totalDuration(),r)-e._tTime>M)&&e.render(r,!0)),zt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(r=t;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;t._zTime=-1e-8}},Xt=function(t,e,r,i){return e.parent&&Pt(e),e._start=vt((R(r)?r:r||t!==u?Zt(t,r,e):t._time)+e._delay),e._end=vt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),Et(t,e,"_first","_last",t._sort?"_start":0),Gt(e)||(t._recent=e),i||Ut(t,e),t._ts<0&&Nt(t,t._tTime),t},qt=function(t,e){return(H.ScrollTrigger||J("scrollTrigger",e))&&H.ScrollTrigger.create(e,t)},Vt=function(t,e,r,i,n){return He(t,e,n),t._initted?!r&&t._pt&&!a&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&p!==Ce.frame?(at.push(t),t._lazy=[n,i],1):void 0:1},jt=function t(e){var r=e.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||t(r))},Gt=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Wt=function(t,e,r,i){var n=t._repeat,s=vt(e)||0,a=t._tTime/t._tDur;return a&&!i&&(t._time*=s/t._dur),t._dur=s,t._tDur=n?n<0?1e10:vt(s*(n+1)+t._rDelay*n):s,a>0&&!i&&Nt(t,t._tTime=t._tDur*a),t.parent&&Yt(t),r||zt(t.parent,t),t},Qt=function(t){return t instanceof qe?zt(t):Wt(t,t._dur)},Ht={_start:0,endTime:et,totalDuration:et},Zt=function t(e,r,i){var n,s,a,o=e.labels,u=e._recent||Ht,h=e.duration()>=O?u.endTime(!1):e._dur;return P(r)&&(isNaN(r)||r in o)?(s=r.charAt(0),a="%"===r.substr(-1),n=r.indexOf("="),"<"===s||">"===s?(n>=0&&(r=r.replace(/=/,"")),("<"===s?u._start:u.endTime(u._repeat>=0))+(parseFloat(r.substr(1))||0)*(a?(n<0?u:i).totalDuration()/100:1)):n<0?(r in o||(o[r]=h),o[r]):(s=parseFloat(r.charAt(n-1)+r.substr(n+1)),a&&i&&(s=s/100*(U(i)?i[0]:i).totalDuration()),n>1?t(e,r.substr(0,n-1),i)+s:h+s)):null==r?h:+r},$t=function(t,e,r){var i,n,s=R(e[1]),a=(s?2:1)+(t<2?0:1),o=e[a];if(s&&(o.duration=e[1]),o.parent=r,t){for(i=o,n=r;n&&!("immediateRender"in i);)i=n.vars.defaults||{},n=L(n.vars.inherit)&&n.parent;o.immediateRender=L(i.immediateRender),t<2?o.runBackwards=1:o.startAt=e[a-1]}return new tr(e[0],o,e[a+1])},Jt=function(t,e){return t||0===t?e(t):e},Kt=function(t,e,r){return r<t?t:r>e?e:r},te=function(t,e){return P(t)&&(e=Q.exec(t))?e[1]:""},ee=[].slice,re=function(t,e){return t&&B(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&B(t[0]))&&!t.nodeType&&t!==h},ie=function(t,e,r){return void 0===r&&(r=[]),t.forEach((function(t){var i;return P(t)&&!e||re(t,1)?(i=r).push.apply(i,ne(t)):r.push(t)}))||r},ne=function(t,e,r){return o&&!e&&o.selector?o.selector(t):!P(t)||r||!f&&De()?U(t)?ie(t,r):re(t)?ee.call(t,0):t?[t]:[]:ee.call((e||l).querySelectorAll(t),0)},se=function(t){return t=ne(t)[0]||K("Invalid scope")||{},function(e){var r=t.current||t.nativeElement||t;return ne(e,r.querySelectorAll?r:r===t?K("Invalid scope")||l.createElement("div"):t)}},ae=function(t){return t.sort((function(){return.5-Math.random()}))},oe=function(t){if(z(t))return t;var e=B(t)?t:{each:t},r=Be(e.ease),i=e.from||0,n=parseFloat(e.base)||0,s={},a=i>0&&i<1,o=isNaN(i)||a,u=e.axis,h=i,f=i;return P(i)?h=f={center:.5,edges:.5,end:1}[i]||0:!a&&o&&(h=i[0],f=i[1]),function(t,a,l){var c,p,_,d,m,g,v,y,T,x=(l||e).length,w=s[x];if(!w){if(!(T="auto"===e.grid?0:(e.grid||[1,O])[1])){for(v=-O;v<(v=l[T++].getBoundingClientRect().left)&&T<x;);T<x&&T--}for(w=s[x]=[],c=o?Math.min(T,x)*h-.5:i%T,p=T===O?0:o?x*f/T-.5:i/T|0,v=0,y=O,g=0;g<x;g++)_=g%T-c,d=p-(g/T|0),w[g]=m=u?Math.abs("y"===u?d:_):D(_*_+d*d),m>v&&(v=m),m<y&&(y=m);"random"===i&&ae(w),w.max=v-y,w.min=y,w.v=x=(parseFloat(e.amount)||parseFloat(e.each)*(T>x?x-1:u?"y"===u?x/T:T:Math.max(T,x/T))||0)*("edges"===i?-1:1),w.b=x<0?n-x:n,w.u=te(e.amount||e.each)||0,r=r&&x<0?Re(r):r}return x=(w[t]-w.min)/w.max||0,vt(w.b+(r?r(x):x)*w.v)+w.u}},ue=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(r){var i=vt(Math.round(parseFloat(r)/t)*t*e);return(i-i%1)/e+(R(r)?0:te(r))}},he=function(t,e){var r,i,n=U(t);return!n&&B(t)&&(r=n=t.radius||O,t.values?(t=ne(t.values),(i=!R(t[0]))&&(r*=r)):t=ue(t.increment)),Jt(e,n?z(t)?function(e){return i=t(e),Math.abs(i-e)<=r?i:e}:function(e){for(var n,s,a=parseFloat(i?e.x:e),o=parseFloat(i?e.y:0),u=O,h=0,f=t.length;f--;)(n=i?(n=t[f].x-a)*n+(s=t[f].y-o)*s:Math.abs(t[f]-a))<u&&(u=n,h=f);return h=!r||u<=r?t[h]:e,i||h===e||R(e)?h:h+te(e)}:ue(t))},fe=function(t,e,r,i){return Jt(U(t)?!e:!0===r?!!(r=0):!i,(function(){return U(t)?t[~~(Math.random()*t.length)]:(r=r||1e-5)&&(i=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((t-r/2+Math.random()*(e-t+.99*r))/r)*r*i)/i}))},le=function(t,e,r){return Jt(r,(function(r){return t[~~e(r)]}))},ce=function(t){for(var e,r,i,n,s=0,a="";~(e=t.indexOf("random(",s));)i=t.indexOf(")",e),n="["===t.charAt(e+7),r=t.substr(e+7,i-e-7).match(n?W:X),a+=t.substr(s,e-s)+fe(n?r:+r[0],n?0:+r[1],+r[2]||1e-5),s=i+1;return a+t.substr(s,t.length-s)},pe=function(t,e,r,i,n){var s=e-t,a=i-r;return Jt(n,(function(e){return r+((e-t)/s*a||0)}))},_e=function(t,e,r){var i,n,s,a=t.labels,o=O;for(i in a)(n=a[i]-e)<0==!!r&&n&&o>(n=Math.abs(n))&&(s=i,o=n);return s},de=function(t,e,r){var i,n,s,a=t.vars,u=a[e],h=o,f=t._ctx;if(u)return i=a[e+"Params"],n=a.callbackScope||t,r&&at.length&&xt(),f&&(o=f),s=i?u.apply(n,i):u.call(n),o=h,s},me=function(t){return Pt(t),t.scrollTrigger&&t.scrollTrigger.kill(!!a),t.progress()<1&&de(t,"onInterrupt"),t},ge=[],ve=function(t){if(t)if(t=!t.name&&t.default||t,I()||t.headless){var e=t.name,r=z(t),i=e&&!r&&t.init?function(){this._props=[]}:t,n={init:et,render:hr,add:We,kill:lr,modifier:fr,rawVars:0},s={targetTest:0,get:0,getSetter:sr,aliases:{},register:0};if(De(),t!==i){if(ut[e])return;Mt(i,Mt(Ct(t,n),s)),kt(i.prototype,kt(n,Ct(t,s))),ut[i.prop=e]=i,t.targetTest&&(lt.push(i),st[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}tt(e,i),t.register&&t.register(Ar,i,_r)}else ge.push(t)},ye=255,Te={aqua:[0,ye,ye],lime:[0,ye,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,ye],navy:[0,0,128],white:[ye,ye,ye],olive:[128,128,0],yellow:[ye,ye,0],orange:[ye,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[ye,0,0],pink:[ye,192,203],cyan:[0,ye,ye],transparent:[ye,ye,ye,0]},xe=function(t,e,r){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(r-e)*t*6:t<.5?r:3*t<2?e+(r-e)*(2/3-t)*6:e)*ye+.5|0},we=function(t,e,r){var i,n,s,a,o,u,h,f,l,c,p=t?R(t)?[t>>16,t>>8&ye,t&ye]:0:Te.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),Te[t])p=Te[t];else if("#"===t.charAt(0)){if(t.length<6&&(i=t.charAt(1),n=t.charAt(2),s=t.charAt(3),t="#"+i+i+n+n+s+s+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&ye,p&ye,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&ye,t&ye]}else if("hsl"===t.substr(0,3))if(p=c=t.match(X),e){if(~t.indexOf("="))return p=t.match(q),r&&p.length<4&&(p[3]=1),p}else a=+p[0]%360/360,o=+p[1]/100,i=2*(u=+p[2]/100)-(n=u<=.5?u*(o+1):u+o-u*o),p.length>3&&(p[3]*=1),p[0]=xe(a+1/3,i,n),p[1]=xe(a,i,n),p[2]=xe(a-1/3,i,n);else p=t.match(X)||Te.transparent;p=p.map(Number)}return e&&!c&&(i=p[0]/ye,n=p[1]/ye,s=p[2]/ye,u=((h=Math.max(i,n,s))+(f=Math.min(i,n,s)))/2,h===f?a=o=0:(l=h-f,o=u>.5?l/(2-h-f):l/(h+f),a=h===i?(n-s)/l+(n<s?6:0):h===n?(s-i)/l+2:(i-n)/l+4,a*=60),p[0]=~~(a+.5),p[1]=~~(100*o+.5),p[2]=~~(100*u+.5)),r&&p.length<4&&(p[3]=1),p},be=function(t){var e=[],r=[],i=-1;return t.split(Me).forEach((function(t){var n=t.match(V)||[];e.push.apply(e,n),r.push(i+=n.length+1)})),e.c=r,e},Oe=function(t,e,r){var i,n,s,a,o="",u=(t+o).match(Me),h=e?"hsla(":"rgba(",f=0;if(!u)return t;if(u=u.map((function(t){return(t=we(t,e,1))&&h+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),r&&(s=be(t),(i=r.c).join(o)!==s.c.join(o)))for(a=(n=t.replace(Me,"1").split(V)).length-1;f<a;f++)o+=n[f]+(~i.indexOf(f)?u.shift()||h+"0,0,0,0)":(s.length?s:u.length?u:r).shift());if(!n)for(a=(n=t.split(Me)).length-1;f<a;f++)o+=n[f]+u[f];return o+n[a]},Me=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in Te)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),ke=/hsl[a]?\(/,Ae=function(t){var e,r=t.join(" ");if(Me.lastIndex=0,Me.test(r))return e=ke.test(r),t[1]=Oe(t[1],e),t[0]=Oe(t[0],e,be(t[1])),!0},Ce=function(){var t,e,r,i,n,s,a=Date.now,o=500,u=33,p=a(),_=p,m=1e3/240,g=m,v=[],y=function r(h){var f,l,c,d,y=a()-_,T=!0===h;if((y>o||y<0)&&(p+=y-u),((f=(c=(_+=y)-p)-g)>0||T)&&(d=++i.frame,n=c-1e3*i.time,i.time=c/=1e3,g+=f+(f>=m?4:m-f),l=1),T||(t=e(r)),l)for(s=0;s<v.length;s++)v[s](c,n,d,h)};return i={time:0,frame:0,tick:function(){y(!0)},deltaRatio:function(t){return n/(1e3/(t||60))},wake:function(){c&&(!f&&I()&&(h=f=window,l=h.document||{},H.gsap=Ar,(h.gsapVersions||(h.gsapVersions=[])).push(Ar.version),$(Z||h.GreenSockGlobals||!h.gsap&&h||{}),ge.forEach(ve)),r="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,t&&i.sleep(),e=r||function(t){return setTimeout(t,g-1e3*i.time+1|0)},d=1,y(2))},sleep:function(){(r?cancelAnimationFrame:clearTimeout)(t),d=0,e=et},lagSmoothing:function(t,e){o=t||1/0,u=Math.min(e||33,o)},fps:function(t){m=1e3/(t||240),g=1e3*i.time+m},add:function(t,e,r){var n=e?function(e,r,s,a){t(e,r,s,a),i.remove(n)}:t;return i.remove(t),v[r?"unshift":"push"](n),De(),n},remove:function(t,e){~(e=v.indexOf(t))&&v.splice(e,1)&&s>=e&&s--},_listeners:v}}(),De=function(){return!d&&Ce.wake()},Ee={},Se=/^[\d.\-M][\d.\-,\s]/,Pe=/["']/g,ze=function(t){for(var e,r,i,n={},s=t.substr(1,t.length-3).split(":"),a=s[0],o=1,u=s.length;o<u;o++)r=s[o],e=o!==u-1?r.lastIndexOf(","):r.length,i=r.substr(0,e),n[a]=isNaN(i)?i.replace(Pe,"").trim():+i,a=r.substr(e+1).trim();return n},Re=function(t){return function(e){return 1-t(1-e)}},Fe=function t(e,r){for(var i,n=e._first;n;)n instanceof qe?t(n,r):!n.vars.yoyoEase||n._yoyo&&n._repeat||n._yoyo===r||(n.timeline?t(n.timeline,r):(i=n._ease,n._ease=n._yEase,n._yEase=i,n._yoyo=r)),n=n._next},Be=function(t,e){return t&&(z(t)?t:Ee[t]||function(t){var e,r,i,n,s=(t+"").split("("),a=Ee[s[0]];return a&&s.length>1&&a.config?a.config.apply(null,~t.indexOf("{")?[ze(s[1])]:(e=t,r=e.indexOf("(")+1,i=e.indexOf(")"),n=e.indexOf("(",r),e.substring(r,~n&&n<i?e.indexOf(")",i+1):i)).split(",").map(bt)):Ee._CE&&Se.test(t)?Ee._CE("",t):a}(t))||e},Le=function(t,e,r,i){void 0===r&&(r=function(t){return 1-e(1-t)}),void 0===i&&(i=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var n,s={easeIn:e,easeOut:r,easeInOut:i};return mt(t,(function(t){for(var e in Ee[t]=H[t]=s,Ee[n=t.toLowerCase()]=r,s)Ee[n+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Ee[t+"."+e]=s[e]})),s},Ie=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},Ye=function t(e,r,i){var n=r>=1?r:1,s=(i||(e?.3:.45))/(r<1?r:1),a=s/k*(Math.asin(1/n)||0),o=function(t){return 1===t?1:n*Math.pow(2,-10*t)*S((t-a)*s)+1},u="out"===e?o:"in"===e?function(t){return 1-o(1-t)}:Ie(o);return s=k/s,u.config=function(r,i){return t(e,r,i)},u},Ne=function t(e,r){void 0===r&&(r=1.70158);var i=function(t){return t?--t*t*((r+1)*t+r)+1:0},n="out"===e?i:"in"===e?function(t){return 1-i(1-t)}:Ie(i);return n.config=function(r){return t(e,r)},n};mt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var r=e<5?e+1:e;Le(t+",Power"+(r-1),e?function(t){return Math.pow(t,r)}:function(t){return t},(function(t){return 1-Math.pow(1-t,r)}),(function(t){return t<.5?Math.pow(2*t,r)/2:1-Math.pow(2*(1-t),r)/2}))})),Ee.Linear.easeNone=Ee.none=Ee.Linear.easeIn,Le("Elastic",Ye("in"),Ye("out"),Ye()),m=7.5625,y=2*(v=1/(g=2.75)),T=2.5*v,Le("Bounce",(function(t){return 1-x(1-t)}),x=function(t){return t<v?m*t*t:t<y?m*Math.pow(t-1.5/g,2)+.75:t<T?m*(t-=2.25/g)*t+.9375:m*Math.pow(t-2.625/g,2)+.984375}),Le("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),Le("Circ",(function(t){return-(D(1-t*t)-1)})),Le("Sine",(function(t){return 1===t?1:1-E(t*A)})),Le("Back",Ne("in"),Ne("out"),Ne()),Ee.SteppedEase=Ee.steps=H.SteppedEase={config:function(t,e){void 0===t&&(t=1);var r=1/t,i=t+(e?0:1),n=e?1:0;return function(t){return((i*Kt(0,.99999999,t)|0)+n)*r}}},b.ease=Ee["quad.out"],mt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return ct+=t+","+t+"Params,"}));var Ue=function(t,e){this.id=C++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:dt,this.set=e?e.getSetter:sr},Xe=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Wt(this,+t.duration,1,1),this.data=t.data,o&&(this._ctx=o,o.data.push(this)),d||Ce.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Wt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(De(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Nt(this,t),!r._dp||r.parent||Ut(r,this);r&&r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Xt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===M||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),wt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Bt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>0?1:0},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Bt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},e.iteration=function(t,e){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*r,e):this._repeat?Lt(this._tTime,r)+1:1},e.timeScale=function(t,e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var r=this.parent&&this._ts?It(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Kt(-Math.abs(this._delay),this._tDur,r),!1!==e),Yt(this),function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t}(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(De(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==M&&(this._tTime-=M)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Xt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(L(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?It(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=nt);var e=a;return a=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),a=e,this},e.globalTime=function(t){for(var e=this,r=arguments.length?t:e.rawTime();e;)r=e._start+r/(Math.abs(e._ts)||1),e=e._dp;return!this.parent&&this._sat?this._sat.globalTime(t):r},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,Qt(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,Qt(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(Zt(this,t),L(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,L(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,r=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=r&&t<this.endTime(!0)-M))},e.eventCallback=function(t,e,r){var i=this.vars;return arguments.length>1?(e?(i[t]=e,r&&(i[t+"Params"]=r),"onUpdate"===t&&(this._onUpdate=e)):delete i[t],this):i[t]},e.then=function(t){var e=this;return new Promise((function(r){var i=z(t)?t:Ot,n=function(){var t=e.then;e.then=null,z(i)&&(i=i(e))&&(i.then||i===e)&&(e.then=t),r(i),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?n():e._prom=n}))},e.kill=function(){me(this)},t}();Mt(Xe.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var qe=function(t){function e(e,r){var n;return void 0===e&&(e={}),(n=t.call(this,e)||this).labels={},n.smoothChildTiming=!!e.smoothChildTiming,n.autoRemoveChildren=!!e.autoRemoveChildren,n._sort=L(e.sortChildren),u&&Xt(e.parent||u,i(n),r),e.reversed&&n.reverse(),e.paused&&n.paused(!0),e.scrollTrigger&&qt(i(n),e.scrollTrigger),n}n(e,t);var r=e.prototype;return r.to=function(t,e,r){return $t(0,arguments,this),this},r.from=function(t,e,r){return $t(1,arguments,this),this},r.fromTo=function(t,e,r,i){return $t(2,arguments,this),this},r.set=function(t,e,r){return e.duration=0,e.parent=this,Dt(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new tr(t,e,Zt(this,r),1),this},r.call=function(t,e,r){return Xt(this,tr.delayedCall(0,t,e),r)},r.staggerTo=function(t,e,r,i,n,s,a){return r.duration=e,r.stagger=r.stagger||i,r.onComplete=s,r.onCompleteParams=a,r.parent=this,new tr(t,r,Zt(this,n)),this},r.staggerFrom=function(t,e,r,i,n,s,a){return r.runBackwards=1,Dt(r).immediateRender=L(r.immediateRender),this.staggerTo(t,e,r,i,n,s,a)},r.staggerFromTo=function(t,e,r,i,n,s,a,o){return i.startAt=r,Dt(i).immediateRender=L(i.immediateRender),this.staggerTo(t,e,i,n,s,a,o)},r.render=function(t,e,r){var i,n,s,o,h,f,l,c,p,_,d,m,g=this._time,v=this._dirty?this.totalDuration():this._tDur,y=this._dur,T=t<=0?0:vt(t),x=this._zTime<0!=t<0&&(this._initted||!y);if(this!==u&&T>v&&t>=0&&(T=v),T!==this._tTime||r||x){if(g!==this._time&&y&&(T+=this._time-g,t+=this._time-g),i=T,p=this._start,f=!(c=this._ts),x&&(y||(g=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(d=this._yoyo,h=y+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*h+t,e,r);if(i=vt(T%h),T===v?(o=this._repeat,i=y):((o=~~(T/h))&&o===T/h&&(i=y,o--),i>y&&(i=y)),_=Lt(this._tTime,h),!g&&this._tTime&&_!==o&&this._tTime-_*h-this._dur<=0&&(_=o),d&&1&o&&(i=y-i,m=1),o!==_&&!this._lock){var w=d&&1&_,b=w===(d&&1&o);if(o<_&&(w=!w),g=w?0:T%y?y:T,this._lock=1,this.render(g||(m?0:vt(o*h)),e,!y)._lock=0,this._tTime=T,!e&&this.parent&&de(this,"onRepeat"),this.vars.repeatRefresh&&!m&&(this.invalidate()._lock=1),g&&g!==this._time||f!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(y=this._dur,v=this._tDur,b&&(this._lock=2,g=w?y:-1e-4,this.render(g,!0),this.vars.repeatRefresh&&!m&&this.invalidate()),this._lock=0,!this._ts&&!f)return this;Fe(this,m)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(l=function(t,e,r){var i;if(r>e)for(i=t._first;i&&i._start<=r;){if("isPause"===i.data&&i._start>e)return i;i=i._next}else for(i=t._last;i&&i._start>=r;){if("isPause"===i.data&&i._start<e)return i;i=i._prev}}(this,vt(g),vt(i)),l&&(T-=i-(i=l._start))),this._tTime=T,this._time=i,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,g=0),!g&&i&&!e&&!o&&(de(this,"onStart"),this._tTime!==T))return this;if(i>=g&&t>=0)for(n=this._first;n;){if(s=n._next,(n._act||i>=n._start)&&n._ts&&l!==n){if(n.parent!==this)return this.render(t,e,r);if(n.render(n._ts>0?(i-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(i-n._start)*n._ts,e,r),i!==this._time||!this._ts&&!f){l=0,s&&(T+=this._zTime=-1e-8);break}}n=s}else{n=this._last;for(var O=t<0?t:i;n;){if(s=n._prev,(n._act||O<=n._end)&&n._ts&&l!==n){if(n.parent!==this)return this.render(t,e,r);if(n.render(n._ts>0?(O-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(O-n._start)*n._ts,e,r||a&&(n._initted||n._startAt)),i!==this._time||!this._ts&&!f){l=0,s&&(T+=this._zTime=O?-1e-8:M);break}}n=s}}if(l&&!e&&(this.pause(),l.render(i>=g?0:-1e-8)._zTime=i>=g?1:-1,this._ts))return this._start=p,Yt(this),this.render(t,e,r);this._onUpdate&&!e&&de(this,"onUpdate",!0),(T===v&&this._tTime>=this.totalDuration()||!T&&g)&&(p!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((t||!y)&&(T===v&&this._ts>0||!T&&this._ts<0)&&Pt(this,1),e||t<0&&!g||!T&&!g&&v||(de(this,T===v&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(T<v&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(t,e){var r=this;if(R(e)||(e=Zt(this,e,t)),!(t instanceof Xe)){if(U(t))return t.forEach((function(t){return r.add(t,e)})),this;if(P(t))return this.addLabel(t,e);if(!z(t))return this;t=tr.delayedCall(0,t)}return this!==t?Xt(this,t,e):this},r.getChildren=function(t,e,r,i){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),void 0===i&&(i=-O);for(var n=[],s=this._first;s;)s._start>=i&&(s instanceof tr?e&&n.push(s):(r&&n.push(s),t&&n.push.apply(n,s.getChildren(!0,e,r)))),s=s._next;return n},r.getById=function(t){for(var e=this.getChildren(1,1,1),r=e.length;r--;)if(e[r].vars.id===t)return e[r]},r.remove=function(t){return P(t)?this.removeLabel(t):z(t)?this.killTweensOf(t):(St(this,t),t===this._recent&&(this._recent=this._last),zt(this))},r.totalTime=function(e,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=vt(Ce.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,r),this._forcing=0,this):this._tTime},r.addLabel=function(t,e){return this.labels[t]=Zt(this,e),this},r.removeLabel=function(t){return delete this.labels[t],this},r.addPause=function(t,e,r){var i=tr.delayedCall(0,e||et,r);return i.data="isPause",this._hasPause=1,Xt(this,i,Zt(this,t))},r.removePause=function(t){var e=this._first;for(t=Zt(this,t);e;)e._start===t&&"isPause"===e.data&&Pt(e),e=e._next},r.killTweensOf=function(t,e,r){for(var i=this.getTweensOf(t,r),n=i.length;n--;)Ve!==i[n]&&i[n].kill(t,e);return this},r.getTweensOf=function(t,e){for(var r,i=[],n=ne(t),s=this._first,a=R(e);s;)s instanceof tr?Tt(s._targets,n)&&(a?(!Ve||s._initted&&s._ts)&&s.globalTime(0)<=e&&s.globalTime(s.totalDuration())>e:!e||s.isActive())&&i.push(s):(r=s.getTweensOf(n,e)).length&&i.push.apply(i,r),s=s._next;return i},r.tweenTo=function(t,e){e=e||{};var r,i=this,n=Zt(i,t),s=e,a=s.startAt,o=s.onStart,u=s.onStartParams,h=s.immediateRender,f=tr.to(i,Mt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:n,overwrite:"auto",duration:e.duration||Math.abs((n-(a&&"time"in a?a.time:i._time))/i.timeScale())||M,onStart:function(){if(i.pause(),!r){var t=e.duration||Math.abs((n-(a&&"time"in a?a.time:i._time))/i.timeScale());f._dur!==t&&Wt(f,t,0,1).render(f._time,!0,!0),r=1}o&&o.apply(f,u||[])}},e));return h?f.render(0):f},r.tweenFromTo=function(t,e,r){return this.tweenTo(e,Mt({startAt:{time:Zt(this,t)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(t){return void 0===t&&(t=this._time),_e(this,Zt(this,t))},r.previousLabel=function(t){return void 0===t&&(t=this._time),_e(this,Zt(this,t),1)},r.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+M)},r.shiftChildren=function(t,e,r){void 0===r&&(r=0);for(var i,n=this._first,s=this.labels;n;)n._start>=r&&(n._start+=t,n._end+=t),n=n._next;if(e)for(i in s)s[i]>=r&&(s[i]+=t);return zt(this)},r.invalidate=function(e){var r=this._first;for(this._lock=0;r;)r.invalidate(e),r=r._next;return t.prototype.invalidate.call(this,e)},r.clear=function(t){void 0===t&&(t=!0);for(var e,r=this._first;r;)e=r._next,this.remove(r),r=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),zt(this)},r.totalDuration=function(t){var e,r,i,n=0,s=this,a=s._last,o=O;if(arguments.length)return s.timeScale((s._repeat<0?s.duration():s.totalDuration())/(s.reversed()?-t:t));if(s._dirty){for(i=s.parent;a;)e=a._prev,a._dirty&&a.totalDuration(),(r=a._start)>o&&s._sort&&a._ts&&!s._lock?(s._lock=1,Xt(s,a,r-a._delay,1)._lock=0):o=r,r<0&&a._ts&&(n-=r,(!i&&!s._dp||i&&i.smoothChildTiming)&&(s._start+=r/s._ts,s._time-=r,s._tTime-=r),s.shiftChildren(-r,!1,-Infinity),o=0),a._end>n&&a._ts&&(n=a._end),a=e;Wt(s,s===u&&s._time>n?s._time:n,1,1),s._dirty=0}return s._tDur},e.updateRoot=function(t){if(u._ts&&(wt(u,It(t,u)),p=Ce.frame),Ce.frame>=ft){ft+=w.autoSleep||120;var e=u._first;if((!e||!e._ts)&&w.autoSleep&&Ce._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Ce.sleep()}}},e}(Xe);Mt(qe.prototype,{_lock:0,_hasPause:0,_forcing:0});var Ve,je,Ge=function(t,e,r,i,n,s,a){var o,u,h,f,l,c,p,_,d=new _r(this._pt,t,e,0,1,ur,null,n),m=0,g=0;for(d.b=r,d.e=i,r+="",(p=~(i+="").indexOf("random("))&&(i=ce(i)),s&&(s(_=[r,i],t,e),r=_[0],i=_[1]),u=r.match(j)||[];o=j.exec(i);)f=o[0],l=i.substring(m,o.index),h?h=(h+1)%5:"rgba("===l.substr(-5)&&(h=1),f!==u[g++]&&(c=parseFloat(u[g-1])||0,d._pt={_next:d._pt,p:l||1===g?l:",",s:c,c:"="===f.charAt(1)?yt(c,f)-c:parseFloat(f)-c,m:h&&h<4?Math.round:0},m=j.lastIndex);return d.c=m<i.length?i.substring(m,i.length):"",d.fp=a,(G.test(i)||p)&&(d.e=0),this._pt=d,d},We=function(t,e,r,i,n,s,a,o,u,h){z(i)&&(i=i(n||0,t,s));var f,l=t[e],c="get"!==r?r:z(l)?u?t[e.indexOf("set")||!z(t["get"+e.substr(3)])?e:"get"+e.substr(3)](u):t[e]():l,p=z(l)?u?ir:rr:er;if(P(i)&&(~i.indexOf("random(")&&(i=ce(i)),"="===i.charAt(1)&&((f=yt(c,i)+(te(c)||0))||0===f)&&(i=f)),!h||c!==i||je)return isNaN(c*i)||""===i?(!l&&!(e in t)&&J(e,i),Ge.call(this,t,e,c,i,p,o||w.stringFilter,u)):(f=new _r(this._pt,t,e,+c||0,i-(c||0),"boolean"==typeof l?or:ar,0,p),u&&(f.fp=u),a&&f.modifier(a,this,t),this._pt=f)},Qe=function(t,e,r,i,n,s){var a,o,u,h;if(ut[t]&&!1!==(a=new ut[t]).init(n,a.rawVars?e[t]:function(t,e,r,i,n){if(z(t)&&(t=$e(t,n,e,r,i)),!B(t)||t.style&&t.nodeType||U(t)||N(t))return P(t)?$e(t,n,e,r,i):t;var s,a={};for(s in t)a[s]=$e(t[s],n,e,r,i);return a}(e[t],i,n,s,r),r,i,s)&&(r._pt=o=new _r(r._pt,n,t,0,1,a.render,a,0,a.priority),r!==_))for(u=r._ptLookup[r._targets.indexOf(n)],h=a._props.length;h--;)u[a._props[h]]=o;return a},He=function t(e,r,i){var n,o,h,f,l,c,p,_,d,m,g,v,y,T=e.vars,x=T.ease,w=T.startAt,k=T.immediateRender,A=T.lazy,C=T.onUpdate,D=T.runBackwards,E=T.yoyoEase,S=T.keyframes,P=T.autoRevert,z=e._dur,R=e._startAt,F=e._targets,B=e.parent,I=B&&"nested"===B.data?B.vars.targets:F,Y="auto"===e._overwrite&&!s,N=e.timeline;if(N&&(!S||!x)&&(x="none"),e._ease=Be(x,b.ease),e._yEase=E?Re(Be(!0===E?x:E,b.ease)):0,E&&e._yoyo&&!e._repeat&&(E=e._yEase,e._yEase=e._ease,e._ease=E),e._from=!N&&!!T.runBackwards,!N||S&&!T.stagger){if(v=(_=F[0]?_t(F[0]).harness:0)&&T[_.prop],n=Ct(T,st),R&&(R._zTime<0&&R.progress(1),r<0&&D&&k&&!P?R.render(-1,!0):R.revert(D&&z?it:rt),R._lazy=0),w){if(Pt(e._startAt=tr.set(F,Mt({data:"isStart",overwrite:!1,parent:B,immediateRender:!0,lazy:!R&&L(A),startAt:null,delay:0,onUpdate:C&&function(){return de(e,"onUpdate")},stagger:0},w))),e._startAt._dp=0,e._startAt._sat=e,r<0&&(a||!k&&!P)&&e._startAt.revert(it),k&&z&&r<=0&&i<=0)return void(r&&(e._zTime=r))}else if(D&&z&&!R)if(r&&(k=!1),h=Mt({overwrite:!1,data:"isFromStart",lazy:k&&!R&&L(A),immediateRender:k,stagger:0,parent:B},n),v&&(h[_.prop]=v),Pt(e._startAt=tr.set(F,h)),e._startAt._dp=0,e._startAt._sat=e,r<0&&(a?e._startAt.revert(it):e._startAt.render(-1,!0)),e._zTime=r,k){if(!r)return}else t(e._startAt,M,M);for(e._pt=e._ptCache=0,A=z&&L(A)||A&&!z,o=0;o<F.length;o++){if(p=(l=F[o])._gsap||pt(F)[o]._gsap,e._ptLookup[o]=m={},ot[p.id]&&at.length&&xt(),g=I===F?o:I.indexOf(l),_&&!1!==(d=new _).init(l,v||n,e,g,I)&&(e._pt=f=new _r(e._pt,l,d.name,0,1,d.render,d,0,d.priority),d._props.forEach((function(t){m[t]=f})),d.priority&&(c=1)),!_||v)for(h in n)ut[h]&&(d=Qe(h,n,e,g,l,I))?d.priority&&(c=1):m[h]=f=We.call(e,l,h,"get",n[h],g,I,0,T.stringFilter);e._op&&e._op[o]&&e.kill(l,e._op[o]),Y&&e._pt&&(Ve=e,u.killTweensOf(l,m,e.globalTime(r)),y=!e.parent,Ve=0),e._pt&&A&&(ot[p.id]=1)}c&&pr(e),e._onInit&&e._onInit(e)}e._onUpdate=C,e._initted=(!e._op||e._pt)&&!y,S&&r<=0&&N.render(O,!0,!0)},Ze=function(t,e,r,i){var n,s,a=e.ease||i||"power1.inOut";if(U(e))s=r[t]||(r[t]=[]),e.forEach((function(t,r){return s.push({t:r/(e.length-1)*100,v:t,e:a})}));else for(n in e)s=r[n]||(r[n]=[]),"ease"===n||s.push({t:parseFloat(t),v:e[n],e:a})},$e=function(t,e,r,i,n){return z(t)?t.call(e,r,i,n):P(t)&&~t.indexOf("random(")?ce(t):t},Je=ct+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Ke={};mt(Je+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return Ke[t]=1}));var tr=function(t){function e(e,r,n,a){var o;"number"==typeof r&&(n.duration=r,r=n,n=null);var h,f,l,c,p,_,d,m,g=(o=t.call(this,a?r:Dt(r))||this).vars,v=g.duration,y=g.delay,T=g.immediateRender,x=g.stagger,b=g.overwrite,O=g.keyframes,M=g.defaults,k=g.scrollTrigger,A=g.yoyoEase,C=r.parent||u,D=(U(e)||N(e)?R(e[0]):"length"in r)?[e]:ne(e);if(o._targets=D.length?pt(D):K("GSAP target "+e+" not found. https://gsap.com",!w.nullTargetWarn)||[],o._ptLookup=[],o._overwrite=b,O||x||Y(v)||Y(y)){if(r=o.vars,(h=o.timeline=new qe({data:"nested",defaults:M||{},targets:C&&"nested"===C.data?C.vars.targets:D})).kill(),h.parent=h._dp=i(o),h._start=0,x||Y(v)||Y(y)){if(c=D.length,d=x&&oe(x),B(x))for(p in x)~Je.indexOf(p)&&(m||(m={}),m[p]=x[p]);for(f=0;f<c;f++)(l=Ct(r,Ke)).stagger=0,A&&(l.yoyoEase=A),m&&kt(l,m),_=D[f],l.duration=+$e(v,i(o),f,_,D),l.delay=(+$e(y,i(o),f,_,D)||0)-o._delay,!x&&1===c&&l.delay&&(o._delay=y=l.delay,o._start+=y,l.delay=0),h.to(_,l,d?d(f,_,D):0),h._ease=Ee.none;h.duration()?v=y=0:o.timeline=0}else if(O){Dt(Mt(h.vars.defaults,{ease:"none"})),h._ease=Be(O.ease||r.ease||"none");var E,S,P,z=0;if(U(O))O.forEach((function(t){return h.to(D,t,">")})),h.duration();else{for(p in l={},O)"ease"===p||"easeEach"===p||Ze(p,O[p],l,O.easeEach);for(p in l)for(E=l[p].sort((function(t,e){return t.t-e.t})),z=0,f=0;f<E.length;f++)(P={ease:(S=E[f]).e,duration:(S.t-(f?E[f-1].t:0))/100*v})[p]=S.v,h.to(D,P,z),z+=P.duration;h.duration()<v&&h.to({},{duration:v-h.duration()})}}v||o.duration(v=h.duration())}else o.timeline=0;return!0!==b||s||(Ve=i(o),u.killTweensOf(D),Ve=0),Xt(C,i(o),n),r.reversed&&o.reverse(),r.paused&&o.paused(!0),(T||!v&&!O&&o._start===vt(C._time)&&L(T)&&Ft(i(o))&&"nested"!==C.data)&&(o._tTime=-1e-8,o.render(Math.max(0,-y)||0)),k&&qt(i(o),k),o}n(e,t);var r=e.prototype;return r.render=function(t,e,r){var i,n,s,o,u,h,f,l,c,p=this._time,_=this._tDur,d=this._dur,m=t<0,g=t>_-M&&!m?_:t<M?0:t;if(d){if(g!==this._tTime||!t||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==m){if(i=g,l=this.timeline,this._repeat){if(o=d+this._rDelay,this._repeat<-1&&m)return this.totalTime(100*o+t,e,r);if(i=vt(g%o),g===_?(s=this._repeat,i=d):((s=~~(g/o))&&s===vt(g/o)&&(i=d,s--),i>d&&(i=d)),(h=this._yoyo&&1&s)&&(c=this._yEase,i=d-i),u=Lt(this._tTime,o),i===p&&!r&&this._initted&&s===u)return this._tTime=g,this;s!==u&&(l&&this._yEase&&Fe(l,h),this.vars.repeatRefresh&&!h&&!this._lock&&this._time!==o&&this._initted&&(this._lock=r=1,this.render(vt(o*s),!0).invalidate()._lock=0))}if(!this._initted){if(Vt(this,m?t:i,r,e,g))return this._tTime=0,this;if(!(p===this._time||r&&this.vars.repeatRefresh&&s!==u))return this;if(d!==this._dur)return this.render(t,e,r)}if(this._tTime=g,this._time=i,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=f=(c||this._ease)(i/d),this._from&&(this.ratio=f=1-f),i&&!p&&!e&&!s&&(de(this,"onStart"),this._tTime!==g))return this;for(n=this._pt;n;)n.r(f,n.d),n=n._next;l&&l.render(t<0?t:l._dur*l._ease(i/this._dur),e,r)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(m&&Rt(this,t,0,r),de(this,"onUpdate")),this._repeat&&s!==u&&this.vars.onRepeat&&!e&&this.parent&&de(this,"onRepeat"),g!==this._tDur&&g||this._tTime!==g||(m&&!this._onUpdate&&Rt(this,t,0,!0),(t||!d)&&(g===this._tDur&&this._ts>0||!g&&this._ts<0)&&Pt(this,1),e||m&&!p||!(g||p||h)||(de(this,g===_?"onComplete":"onReverseComplete",!0),this._prom&&!(g<_&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,r,i){var n,s,o,u=t.ratio,h=e<0||!e&&(!t._start&&jt(t)&&(t._initted||!Gt(t))||(t._ts<0||t._dp._ts<0)&&!Gt(t))?0:1,f=t._rDelay,l=0;if(f&&t._repeat&&(l=Kt(0,t._tDur,e),s=Lt(l,f),t._yoyo&&1&s&&(h=1-h),s!==Lt(t._tTime,f)&&(u=1-h,t.vars.repeatRefresh&&t._initted&&t.invalidate())),h!==u||a||i||t._zTime===M||!e&&t._zTime){if(!t._initted&&Vt(t,e,i,r,l))return;for(o=t._zTime,t._zTime=e||(r?M:0),r||(r=e&&!o),t.ratio=h,t._from&&(h=1-h),t._time=0,t._tTime=l,n=t._pt;n;)n.r(h,n.d),n=n._next;e<0&&Rt(t,e,0,!0),t._onUpdate&&!r&&de(t,"onUpdate"),l&&t._repeat&&!r&&t.parent&&de(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===h&&(h&&Pt(t,1),r||a||(de(t,h?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,r);return this},r.targets=function(){return this._targets},r.invalidate=function(e){return(!e||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(e),t.prototype.invalidate.call(this,e)},r.resetTo=function(t,e,r,i,n){d||Ce.wake(),this._ts||this.play();var s=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||He(this,s),function(t,e,r,i,n,s,a,o){var u,h,f,l,c=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!c)for(c=t._ptCache[e]=[],f=t._ptLookup,l=t._targets.length;l--;){if((u=f[l][e])&&u.d&&u.d._pt)for(u=u.d._pt;u&&u.p!==e&&u.fp!==e;)u=u._next;if(!u)return je=1,t.vars[e]="+=0",He(t,a),je=0,o?K(e+" not eligible for reset"):1;c.push(u)}for(l=c.length;l--;)(u=(h=c[l])._pt||h).s=!i&&0!==i||n?u.s+(i||0)+s*u.c:i,u.c=r-u.s,h.e&&(h.e=gt(r)+te(h.e)),h.b&&(h.b=u.s+te(h.b))}(this,t,e,r,i,this._ease(s/this._dur),s,n)?this.resetTo(t,e,r,i,1):(Nt(this,0),this.parent||Et(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},r.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?me(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Ve&&!0!==Ve.vars.overwrite)._first||me(this),this.parent&&r!==this.timeline.totalDuration()&&Wt(this,this._dur*this.timeline._tDur/r,0,1),this}var i,n,s,a,o,u,h,f=this._targets,l=t?ne(t):f,c=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var r=t.length,i=r===e.length;i&&r--&&t[r]===e[r];);return r<0}(f,l))return"all"===e&&(this._pt=0),me(this);for(i=this._op=this._op||[],"all"!==e&&(P(e)&&(o={},mt(e,(function(t){return o[t]=1})),e=o),e=function(t,e){var r,i,n,s,a=t[0]?_t(t[0]).harness:0,o=a&&a.aliases;if(!o)return e;for(i in r=kt({},e),o)if(i in r)for(n=(s=o[i].split(",")).length;n--;)r[s[n]]=r[i];return r}(f,e)),h=f.length;h--;)if(~l.indexOf(f[h]))for(o in n=c[h],"all"===e?(i[h]=e,a=n,s={}):(s=i[h]=i[h]||{},a=e),a)(u=n&&n[o])&&("kill"in u.d&&!0!==u.d.kill(o)||St(this,u,"_pt"),delete n[o]),"all"!==s&&(s[o]=1);return this._initted&&!this._pt&&p&&me(this),this},e.to=function(t,r){return new e(t,r,arguments[2])},e.from=function(t,e){return $t(1,arguments)},e.delayedCall=function(t,r,i,n){return new e(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:r,onReverseComplete:r,onCompleteParams:i,onReverseCompleteParams:i,callbackScope:n})},e.fromTo=function(t,e,r){return $t(2,arguments)},e.set=function(t,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new e(t,r)},e.killTweensOf=function(t,e,r){return u.killTweensOf(t,e,r)},e}(Xe);Mt(tr.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),mt("staggerTo,staggerFrom,staggerFromTo",(function(t){tr[t]=function(){var e=new qe,r=ee.call(arguments,0);return r.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,r)}}));var er=function(t,e,r){return t[e]=r},rr=function(t,e,r){return t[e](r)},ir=function(t,e,r,i){return t[e](i.fp,r)},nr=function(t,e,r){return t.setAttribute(e,r)},sr=function(t,e){return z(t[e])?rr:F(t[e])&&t.setAttribute?nr:er},ar=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},or=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},ur=function(t,e){var r=e._pt,i="";if(!t&&e.b)i=e.b;else if(1===t&&e.e)i=e.e;else{for(;r;)i=r.p+(r.m?r.m(r.s+r.c*t):Math.round(1e4*(r.s+r.c*t))/1e4)+i,r=r._next;i+=e.c}e.set(e.t,e.p,i,e)},hr=function(t,e){for(var r=e._pt;r;)r.r(t,r.d),r=r._next},fr=function(t,e,r,i){for(var n,s=this._pt;s;)n=s._next,s.p===i&&s.modifier(t,e,r),s=n},lr=function(t){for(var e,r,i=this._pt;i;)r=i._next,i.p===t&&!i.op||i.op===t?St(this,i,"_pt"):i.dep||(e=1),i=r;return!e},cr=function(t,e,r,i){i.mSet(t,e,i.m.call(i.tween,r,i.mt),i)},pr=function(t){for(var e,r,i,n,s=t._pt;s;){for(e=s._next,r=i;r&&r.pr>s.pr;)r=r._next;(s._prev=r?r._prev:n)?s._prev._next=s:i=s,(s._next=r)?r._prev=s:n=s,s=e}t._pt=i},_r=function(){function t(t,e,r,i,n,s,a,o,u){this.t=e,this.s=i,this.c=n,this.p=r,this.r=s||ar,this.d=a||this,this.set=o||er,this.pr=u||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,r){this.mSet=this.mSet||this.set,this.set=cr,this.m=t,this.mt=r,this.tween=e},t}();mt(ct+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return st[t]=1})),H.TweenMax=H.TweenLite=tr,H.TimelineLite=H.TimelineMax=qe,u=new qe({sortChildren:!1,defaults:b,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),w.stringFilter=Ae;var dr=[],mr={},gr=[],vr=0,yr=0,Tr=function(t){return(mr[t]||gr).map((function(t){return t()}))},xr=function(){var t=Date.now(),e=[];t-vr>2&&(Tr("matchMediaInit"),dr.forEach((function(t){var r,i,n,s,a=t.queries,o=t.conditions;for(i in a)(r=h.matchMedia(a[i]).matches)&&(n=1),r!==o[i]&&(o[i]=r,s=1);s&&(t.revert(),n&&e.push(t))})),Tr("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t,(function(e){return t.add(null,e)}))})),vr=t,Tr("matchMedia"))},wr=function(){function t(t,e){this.selector=e&&se(e),this.data=[],this._r=[],this.isReverted=!1,this.id=yr++,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,r){z(t)&&(r=e,e=t,t=z);var i=this,n=function(){var t,n=o,s=i.selector;return n&&n!==i&&n.data.push(i),r&&(i.selector=se(r)),o=i,t=e.apply(i,arguments),z(t)&&i._r.push(t),o=n,i.selector=s,i.isReverted=!1,t};return i.last=n,t===z?n(i,(function(t){return i.add(null,t)})):t?i[t]=n:n},e.ignore=function(t){var e=o;o=null,t(this),o=e},e.getTweens=function(){var e=[];return this.data.forEach((function(r){return r instanceof t?e.push.apply(e,r.getTweens()):r instanceof tr&&!(r.parent&&"nested"===r.parent.data)&&e.push(r)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var r=this;if(t?function(){for(var e,i=r.getTweens(),n=r.data.length;n--;)"isFlip"===(e=r.data[n]).data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(t){return i.splice(i.indexOf(t),1)})));for(i.map((function(t){return{g:t._dur||t._delay||t._sat&&!t._sat.vars.immediateRender?t.globalTime(0):-1/0,t}})).sort((function(t,e){return e.g-t.g||-1/0})).forEach((function(e){return e.t.revert(t)})),n=r.data.length;n--;)(e=r.data[n])instanceof qe?"nested"!==e.data&&(e.scrollTrigger&&e.scrollTrigger.revert(),e.kill()):!(e instanceof tr)&&e.revert&&e.revert(t);r._r.forEach((function(e){return e(t,r)})),r.isReverted=!0}():this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e)for(var i=dr.length;i--;)dr[i].id===this.id&&dr.splice(i,1)},e.revert=function(t){this.kill(t||{})},t}(),br=function(){function t(t){this.contexts=[],this.scope=t,o&&o.data.push(this)}var e=t.prototype;return e.add=function(t,e,r){B(t)||(t={matches:t});var i,n,s,a=new wr(0,r||this.scope),u=a.conditions={};for(n in o&&!a.selector&&(a.selector=o.selector),this.contexts.push(a),e=a.add("onMatch",e),a.queries=t,t)"all"===n?s=1:(i=h.matchMedia(t[n]))&&(dr.indexOf(a)<0&&dr.push(a),(u[n]=i.matches)&&(s=1),i.addListener?i.addListener(xr):i.addEventListener("change",xr));return s&&e(a,(function(t){return a.add(null,t)})),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),Or={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];e.forEach((function(t){return ve(t)}))},timeline:function(t){return new qe(t)},getTweensOf:function(t,e){return u.getTweensOf(t,e)},getProperty:function(t,e,r,i){P(t)&&(t=ne(t)[0]);var n=_t(t||{}).get,s=r?Ot:bt;return"native"===r&&(r=""),t?e?s((ut[e]&&ut[e].get||n)(t,e,r,i)):function(e,r,i){return s((ut[e]&&ut[e].get||n)(t,e,r,i))}:t},quickSetter:function(t,e,r){if((t=ne(t)).length>1){var i=t.map((function(t){return Ar.quickSetter(t,e,r)})),n=i.length;return function(t){for(var e=n;e--;)i[e](t)}}t=t[0]||{};var s=ut[e],a=_t(t),o=a.harness&&(a.harness.aliases||{})[e]||e,u=s?function(e){var i=new s;_._pt=0,i.init(t,r?e+r:e,_,0,[t]),i.render(1,i),_._pt&&hr(1,_)}:a.set(t,o);return s?u:function(e){return u(t,o,r?e+r:e,a,1)}},quickTo:function(t,e,r){var i,n=Ar.to(t,kt(((i={})[e]="+=0.1",i.paused=!0,i),r||{})),s=function(t,r,i){return n.resetTo(e,t,r,i)};return s.tween=n,s},isTweening:function(t){return u.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Be(t.ease,b.ease)),At(b,t||{})},config:function(t){return At(w,t||{})},registerEffect:function(t){var e=t.name,r=t.effect,i=t.plugins,n=t.defaults,s=t.extendTimeline;(i||"").split(",").forEach((function(t){return t&&!ut[t]&&!H[t]&&K(e+" effect requires "+t+" plugin.")})),ht[e]=function(t,e,i){return r(ne(t),Mt(e||{},n),i)},s&&(qe.prototype[e]=function(t,r,i){return this.add(ht[e](t,B(r)?r:(i=r)&&{},this),i)})},registerEase:function(t,e){Ee[t]=Be(e)},parseEase:function(t,e){return arguments.length?Be(t,e):Ee},getById:function(t){return u.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var r,i,n=new qe(t);for(n.smoothChildTiming=L(t.smoothChildTiming),u.remove(n),n._dp=0,n._time=n._tTime=u._time,r=u._first;r;)i=r._next,!e&&!r._dur&&r instanceof tr&&r.vars.onComplete===r._targets[0]||Xt(n,r,r._start-r._delay),r=i;return Xt(u,n,0),n},context:function(t,e){return t?new wr(t,e):o},matchMedia:function(t){return new br(t)},matchMediaRefresh:function(){return dr.forEach((function(t){var e,r,i=t.conditions;for(r in i)i[r]&&(i[r]=!1,e=1);e&&t.revert()}))||xr()},addEventListener:function(t,e){var r=mr[t]||(mr[t]=[]);~r.indexOf(e)||r.push(e)},removeEventListener:function(t,e){var r=mr[t],i=r&&r.indexOf(e);i>=0&&r.splice(i,1)},utils:{wrap:function t(e,r,i){var n=r-e;return U(e)?le(e,t(0,e.length),r):Jt(i,(function(t){return(n+(t-e)%n)%n+e}))},wrapYoyo:function t(e,r,i){var n=r-e,s=2*n;return U(e)?le(e,t(0,e.length-1),r):Jt(i,(function(t){return e+((t=(s+(t-e)%s)%s||0)>n?s-t:t)}))},distribute:oe,random:fe,snap:he,normalize:function(t,e,r){return pe(t,e,0,1,r)},getUnit:te,clamp:function(t,e,r){return Jt(r,(function(r){return Kt(t,e,r)}))},splitColor:we,toArray:ne,selector:se,mapRange:pe,pipe:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(r){return t(parseFloat(r))+(e||te(r))}},interpolate:function t(e,r,i,n){var s=isNaN(e+r)?0:function(t){return(1-t)*e+t*r};if(!s){var a,o,u,h,f,l=P(e),c={};if(!0===i&&(n=1)&&(i=null),l)e={p:e},r={p:r};else if(U(e)&&!U(r)){for(u=[],h=e.length,f=h-2,o=1;o<h;o++)u.push(t(e[o-1],e[o]));h--,s=function(t){t*=h;var e=Math.min(f,~~t);return u[e](t-e)},i=r}else n||(e=kt(U(e)?[]:{},e));if(!u){for(a in r)We.call(c,e,a,"get",r[a]);s=function(t){return hr(t,c)||(l?e.p:e)}}}return Jt(i,s)},shuffle:ae},install:$,effects:ht,ticker:Ce,updateRoot:qe.updateRoot,plugins:ut,globalTimeline:u,core:{PropTween:_r,globals:tt,Tween:tr,Timeline:qe,Animation:Xe,getCache:_t,_removeLinkedListItem:St,reverting:function(){return a},context:function(t){return t&&o&&(o.data.push(t),t._ctx=o),o},suppressOverwrites:function(t){return s=t}}};mt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return Or[t]=tr[t]})),Ce.add(qe.updateRoot),_=Or.to({},{duration:0});var Mr=function(t,e){for(var r=t._pt;r&&r.p!==e&&r.op!==e&&r.fp!==e;)r=r._next;return r},kr=function(t,e){return{name:t,rawVars:1,init:function(t,r,i){i._onInit=function(t){var i,n;if(P(r)&&(i={},mt(r,(function(t){return i[t]=1})),r=i),e){for(n in i={},r)i[n]=e(r[n]);r=i}!function(t,e){var r,i,n,s=t._targets;for(r in e)for(i=s.length;i--;)(n=t._ptLookup[i][r])&&(n=n.d)&&(n._pt&&(n=Mr(n,r)),n&&n.modifier&&n.modifier(e[r],t,s[i],r))}(t,r)}}}},Ar=Or.registerPlugin({name:"attr",init:function(t,e,r,i,n){var s,a,o;for(s in this.tween=r,e)o=t.getAttribute(s)||"",(a=this.add(t,"setAttribute",(o||0)+"",e[s],i,n,0,0,s)).op=s,a.b=o,this._props.push(s)},render:function(t,e){for(var r=e._pt;r;)a?r.set(r.t,r.p,r.b,r):r.r(t,r.d),r=r._next}},{name:"endArray",init:function(t,e){for(var r=e.length;r--;)this.add(t,r,t[r]||0,e[r],0,0,0,0,0,1)}},kr("roundProps",ue),kr("modifiers"),kr("snap",he))||Or;tr.version=qe.version=Ar.version="3.12.5",c=1,I()&&De();Ee.Power0,Ee.Power1,Ee.Power2,Ee.Power3,Ee.Power4,Ee.Linear,Ee.Quad,Ee.Cubic,Ee.Quart,Ee.Quint,Ee.Strong,Ee.Elastic,Ee.Back,Ee.SteppedEase,Ee.Bounce,Ee.Sine,Ee.Expo,Ee.Circ;var Cr,Dr,Er,Sr,Pr,zr,Rr,Fr,Br={},Lr=180/Math.PI,Ir=Math.PI/180,Yr=Math.atan2,Nr=/([A-Z])/g,Ur=/(left|right|width|margin|padding|x)/i,Xr=/[\s,\(]\S/,qr={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},Vr=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},jr=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Gr=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},Wr=function(t,e){var r=e.s+e.c*t;e.set(e.t,e.p,~~(r+(r<0?-.5:.5))+e.u,e)},Qr=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},Hr=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},Zr=function(t,e,r){return t.style[e]=r},$r=function(t,e,r){return t.style.setProperty(e,r)},Jr=function(t,e,r){return t._gsap[e]=r},Kr=function(t,e,r){return t._gsap.scaleX=t._gsap.scaleY=r},ti=function(t,e,r,i,n){var s=t._gsap;s.scaleX=s.scaleY=r,s.renderTransform(n,s)},ei=function(t,e,r,i,n){var s=t._gsap;s[e]=r,s.renderTransform(n,s)},ri="transform",ii=ri+"Origin",ni=function t(e,r){var i=this,n=this.target,s=n.style,a=n._gsap;if(e in Br&&s){if(this.tfm=this.tfm||{},"transform"===e)return qr.transform.split(",").forEach((function(e){return t.call(i,e,r)}));if(~(e=qr[e]||e).indexOf(",")?e.split(",").forEach((function(t){return i.tfm[t]=wi(n,t)})):this.tfm[e]=a.x?a[e]:wi(n,e),e===ii&&(this.tfm.zOrigin=a.zOrigin),this.props.indexOf(ri)>=0)return;a.svg&&(this.svgo=n.getAttribute("data-svg-origin"),this.props.push(ii,r,"")),e=ri}(s||r)&&this.props.push(e,r,s[e])},si=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},ai=function(){var t,e,r=this.props,i=this.target,n=i.style,s=i._gsap;for(t=0;t<r.length;t+=3)r[t+1]?i[r[t]]=r[t+2]:r[t+2]?n[r[t]]=r[t+2]:n.removeProperty("--"===r[t].substr(0,2)?r[t]:r[t].replace(Nr,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)s[e]=this.tfm[e];s.svg&&(s.renderTransform(),i.setAttribute("data-svg-origin",this.svgo||"")),(t=Rr())&&t.isStart||n[ri]||(si(n),s.zOrigin&&n[ii]&&(n[ii]+=" "+s.zOrigin+"px",s.zOrigin=0,s.renderTransform()),s.uncache=1)}},oi=function(t,e){var r={target:t,props:[],revert:ai,save:ni};return t._gsap||Ar.core.getCache(t),e&&e.split(",").forEach((function(t){return r.save(t)})),r},ui=function(t,e){var r=Dr.createElementNS?Dr.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):Dr.createElement(t);return r&&r.style?r:Dr.createElement(t)},hi=function t(e,r,i){var n=getComputedStyle(e);return n[r]||n.getPropertyValue(r.replace(Nr,"-$1").toLowerCase())||n.getPropertyValue(r)||!i&&t(e,li(r)||r,1)||""},fi="O,Moz,ms,Ms,Webkit".split(","),li=function(t,e,r){var i=(e||Pr).style,n=5;if(t in i&&!r)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);n--&&!(fi[n]+t in i););return n<0?null:(3===n?"ms":n>=0?fi[n]:"")+t},ci=function(){"undefined"!=typeof window&&window.document&&(Cr=window,Dr=Cr.document,Er=Dr.documentElement,Pr=ui("div")||{style:{}},ui("div"),ri=li(ri),ii=ri+"Origin",Pr.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Fr=!!li("perspective"),Rr=Ar.core.reverting,Sr=1)},pi=function t(e){var r,i=ui("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,s=this.nextSibling,a=this.style.cssText;if(Er.appendChild(i),i.appendChild(this),this.style.display="block",e)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(r=this._gsapBBox());return n&&(s?n.insertBefore(this,s):n.appendChild(this)),Er.removeChild(i),this.style.cssText=a,r},_i=function(t,e){for(var r=e.length;r--;)if(t.hasAttribute(e[r]))return t.getAttribute(e[r])},di=function(t){var e;try{e=t.getBBox()}catch(r){e=pi.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===pi||(e=pi.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+_i(t,["x","cx","x1"])||0,y:+_i(t,["y","cy","y1"])||0,width:0,height:0}},mi=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!di(t))},gi=function(t,e){if(e){var r,i=t.style;e in Br&&e!==ii&&(e=ri),i.removeProperty?("ms"!==(r=e.substr(0,2))&&"webkit"!==e.substr(0,6)||(e="-"+e),i.removeProperty("--"===r?e:e.replace(Nr,"-$1").toLowerCase())):i.removeAttribute(e)}},vi=function(t,e,r,i,n,s){var a=new _r(t._pt,e,r,0,1,s?Hr:Qr);return t._pt=a,a.b=i,a.e=n,t._props.push(r),a},yi={deg:1,rad:1,turn:1},Ti={grid:1,flex:1},xi=function t(e,r,i,n){var s,a,o,u,h=parseFloat(i)||0,f=(i+"").trim().substr((h+"").length)||"px",l=Pr.style,c=Ur.test(r),p="svg"===e.tagName.toLowerCase(),_=(p?"client":"offset")+(c?"Width":"Height"),d=100,m="px"===n,g="%"===n;if(n===f||!h||yi[n]||yi[f])return h;if("px"!==f&&!m&&(h=t(e,r,i,"px")),u=e.getCTM&&mi(e),(g||"%"===f)&&(Br[r]||~r.indexOf("adius")))return s=u?e.getBBox()[c?"width":"height"]:e[_],gt(g?h/s*d:h/100*s);if(l[c?"width":"height"]=d+(m?f:n),a=~r.indexOf("adius")||"em"===n&&e.appendChild&&!p?e:e.parentNode,u&&(a=(e.ownerSVGElement||{}).parentNode),a&&a!==Dr&&a.appendChild||(a=Dr.body),(o=a._gsap)&&g&&o.width&&c&&o.time===Ce.time&&!o.uncache)return gt(h/o.width*d);if(!g||"height"!==r&&"width"!==r)(g||"%"===f)&&!Ti[hi(a,"display")]&&(l.position=hi(e,"position")),a===e&&(l.position="static"),a.appendChild(Pr),s=Pr[_],a.removeChild(Pr),l.position="absolute";else{var v=e.style[r];e.style[r]=d+n,s=e[_],v?e.style[r]=v:gi(e,r)}return c&&g&&((o=_t(a)).time=Ce.time,o.width=a[_]),gt(m?s*h/d:s&&h?d/s*h:0)},wi=function(t,e,r,i){var n;return Sr||ci(),e in qr&&"transform"!==e&&~(e=qr[e]).indexOf(",")&&(e=e.split(",")[0]),Br[e]&&"transform"!==e?(n=zi(t,i),n="transformOrigin"!==e?n[e]:n.svg?n.origin:Ri(hi(t,ii))+" "+n.zOrigin+"px"):(!(n=t.style[e])||"auto"===n||i||~(n+"").indexOf("calc("))&&(n=ki[e]&&ki[e](t,e,r)||hi(t,e)||dt(t,e)||("opacity"===e?1:0)),r&&!~(n+"").trim().indexOf(" ")?xi(t,e,n,r)+r:n},bi=function(t,e,r,i){if(!r||"none"===r){var n=li(e,t,1),s=n&&hi(t,n,1);s&&s!==r?(e=n,r=s):"borderColor"===e&&(r=hi(t,"borderTopColor"))}var a,o,u,h,f,l,c,p,_,d,m,g=new _r(this._pt,t.style,e,0,1,ur),v=0,y=0;if(g.b=r,g.e=i,r+="","auto"===(i+="")&&(l=t.style[e],t.style[e]=i,i=hi(t,e)||i,l?t.style[e]=l:gi(t,e)),Ae(a=[r,i]),i=a[1],u=(r=a[0]).match(V)||[],(i.match(V)||[]).length){for(;o=V.exec(i);)c=o[0],_=i.substring(v,o.index),f?f=(f+1)%5:"rgba("!==_.substr(-5)&&"hsla("!==_.substr(-5)||(f=1),c!==(l=u[y++]||"")&&(h=parseFloat(l)||0,m=l.substr((h+"").length),"="===c.charAt(1)&&(c=yt(h,c)+m),p=parseFloat(c),d=c.substr((p+"").length),v=V.lastIndex-d.length,d||(d=d||w.units[e]||m,v===i.length&&(i+=d,g.e+=d)),m!==d&&(h=xi(t,e,l,d)||0),g._pt={_next:g._pt,p:_||1===y?_:",",s:h,c:p-h,m:f&&f<4||"zIndex"===e?Math.round:0});g.c=v<i.length?i.substring(v,i.length):""}else g.r="display"===e&&"none"===i?Hr:Qr;return G.test(i)&&(g.e=0),this._pt=g,g},Oi={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},Mi=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var r,i,n,s=e.t,a=s.style,o=e.u,u=s._gsap;if("all"===o||!0===o)a.cssText="",i=1;else for(n=(o=o.split(",")).length;--n>-1;)r=o[n],Br[r]&&(i=1,r="transformOrigin"===r?ii:ri),gi(s,r);i&&(gi(s,ri),u&&(u.svg&&s.removeAttribute("transform"),zi(s,1),u.uncache=1,si(a)))}},ki={clearProps:function(t,e,r,i,n){if("isFromStart"!==n.data){var s=t._pt=new _r(t._pt,e,r,0,0,Mi);return s.u=i,s.pr=-10,s.tween=n,t._props.push(r),1}}},Ai=[1,0,0,1,0,0],Ci={},Di=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},Ei=function(t){var e=hi(t,ri);return Di(e)?Ai:e.substr(7).match(q).map(gt)},Si=function(t,e){var r,i,n,s,a=t._gsap||_t(t),o=t.style,u=Ei(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(n=t.transform.baseVal.consolidate().matrix).a,n.b,n.c,n.d,n.e,n.f]).join(",")?Ai:u:(u!==Ai||t.offsetParent||t===Er||a.svg||(n=o.display,o.display="block",(r=t.parentNode)&&t.offsetParent||(s=1,i=t.nextElementSibling,Er.appendChild(t)),u=Ei(t),n?o.display=n:gi(t,"display"),s&&(i?r.insertBefore(t,i):r?r.appendChild(t):Er.removeChild(t))),e&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},Pi=function(t,e,r,i,n,s){var a,o,u,h=t._gsap,f=n||Si(t,!0),l=h.xOrigin||0,c=h.yOrigin||0,p=h.xOffset||0,_=h.yOffset||0,d=f[0],m=f[1],g=f[2],v=f[3],y=f[4],T=f[5],x=e.split(" "),w=parseFloat(x[0])||0,b=parseFloat(x[1])||0;r?f!==Ai&&(o=d*v-m*g)&&(u=w*(-m/o)+b*(d/o)-(d*T-m*y)/o,w=w*(v/o)+b*(-g/o)+(g*T-v*y)/o,b=u):(w=(a=di(t)).x+(~x[0].indexOf("%")?w/100*a.width:w),b=a.y+(~(x[1]||x[0]).indexOf("%")?b/100*a.height:b)),i||!1!==i&&h.smooth?(y=w-l,T=b-c,h.xOffset=p+(y*d+T*g)-y,h.yOffset=_+(y*m+T*v)-T):h.xOffset=h.yOffset=0,h.xOrigin=w,h.yOrigin=b,h.smooth=!!i,h.origin=e,h.originIsAbsolute=!!r,t.style[ii]="0px 0px",s&&(vi(s,h,"xOrigin",l,w),vi(s,h,"yOrigin",c,b),vi(s,h,"xOffset",p,h.xOffset),vi(s,h,"yOffset",_,h.yOffset)),t.setAttribute("data-svg-origin",w+" "+b)},zi=function(t,e){var r=t._gsap||new Ue(t);if("x"in r&&!e&&!r.uncache)return r;var i,n,s,a,o,u,h,f,l,c,p,_,d,m,g,v,y,T,x,b,O,M,k,A,C,D,E,S,P,z,R,F,B=t.style,L=r.scaleX<0,I="px",Y="deg",N=getComputedStyle(t),U=hi(t,ii)||"0";return i=n=s=u=h=f=l=c=p=0,a=o=1,r.svg=!(!t.getCTM||!mi(t)),N.translate&&("none"===N.translate&&"none"===N.scale&&"none"===N.rotate||(B[ri]=("none"!==N.translate?"translate3d("+(N.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==N.rotate?"rotate("+N.rotate+") ":"")+("none"!==N.scale?"scale("+N.scale.split(" ").join(",")+") ":"")+("none"!==N[ri]?N[ri]:"")),B.scale=B.rotate=B.translate="none"),m=Si(t,r.svg),r.svg&&(r.uncache?(C=t.getBBox(),U=r.xOrigin-C.x+"px "+(r.yOrigin-C.y)+"px",A=""):A=!e&&t.getAttribute("data-svg-origin"),Pi(t,A||U,!!A||r.originIsAbsolute,!1!==r.smooth,m)),_=r.xOrigin||0,d=r.yOrigin||0,m!==Ai&&(T=m[0],x=m[1],b=m[2],O=m[3],i=M=m[4],n=k=m[5],6===m.length?(a=Math.sqrt(T*T+x*x),o=Math.sqrt(O*O+b*b),u=T||x?Yr(x,T)*Lr:0,(l=b||O?Yr(b,O)*Lr+u:0)&&(o*=Math.abs(Math.cos(l*Ir))),r.svg&&(i-=_-(_*T+d*b),n-=d-(_*x+d*O))):(F=m[6],z=m[7],E=m[8],S=m[9],P=m[10],R=m[11],i=m[12],n=m[13],s=m[14],h=(g=Yr(F,P))*Lr,g&&(A=M*(v=Math.cos(-g))+E*(y=Math.sin(-g)),C=k*v+S*y,D=F*v+P*y,E=M*-y+E*v,S=k*-y+S*v,P=F*-y+P*v,R=z*-y+R*v,M=A,k=C,F=D),f=(g=Yr(-b,P))*Lr,g&&(v=Math.cos(-g),R=O*(y=Math.sin(-g))+R*v,T=A=T*v-E*y,x=C=x*v-S*y,b=D=b*v-P*y),u=(g=Yr(x,T))*Lr,g&&(A=T*(v=Math.cos(g))+x*(y=Math.sin(g)),C=M*v+k*y,x=x*v-T*y,k=k*v-M*y,T=A,M=C),h&&Math.abs(h)+Math.abs(u)>359.9&&(h=u=0,f=180-f),a=gt(Math.sqrt(T*T+x*x+b*b)),o=gt(Math.sqrt(k*k+F*F)),g=Yr(M,k),l=Math.abs(g)>2e-4?g*Lr:0,p=R?1/(R<0?-R:R):0),r.svg&&(A=t.getAttribute("transform"),r.forceCSS=t.setAttribute("transform","")||!Di(hi(t,ri)),A&&t.setAttribute("transform",A))),Math.abs(l)>90&&Math.abs(l)<270&&(L?(a*=-1,l+=u<=0?180:-180,u+=u<=0?180:-180):(o*=-1,l+=l<=0?180:-180)),e=e||r.uncache,r.x=i-((r.xPercent=i&&(!e&&r.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-i)?-50:0)))?t.offsetWidth*r.xPercent/100:0)+I,r.y=n-((r.yPercent=n&&(!e&&r.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-n)?-50:0)))?t.offsetHeight*r.yPercent/100:0)+I,r.z=s+I,r.scaleX=gt(a),r.scaleY=gt(o),r.rotation=gt(u)+Y,r.rotationX=gt(h)+Y,r.rotationY=gt(f)+Y,r.skewX=l+Y,r.skewY=c+Y,r.transformPerspective=p+I,(r.zOrigin=parseFloat(U.split(" ")[2])||!e&&r.zOrigin||0)&&(B[ii]=Ri(U)),r.xOffset=r.yOffset=0,r.force3D=w.force3D,r.renderTransform=r.svg?Ui:Fr?Ni:Bi,r.uncache=0,r},Ri=function(t){return(t=t.split(" "))[0]+" "+t[1]},Fi=function(t,e,r){var i=te(e);return gt(parseFloat(e)+parseFloat(xi(t,"x",r+"px",i)))+i},Bi=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,Ni(t,e)},Li="0deg",Ii="0px",Yi=") ",Ni=function(t,e){var r=e||this,i=r.xPercent,n=r.yPercent,s=r.x,a=r.y,o=r.z,u=r.rotation,h=r.rotationY,f=r.rotationX,l=r.skewX,c=r.skewY,p=r.scaleX,_=r.scaleY,d=r.transformPerspective,m=r.force3D,g=r.target,v=r.zOrigin,y="",T="auto"===m&&t&&1!==t||!0===m;if(v&&(f!==Li||h!==Li)){var x,w=parseFloat(h)*Ir,b=Math.sin(w),O=Math.cos(w);w=parseFloat(f)*Ir,x=Math.cos(w),s=Fi(g,s,b*x*-v),a=Fi(g,a,-Math.sin(w)*-v),o=Fi(g,o,O*x*-v+v)}d!==Ii&&(y+="perspective("+d+Yi),(i||n)&&(y+="translate("+i+"%, "+n+"%) "),(T||s!==Ii||a!==Ii||o!==Ii)&&(y+=o!==Ii||T?"translate3d("+s+", "+a+", "+o+") ":"translate("+s+", "+a+Yi),u!==Li&&(y+="rotate("+u+Yi),h!==Li&&(y+="rotateY("+h+Yi),f!==Li&&(y+="rotateX("+f+Yi),l===Li&&c===Li||(y+="skew("+l+", "+c+Yi),1===p&&1===_||(y+="scale("+p+", "+_+Yi),g.style[ri]=y||"translate(0, 0)"},Ui=function(t,e){var r,i,n,s,a,o=e||this,u=o.xPercent,h=o.yPercent,f=o.x,l=o.y,c=o.rotation,p=o.skewX,_=o.skewY,d=o.scaleX,m=o.scaleY,g=o.target,v=o.xOrigin,y=o.yOrigin,T=o.xOffset,x=o.yOffset,w=o.forceCSS,b=parseFloat(f),O=parseFloat(l);c=parseFloat(c),p=parseFloat(p),(_=parseFloat(_))&&(p+=_=parseFloat(_),c+=_),c||p?(c*=Ir,p*=Ir,r=Math.cos(c)*d,i=Math.sin(c)*d,n=Math.sin(c-p)*-m,s=Math.cos(c-p)*m,p&&(_*=Ir,a=Math.tan(p-_),n*=a=Math.sqrt(1+a*a),s*=a,_&&(a=Math.tan(_),r*=a=Math.sqrt(1+a*a),i*=a)),r=gt(r),i=gt(i),n=gt(n),s=gt(s)):(r=d,s=m,i=n=0),(b&&!~(f+"").indexOf("px")||O&&!~(l+"").indexOf("px"))&&(b=xi(g,"x",f,"px"),O=xi(g,"y",l,"px")),(v||y||T||x)&&(b=gt(b+v-(v*r+y*n)+T),O=gt(O+y-(v*i+y*s)+x)),(u||h)&&(a=g.getBBox(),b=gt(b+u/100*a.width),O=gt(O+h/100*a.height)),a="matrix("+r+","+i+","+n+","+s+","+b+","+O+")",g.setAttribute("transform",a),w&&(g.style[ri]=a)},Xi=function(t,e,r,i,n){var s,a,o=360,u=P(n),h=parseFloat(n)*(u&&~n.indexOf("rad")?Lr:1)-i,f=i+h+"deg";return u&&("short"===(s=n.split("_")[1])&&(h%=o)!==h%180&&(h+=h<0?o:-360),"cw"===s&&h<0?h=(h+36e9)%o-~~(h/o)*o:"ccw"===s&&h>0&&(h=(h-36e9)%o-~~(h/o)*o)),t._pt=a=new _r(t._pt,e,r,i,h,jr),a.e=f,a.u="deg",t._props.push(r),a},qi=function(t,e){for(var r in e)t[r]=e[r];return t},Vi=function(t,e,r){var i,n,s,a,o,u,h,f=qi({},r._gsap),l=r.style;for(n in f.svg?(s=r.getAttribute("transform"),r.setAttribute("transform",""),l[ri]=e,i=zi(r,1),gi(r,ri),r.setAttribute("transform",s)):(s=getComputedStyle(r)[ri],l[ri]=e,i=zi(r,1),l[ri]=s),Br)(s=f[n])!==(a=i[n])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(n)<0&&(o=te(s)!==(h=te(a))?xi(r,n,s,h):parseFloat(s),u=parseFloat(a),t._pt=new _r(t._pt,i,n,o,u-o,Vr),t._pt.u=h||0,t._props.push(n));qi(i,f)};mt("padding,margin,Width,Radius",(function(t,e){var r="Top",i="Right",n="Bottom",s="Left",a=(e<3?[r,i,n,s]:[r+s,r+i,n+i,n+s]).map((function(r){return e<2?t+r:"border"+r+t}));ki[e>1?"border"+t:t]=function(t,e,r,i,n){var s,o;if(arguments.length<4)return s=a.map((function(e){return wi(t,e,r)})),5===(o=s.join(" ")).split(s[0]).length?s[0]:o;s=(i+"").split(" "),o={},a.forEach((function(t,e){return o[t]=s[e]=s[e]||s[(e-1)/2|0]})),t.init(e,o,n)}}));var ji,Gi,Wi,Qi={name:"css",register:ci,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,r,i,n){var s,a,o,u,h,f,l,c,p,_,d,m,g,v,y,T,x,b,O,M,k=this._props,A=t.style,C=r.vars.startAt;for(l in Sr||ci(),this.styles=this.styles||oi(t),T=this.styles.props,this.tween=r,e)if("autoRound"!==l&&(a=e[l],!ut[l]||!Qe(l,e,r,i,t,n)))if(h=typeof a,f=ki[l],"function"===h&&(h=typeof(a=a.call(r,i,t,n))),"string"===h&&~a.indexOf("random(")&&(a=ce(a)),f)f(this,t,l,a,r)&&(y=1);else if("--"===l.substr(0,2))s=(getComputedStyle(t).getPropertyValue(l)+"").trim(),a+="",Me.lastIndex=0,Me.test(s)||(c=te(s),p=te(a)),p?c!==p&&(s=xi(t,l,s,p)+p):c&&(a+=c),this.add(A,"setProperty",s,a,i,n,0,0,l),k.push(l),T.push(l,0,A[l]);else if("undefined"!==h){if(C&&l in C?(s="function"==typeof C[l]?C[l].call(r,i,t,n):C[l],P(s)&&~s.indexOf("random(")&&(s=ce(s)),te(s+"")||"auto"===s||(s+=w.units[l]||te(wi(t,l))||""),"="===(s+"").charAt(1)&&(s=wi(t,l))):s=wi(t,l),u=parseFloat(s),(_="string"===h&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),o=parseFloat(a),l in qr&&("autoAlpha"===l&&(1===u&&"hidden"===wi(t,"visibility")&&o&&(u=0),T.push("visibility",0,A.visibility),vi(this,A,"visibility",u?"inherit":"hidden",o?"inherit":"hidden",!o)),"scale"!==l&&"transform"!==l&&~(l=qr[l]).indexOf(",")&&(l=l.split(",")[0])),d=l in Br)if(this.styles.save(l),m||((g=t._gsap).renderTransform&&!e.parseTransform||zi(t,e.parseTransform),v=!1!==e.smoothOrigin&&g.smooth,(m=this._pt=new _r(this._pt,A,ri,0,1,g.renderTransform,g,0,-1)).dep=1),"scale"===l)this._pt=new _r(this._pt,g,"scaleY",g.scaleY,(_?yt(g.scaleY,_+o):o)-g.scaleY||0,Vr),this._pt.u=0,k.push("scaleY",l),l+="X";else{if("transformOrigin"===l){T.push(ii,0,A[ii]),b=void 0,O=void 0,M=void 0,b=(x=a).split(" "),O=b[0],M=b[1]||"50%","top"!==O&&"bottom"!==O&&"left"!==M&&"right"!==M||(x=O,O=M,M=x),b[0]=Oi[O]||O,b[1]=Oi[M]||M,a=b.join(" "),g.svg?Pi(t,a,0,v,0,this):((p=parseFloat(a.split(" ")[2])||0)!==g.zOrigin&&vi(this,g,"zOrigin",g.zOrigin,p),vi(this,A,l,Ri(s),Ri(a)));continue}if("svgOrigin"===l){Pi(t,a,1,v,0,this);continue}if(l in Ci){Xi(this,g,l,u,_?yt(u,_+a):a);continue}if("smoothOrigin"===l){vi(this,g,"smooth",g.smooth,a);continue}if("force3D"===l){g[l]=a;continue}if("transform"===l){Vi(this,a,t);continue}}else l in A||(l=li(l)||l);if(d||(o||0===o)&&(u||0===u)&&!Xr.test(a)&&l in A)o||(o=0),(c=(s+"").substr((u+"").length))!==(p=te(a)||(l in w.units?w.units[l]:c))&&(u=xi(t,l,s,p)),this._pt=new _r(this._pt,d?g:A,l,u,(_?yt(u,_+o):o)-u,d||"px"!==p&&"zIndex"!==l||!1===e.autoRound?Vr:Wr),this._pt.u=p||0,c!==p&&"%"!==p&&(this._pt.b=s,this._pt.r=Gr);else if(l in A)bi.call(this,t,l,s,_?_+a:a);else if(l in t)this.add(t,l,s||t[l],_?_+a:a,i,n);else if("parseTransform"!==l){J(l,a);continue}d||(l in A?T.push(l,0,A[l]):T.push(l,1,s||t[l])),k.push(l)}y&&pr(this)},render:function(t,e){if(e.tween._time||!Rr())for(var r=e._pt;r;)r.r(t,r.d),r=r._next;else e.styles.revert()},get:wi,aliases:qr,getSetter:function(t,e,r){var i=qr[e];return i&&i.indexOf(",")<0&&(e=i),e in Br&&e!==ii&&(t._gsap.x||wi(t,"x"))?r&&zr===r?"scale"===e?Kr:Jr:(zr=r||{})&&("scale"===e?ti:ei):t.style&&!F(t.style[e])?Zr:~e.indexOf("-")?$r:sr(t,e)},core:{_removeProperty:gi,_getMatrix:Si}};Ar.utils.checkPrefix=li,Ar.core.getStyleSaver=oi,Wi=mt((ji="x,y,z,scale,scaleX,scaleY,xPercent,yPercent")+","+(Gi="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){Br[t]=1})),mt(Gi,(function(t){w.units[t]="deg",Ci[t]=1})),qr[Wi[13]]=ji+","+Gi,mt("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");qr[e[1]]=Wi[e[0]]})),mt("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){w.units[t]="px"})),Ar.registerPlugin(Qi);var Hi=Ar.registerPlugin(Qi)||Ar;Hi.core.Tween}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,