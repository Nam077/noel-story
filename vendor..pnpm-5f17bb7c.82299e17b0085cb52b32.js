"use strict";(self.webpackChunkpixijs_game=self.webpackChunkpixijs_game||[]).push([[716],{6023:(t,e,n)=>{n.d(e,{E:()=>h});var i=n(7371),r=n(2597),s=n(2320);class a extends s.l{constructor(t,e){const{text:n,resolution:r,style:s,anchor:a,width:o,height:l,roundPixels:h,...d}=t;super({...d}),this.batched=!0,this._resolution=null,this._autoResolution=!0,this._didTextUpdate=!0,this._styleClass=e,this.text=n??"",this.style=s,this.resolution=r??null,this.allowChildren=!1,this._anchor=new i.o({_onUpdate:()=>{this.onViewUpdate()}}),a&&(this.anchor=a),this.roundPixels=h??!1,void 0!==o&&(this.width=o),void 0!==l&&(this.height=l)}get anchor(){return this._anchor}set anchor(t){"number"==typeof t?this._anchor.set(t):this._anchor.copyFrom(t)}set text(t){t=t.toString(),this._text!==t&&(this._text=t,this.onViewUpdate())}get text(){return this._text}set resolution(t){this._autoResolution=null===t,this._resolution=t,this.onViewUpdate()}get resolution(){return this._resolution}get style(){return this._style}set style(t){t||(t={}),this._style?.off("update",this.onViewUpdate,this),t instanceof this._styleClass?this._style=t:this._style=new this._styleClass(t),this._style.on("update",this.onViewUpdate,this),this.onViewUpdate()}get width(){return Math.abs(this.scale.x)*this.bounds.width}set width(t){this._setWidth(t,this.bounds.width)}get height(){return Math.abs(this.scale.y)*this.bounds.height}set height(t){this._setHeight(t,this.bounds.height)}getSize(t){return t||(t={}),t.width=Math.abs(this.scale.x)*this.bounds.width,t.height=Math.abs(this.scale.y)*this.bounds.height,t}setSize(t,e){"object"==typeof t?(e=t.height??t.width,t=t.width):e??(e=t),void 0!==t&&this._setWidth(t,this.bounds.width),void 0!==e&&this._setHeight(e,this.bounds.height)}containsPoint(t){const e=this.bounds.width,n=this.bounds.height,i=-e*this.anchor.x;let r=0;return t.x>=i&&t.x<=i+e&&(r=-n*this.anchor.y,t.y>=r&&t.y<=r+n)}onViewUpdate(){this.didViewUpdate||(this._didTextUpdate=!0),super.onViewUpdate()}_getKey(){return`${this.text}:${this._style.styleKey}:${this._resolution}`}destroy(t=!1){super.destroy(t),this.owner=null,this._bounds=null,this._anchor=null,("boolean"==typeof t?t:t?.style)&&this._style.destroy(t),this._style=null,this._text=null}}var o=n(5315),l=n(9914);class h extends a{constructor(...t){const e=function(t,e){let n=t[0]??{};return("string"==typeof n||t[1])&&((0,r.t6)(r.lj,`use new ${e}({ text: "hi!", style }) instead`),n={text:n,style:t[1]}),n}(t,"Text");super(e,l.x),this.renderPipeId="text"}updateBounds(){const t=this._bounds,e=this._anchor,n=o.P.measureText(this._text,this._style),{width:i,height:r}=n;t.minX=-e._x*i,t.maxX=t.minX+i,t.minY=-e._y*r,t.maxY=t.minY+r}}},9914:(t,e,n)=>{n.d(e,{x:()=>c});var i=n(413),r=n(1598),s=n(2597),a=n(1639),o=n(8187),l=n(4023),h=n(8785),d=n(9088);const u=class t extends i.A{constructor(e={}){super(),function(t){const e=t;if("boolean"==typeof e.dropShadow&&e.dropShadow){const n=c.defaultDropShadow;t.dropShadow={alpha:e.dropShadowAlpha??n.alpha,angle:e.dropShadowAngle??n.angle,blur:e.dropShadowBlur??n.blur,color:e.dropShadowColor??n.color,distance:e.dropShadowDistance??n.distance}}if(void 0!==e.strokeThickness){(0,s.t6)(s.lj,"strokeThickness is now a part of stroke");const n=e.stroke;let i={};if(r.Q.isColorLike(n))i.color=n;else if(n instanceof a._||n instanceof o.m)i.fill=n;else{if(!Object.hasOwnProperty.call(n,"color")&&!Object.hasOwnProperty.call(n,"fill"))throw new Error("Invalid stroke value.");i=n}t.stroke={...i,width:e.strokeThickness}}if(Array.isArray(e.fillGradientStops)){let n;(0,s.t6)(s.lj,"gradient fill is now a fill pattern: `new FillGradient(...)`"),null==t.fontSize?t.fontSize=c.defaultTextStyle.fontSize:n="string"==typeof t.fontSize?parseInt(t.fontSize,10):t.fontSize;const i=new a._(0,0,0,1.7*n),o=e.fillGradientStops.map((t=>r.Q.shared.setValue(t).toNumber()));o.forEach(((t,e)=>{const n=e/(o.length-1);i.addColorStop(n,t)})),t.fill={fill:i}}}(e);const n={...t.defaultTextStyle,...e};for(const t in n){this[t]=n[t]}this.update()}get align(){return this._align}set align(t){this._align=t,this.update()}get breakWords(){return this._breakWords}set breakWords(t){this._breakWords=t,this.update()}get dropShadow(){return this._dropShadow}set dropShadow(e){this._dropShadow=null!==e&&"object"==typeof e?this._createProxy({...t.defaultDropShadow,...e}):e?this._createProxy({...t.defaultDropShadow}):null,this.update()}get fontFamily(){return this._fontFamily}set fontFamily(t){this._fontFamily=t,this.update()}get fontSize(){return this._fontSize}set fontSize(t){this._fontSize="string"==typeof t?parseInt(t,10):t,this.update()}get fontStyle(){return this._fontStyle}set fontStyle(t){this._fontStyle=t.toLowerCase(),this.update()}get fontVariant(){return this._fontVariant}set fontVariant(t){this._fontVariant=t,this.update()}get fontWeight(){return this._fontWeight}set fontWeight(t){this._fontWeight=t,this.update()}get leading(){return this._leading}set leading(t){this._leading=t,this.update()}get letterSpacing(){return this._letterSpacing}set letterSpacing(t){this._letterSpacing=t,this.update()}get lineHeight(){return this._lineHeight}set lineHeight(t){this._lineHeight=t,this.update()}get padding(){return this._padding}set padding(t){this._padding=t,this.update()}get trim(){return this._trim}set trim(t){this._trim=t,this.update()}get textBaseline(){return this._textBaseline}set textBaseline(t){this._textBaseline=t,this.update()}get whiteSpace(){return this._whiteSpace}set whiteSpace(t){this._whiteSpace=t,this.update()}get wordWrap(){return this._wordWrap}set wordWrap(t){this._wordWrap=t,this.update()}get wordWrapWidth(){return this._wordWrapWidth}set wordWrapWidth(t){this._wordWrapWidth=t,this.update()}get fill(){return this._originalFill}set fill(t){t!==this._originalFill&&(this._originalFill=t,this._isFillStyle(t)&&(this._originalFill=this._createProxy({...l.T.defaultFillStyle,...t},(()=>{this._fill=(0,h.w)({...this._originalFill},l.T.defaultFillStyle)}))),this._fill=(0,h.w)(0===t?"black":t,l.T.defaultFillStyle),this.update())}get stroke(){return this._originalStroke}set stroke(t){t!==this._originalStroke&&(this._originalStroke=t,this._isFillStyle(t)&&(this._originalStroke=this._createProxy({...l.T.defaultStrokeStyle,...t},(()=>{this._stroke=(0,h.T)({...this._originalStroke},l.T.defaultStrokeStyle)}))),this._stroke=(0,h.T)(t,l.T.defaultStrokeStyle),this.update())}_generateKey(){return this._styleKey=(0,d.V)(this),this._styleKey}update(){this._styleKey=null,this.emit("update",this)}reset(){const e=t.defaultTextStyle;for(const t in e)this[t]=e[t]}get styleKey(){return this._styleKey||this._generateKey()}clone(){return new t({align:this.align,breakWords:this.breakWords,dropShadow:this._dropShadow?{...this._dropShadow}:null,fill:this._fill,fontFamily:this.fontFamily,fontSize:this.fontSize,fontStyle:this.fontStyle,fontVariant:this.fontVariant,fontWeight:this.fontWeight,leading:this.leading,letterSpacing:this.letterSpacing,lineHeight:this.lineHeight,padding:this.padding,stroke:this._stroke,textBaseline:this.textBaseline,whiteSpace:this.whiteSpace,wordWrap:this.wordWrap,wordWrapWidth:this.wordWrapWidth})}destroy(t=!1){this.removeAllListeners();if("boolean"==typeof t?t:t?.texture){const e="boolean"==typeof t?t:t?.textureSource;this._fill?.texture&&this._fill.texture.destroy(e),this._originalFill?.texture&&this._originalFill.texture.destroy(e),this._stroke?.texture&&this._stroke.texture.destroy(e),this._originalStroke?.texture&&this._originalStroke.texture.destroy(e)}this._fill=null,this._stroke=null,this.dropShadow=null,this._originalStroke=null,this._originalFill=null}_createProxy(t,e){return new Proxy(t,{set:(t,n,i)=>(t[n]=i,e?.(n,i),this.update(),!0)})}_isFillStyle(t){return null!==(t??null)&&!(r.Q.isColorLike(t)||t instanceof a._||t instanceof o.m)}};u.defaultDropShadow={alpha:1,angle:Math.PI/6,blur:0,color:"black",distance:5},u.defaultTextStyle={align:"left",breakWords:!1,dropShadow:null,fill:"black",fontFamily:"Arial",fontSize:26,fontStyle:"normal",fontVariant:"normal",fontWeight:"normal",leading:0,letterSpacing:0,lineHeight:0,padding:0,stroke:null,textBaseline:"alphabetic",trim:!1,whiteSpace:"pre",wordWrap:!1,wordWrapWidth:100};let c=u},5315:(t,e,n)=>{n.d(e,{P:()=>o});var i=n(4184),r=n(1425);const s={willReadFrequently:!0},a=class t{static get experimentalLetterSpacingSupported(){let e=t._experimentalLetterSpacingSupported;if(void 0!==e){const n=i.e.get().getCanvasRenderingContext2D().prototype;e=t._experimentalLetterSpacingSupported="letterSpacing"in n||"textLetterSpacing"in n}return e}constructor(t,e,n,i,r,s,a,o,l){this.text=t,this.style=e,this.width=n,this.height=i,this.lines=r,this.lineWidths=s,this.lineHeight=a,this.maxLineWidth=o,this.fontProperties=l}static measureText(e=" ",n,i=t._canvas,s=n.wordWrap){const a=`${e}:${n.styleKey}`;if(t._measurementCache[a])return t._measurementCache[a];const o=(0,r.Z)(n),l=t.measureFont(o);0===l.fontSize&&(l.fontSize=n.fontSize,l.ascent=n.fontSize);const h=t.__context;h.font=o;const d=(s?t._wordWrap(e,n,i):e).split(/(?:\r\n|\r|\n)/),u=new Array(d.length);let c=0;for(let e=0;e<d.length;e++){const i=t._measureText(d[e],n.letterSpacing,h);u[e]=i,c=Math.max(c,i)}const p=n._stroke?.width||0;let f=c+p;n.dropShadow&&(f+=n.dropShadow.distance);const g=n.lineHeight||l.fontSize;let _=Math.max(g,l.fontSize+p)+(d.length-1)*(g+n.leading);n.dropShadow&&(_+=n.dropShadow.distance);return new t(e,n,f,_,d,u,g+n.leading,c,l)}static _measureText(e,n,i){let r=!1;t.experimentalLetterSpacingSupported&&(t.experimentalLetterSpacing?(i.letterSpacing=`${n}px`,i.textLetterSpacing=`${n}px`,r=!0):(i.letterSpacing="0px",i.textLetterSpacing="0px"));const s=i.measureText(e);let a=s.width;const o=-s.actualBoundingBoxLeft;let l=s.actualBoundingBoxRight-o;if(a>0)if(r)a-=n,l-=n;else{const i=(t.graphemeSegmenter(e).length-1)*n;a+=i,l+=i}return Math.max(a,l)}static _wordWrap(e,n,i=t._canvas){const r=i.getContext("2d",s);let a=0,o="",l="";const h=Object.create(null),{letterSpacing:d,whiteSpace:u}=n,c=t._collapseSpaces(u),p=t._collapseNewlines(u);let f=!c;const g=n.wordWrapWidth+d,_=t._tokenize(e);for(let e=0;e<_.length;e++){let i=_[e];if(t._isNewline(i)){if(!p){l+=t._addLine(o),f=!c,o="",a=0;continue}i=" "}if(c){const e=t.isBreakingSpace(i),n=t.isBreakingSpace(o[o.length-1]);if(e&&n)continue}const s=t._getFromCache(i,d,h,r);if(s>g)if(""!==o&&(l+=t._addLine(o),o="",a=0),t.canBreakWords(i,n.breakWords)){const e=t.wordWrapSplit(i);for(let s=0;s<e.length;s++){let u=e[s],c=u,p=1;for(;e[s+p];){const r=e[s+p];if(t.canBreakChars(c,r,i,s,n.breakWords))break;u+=r,c=r,p++}s+=p-1;const _=t._getFromCache(u,d,h,r);_+a>g&&(l+=t._addLine(o),f=!1,o="",a=0),o+=u,a+=_}}else{o.length>0&&(l+=t._addLine(o),o="",a=0);const n=e===_.length-1;l+=t._addLine(i,!n),f=!1,o="",a=0}else s+a>g&&(f=!1,l+=t._addLine(o),o="",a=0),(o.length>0||!t.isBreakingSpace(i)||f)&&(o+=i,a+=s)}return l+=t._addLine(o,!1),l}static _addLine(e,n=!0){return e=t._trimRight(e),e=n?`${e}\n`:e}static _getFromCache(e,n,i,r){let s=i[e];return"number"!=typeof s&&(s=t._measureText(e,n,r)+n,i[e]=s),s}static _collapseSpaces(t){return"normal"===t||"pre-line"===t}static _collapseNewlines(t){return"normal"===t}static _trimRight(e){if("string"!=typeof e)return"";for(let n=e.length-1;n>=0;n--){const i=e[n];if(!t.isBreakingSpace(i))break;e=e.slice(0,-1)}return e}static _isNewline(e){return"string"==typeof e&&t._newlines.includes(e.charCodeAt(0))}static isBreakingSpace(e,n){return"string"==typeof e&&t._breakingSpaces.includes(e.charCodeAt(0))}static _tokenize(e){const n=[];let i="";if("string"!=typeof e)return n;for(let r=0;r<e.length;r++){const s=e[r],a=e[r+1];t.isBreakingSpace(s,a)||t._isNewline(s)?(""!==i&&(n.push(i),i=""),n.push(s)):i+=s}return""!==i&&n.push(i),n}static canBreakWords(t,e){return e}static canBreakChars(t,e,n,i,r){return!0}static wordWrapSplit(e){return t.graphemeSegmenter(e)}static measureFont(e){if(t._fonts[e])return t._fonts[e];const n=t._context;n.font=e;const i=n.measureText(t.METRICS_STRING+t.BASELINE_SYMBOL),r={ascent:i.actualBoundingBoxAscent,descent:i.actualBoundingBoxDescent,fontSize:i.actualBoundingBoxAscent+i.actualBoundingBoxDescent};return t._fonts[e]=r,r}static clearMetrics(e=""){e?delete t._fonts[e]:t._fonts={}}static get _canvas(){if(!t.__canvas){let e;try{const n=new OffscreenCanvas(0,0),r=n.getContext("2d",s);if(r?.measureText)return t.__canvas=n,n;e=i.e.get().createCanvas()}catch(t){e=i.e.get().createCanvas()}e.width=e.height=10,t.__canvas=e}return t.__canvas}static get _context(){return t.__context||(t.__context=t._canvas.getContext("2d",s)),t.__context}};a.METRICS_STRING="|ÉqÅ",a.BASELINE_SYMBOL="M",a.BASELINE_MULTIPLIER=1.4,a.HEIGHT_MULTIPLIER=2,a.graphemeSegmenter=(()=>{if("function"==typeof Intl?.Segmenter){const t=new Intl.Segmenter;return e=>[...t.segment(e)].map((t=>t.segment))}return t=>[...t]})(),a.experimentalLetterSpacing=!1,a._fonts={},a._newlines=[10,13],a._breakingSpaces=[9,32,8192,8193,8194,8195,8196,8197,8198,8200,8201,8202,8287,12288],a._measurementCache={};let o=a},1425:(t,e,n)=>{n.d(e,{Z:()=>r});const i=["serif","sans-serif","monospace","cursive","fantasy","system-ui"];function r(t){const e="number"==typeof t.fontSize?`${t.fontSize}px`:t.fontSize;let n=t.fontFamily;Array.isArray(t.fontFamily)||(n=t.fontFamily.split(","));for(let t=n.length-1;t>=0;t--){let e=n[t].trim();/([\"\'])[^\'\"]+\1/.test(e)||i.includes(e)||(e=`"${e}"`),n[t]=e}return`${t.fontStyle} ${t.fontVariant} ${t.fontWeight} ${e} ${n.join(",")}`}},3605:(t,e,n)=>{n.d(e,{r:()=>h});var i=n(1598),r=n(1026),s=n(8554),a=n(8273),o=n(1639),l=n(8187);function h(t,e){if(t.texture===s.g.WHITE&&!t.fill)return i.Q.shared.setValue(t.color).setAlpha(t.alpha??1).toHexa();if(!t.fill){const n=e.createPattern(t.texture.source.resource,"repeat"),i=t.matrix.copyTo(r.u.shared);return i.scale(t.texture.frame.width,t.texture.frame.height),n.setTransform(i),n}if(t.fill instanceof l.m){const n=t.fill,i=e.createPattern(n.texture.source.resource,"repeat"),s=n.transform.copyTo(r.u.shared);return s.scale(n.texture.frame.width,n.texture.frame.height),i.setTransform(s),i}if(t.fill instanceof o._){const n=t.fill;if("linear"===n.type){const t=e.createLinearGradient(n.x0,n.y0,n.x1,n.y1);return n.gradientStops.forEach((e=>{t.addColorStop(e.offset,i.Q.shared.setValue(e.color).toHex())})),t}}return(0,a.R)("FillStyle not recognised",t),"red"}},6578:(t,e,n)=>{var i=n(9084),r=n(4579),s=n(8143),a=n(5235);class o{constructor(t){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=t,this._renderer.runners.resolutionChange.add(this),this._renderer.renderableGC.addManagedHash(this,"_gpuText")}resolutionChange(){for(const t in this._gpuText){const e=this._gpuText[t];if(!e)continue;const n=e.batchableSprite.renderable;n._autoResolution&&(n._resolution=this._renderer.resolution,n.onViewUpdate())}}validateRenderable(t){const e=this._getGpuText(t),n=t._getKey();return e.currentKey!==n}addRenderable(t,e){const n=this._getGpuText(t).batchableSprite;t._didTextUpdate&&this._updateText(t),this._renderer.renderPipes.batch.addToBatch(n,e)}updateRenderable(t){const e=this._getGpuText(t).batchableSprite;t._didTextUpdate&&this._updateText(t),e._batcher.updateElement(e)}destroyRenderable(t){t.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(t.uid)}_destroyRenderableById(t){const e=this._gpuText[t];this._renderer.canvasText.decreaseReferenceCount(e.currentKey),s.Z.return(e.batchableSprite),this._gpuText[t]=null}_updateText(t){const e=t._getKey(),n=this._getGpuText(t),i=n.batchableSprite;n.currentKey!==e&&this._updateGpuText(t),t._didTextUpdate=!1;const s=t._style.padding;(0,r.y)(i.bounds,t._anchor,i.texture,s)}_updateGpuText(t){const e=this._getGpuText(t),n=e.batchableSprite;e.texture&&this._renderer.canvasText.decreaseReferenceCount(e.currentKey),e.texture=n.texture=this._renderer.canvasText.getManagedTexture(t),e.currentKey=t._getKey(),n.texture=e.texture}_getGpuText(t){return this._gpuText[t.uid]||this.initGpuText(t)}initGpuText(t){const e={texture:null,currentKey:"--",batchableSprite:s.Z.get(a.K)};return e.batchableSprite.renderable=t,e.batchableSprite.transform=t.groupTransform,e.batchableSprite.bounds={minX:0,maxX:1,minY:0,maxY:0},e.batchableSprite.roundPixels=this._renderer._roundPixels|t._roundPixels,this._gpuText[t.uid]=e,t._resolution=t._autoResolution?this._renderer.resolution:t.resolution,this._updateText(t),t.on("destroyed",this._destroyRenderableBound),e}destroy(){for(const t in this._gpuText)this._destroyRenderableById(t);this._gpuText=null,this._renderer=null}}o.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"text"};var l=n(1598),h=n(3932),d=n(1875),u=n(1448),c=n(6805),p=n(2597),f=n(9914),g=n(5331),_=n(5315),m=n(1425),x=n(3605);class S{constructor(t){this._activeTextures={},this._renderer=t}getTextureSize(t,e,n){const i=_.P.measureText(t||" ",n);let r=Math.ceil(Math.ceil(Math.max(1,i.width)+2*n.padding)*e),s=Math.ceil(Math.ceil(Math.max(1,i.height)+2*n.padding)*e);return r=Math.ceil(r-1e-6),s=Math.ceil(s-1e-6),r=(0,h.U5)(r),s=(0,h.U5)(s),{width:r,height:s}}getTexture(t,e,n,i){"string"==typeof t&&((0,p.t6)("8.0.0","CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments"),t={text:t,style:n,resolution:e}),t.style instanceof f.x||(t.style=new f.x(t.style));const{texture:r,canvasAndContext:s}=this.createTextureAndCanvas(t);return this._renderer.texture.initSource(r._source),d.N.returnCanvasAndContext(s),r}createTextureAndCanvas(t){const{text:e,style:n}=t,i=t.resolution??this._renderer.resolution,r=_.P.measureText(e||" ",n),s=Math.ceil(Math.ceil(Math.max(1,r.width)+2*n.padding)*i),a=Math.ceil(Math.ceil(Math.max(1,r.height)+2*n.padding)*i),o=d.N.getOptimalCanvasAndContext(s,a),{canvas:l}=o;this.renderTextToCanvas(e,n,i,o);const h=(0,g.M)(l,s,a,i);if(n.trim){const t=(0,c.m)(l,i);h.frame.copyFrom(t),h.updateUvs()}return{texture:h,canvasAndContext:o}}getManagedTexture(t){t._resolution=t._autoResolution?this._renderer.resolution:t.resolution;const e=t._getKey();if(this._activeTextures[e])return this._increaseReferenceCount(e),this._activeTextures[e].texture;const{texture:n,canvasAndContext:i}=this.createTextureAndCanvas(t);return this._activeTextures[e]={canvasAndContext:i,texture:n,usageCount:1},n}_increaseReferenceCount(t){this._activeTextures[t].usageCount++}decreaseReferenceCount(t){const e=this._activeTextures[t];if(e.usageCount--,0===e.usageCount){d.N.returnCanvasAndContext(e.canvasAndContext),u.W.returnTexture(e.texture);const n=e.texture.source;n.resource=null,n.uploadMethodId="unknown",n.alphaMode="no-premultiply-alpha",this._activeTextures[t]=null}}getReferenceCount(t){return this._activeTextures[t].usageCount}renderTextToCanvas(t,e,n,i){const{canvas:r,context:s}=i,a=(0,m.Z)(e),o=_.P.measureText(t||" ",e),h=o.lines,d=o.lineHeight,u=o.lineWidths,c=o.maxLineWidth,p=o.fontProperties,f=r.height;if(s.resetTransform(),s.scale(n,n),s.textBaseline=e.textBaseline,e._stroke?.width){const t=e._stroke;s.lineWidth=t.width,s.miterLimit=t.miterLimit,s.lineJoin=t.join,s.lineCap=t.cap}let g,S;s.font=a;const y=e.dropShadow?2:1;for(let t=0;t<y;++t){const r=e.dropShadow&&0===t,a=r?Math.ceil(Math.max(1,f)+2*e.padding):0,o=a*n;if(r){s.fillStyle="black",s.strokeStyle="black";const t=e.dropShadow,i=t.color,r=t.alpha;s.shadowColor=l.Q.shared.setValue(i).setAlpha(r).toRgbaString();const a=t.blur*n,h=t.distance*n;s.shadowBlur=a,s.shadowOffsetX=Math.cos(t.angle)*h,s.shadowOffsetY=Math.sin(t.angle)*h+o}else s.fillStyle=e._fill?(0,x.r)(e._fill,s):null,e._stroke?.width&&(s.strokeStyle=(0,x.r)(e._stroke,s)),s.shadowColor="black";let _=(d-p.fontSize)/2;d-p.fontSize<0&&(_=0);const m=e._stroke?.width??0;for(let t=0;t<h.length;t++)g=m/2,S=m/2+t*d+p.ascent+_,"right"===e.align?g+=c-u[t]:"center"===e.align&&(g+=(c-u[t])/2),e._stroke?.width&&this._drawLetterSpacing(h[t],e,i,g+e.padding,S+e.padding-a,!0),void 0!==e._fill&&this._drawLetterSpacing(h[t],e,i,g+e.padding,S+e.padding-a)}}_drawLetterSpacing(t,e,n,i,r,s=!1){const{context:a}=n,o=e.letterSpacing;let l=!1;if(_.P.experimentalLetterSpacingSupported&&(_.P.experimentalLetterSpacing?(a.letterSpacing=`${o}px`,a.textLetterSpacing=`${o}px`,l=!0):(a.letterSpacing="0px",a.textLetterSpacing="0px")),0===o||l)return void(s?a.strokeText(t,i,r):a.fillText(t,i,r));let h=i;const d=_.P.graphemeSegmenter(t);let u=a.measureText(t).width,c=0;for(let t=0;t<d.length;++t){const e=d[t];s?a.strokeText(e,h,r):a.fillText(e,h,r);let n="";for(let e=t+1;e<d.length;++e)n+=d[e];c=a.measureText(n).width,h+=u-c+o,u=c}}destroy(){this._activeTextures=null}}S.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem,i.Ag.CanvasSystem],name:"canvasText"},i.XO.add(S),i.XO.add(o)},3521:(t,e,n)=>{n.d(e,{$:()=>x});var i=n(1026),r=n(3490),s=n(684),a=n(9278),o=n(7955),l=n(2152),h=n(2137),d=n(5106),u=n(6524);const c={name:"local-uniform-msdf-bit",vertex:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "},fragment:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         ",main:" \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        "}},p={name:"local-uniform-msdf-bit",vertex:{header:"\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "},fragment:{header:"\n            uniform float uDistance;\n         ",main:" \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        "}},f={name:"msdf-bit",fragment:{header:"\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        "}},g={name:"msdf-bit",fragment:{header:"\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        "}};let _,m;class x extends d.M{constructor(){const t=new u.k({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new i.u,type:"mat3x3<f32>"},uDistance:{value:4,type:"f32"},uRound:{value:0,type:"f32"}}),e=(0,r.a)();_??(_=(0,s.v)({name:"sdf-shader",bits:[a.F,(0,o._)(e),c,f,l.b]})),m??(m=(0,s.I)({name:"sdf-shader",bits:[a.a,(0,o.P)(e),p,g,l.m]})),super({glProgram:m,gpuProgram:_,resources:{localUniforms:t,batchSamplers:(0,h.n)(e)}})}}},9088:(t,e,n)=>{n.d(e,{V:()=>s});var i=n(1598);const r=["align","breakWords","cssOverrides","fontVariant","fontWeight","leading","letterSpacing","lineHeight","padding","textBaseline","trim","whiteSpace","wordWrap","wordWrapWidth","fontFamily","fontStyle","fontSize"];function s(t){const e=[];let n=0;for(let i=0;i<r.length;i++){const s=`_${r[i]}`;e[n++]=t[s]}return n=a(t._fill,e,n),n=function(t,e,n){return t?(n=a(t,e,n),e[n++]=t.width,e[n++]=t.alignment,e[n++]=t.cap,e[n++]=t.join,e[n++]=t.miterLimit,n):n}(t._stroke,e,n),n=function(t,e,n){return t?(e[n++]=t.alpha,e[n++]=t.angle,e[n++]=t.blur,e[n++]=t.distance,e[n++]=i.Q.shared.setValue(t.color).toNumber(),n):n}(t.dropShadow,e,n),e.join("-")}function a(t,e,n){return t?(e[n++]=t.color,e[n++]=t.alpha,e[n++]=t.fill?.styleKey,n):n}},5331:(t,e,n)=>{n.d(e,{M:()=>s});var i=n(1448);const r=new(n(3475).c);function s(t,e,n,s){const a=r;a.minX=0,a.minY=0,a.maxX=t.width/s|0,a.maxY=t.height/s|0;const o=i.W.getOptimalTexture(a.width,a.height,s,!1);return o.source.uploadMethodId="image",o.source.resource=t,o.source.alphaMode="premultiply-alpha-on-upload",o.frame.width=e/s,o.frame.height=n/s,o.source.emit("update",o.source),o.updateUvs(),o}},2320:(t,e,n)=>{n.d(e,{l:()=>s});var i=n(3475),r=n(9032);class s extends r.mc{constructor(){super(...arguments),this.canBundle=!0,this.allowChildren=!1,this._roundPixels=0,this._lastUsed=0,this._lastInstructionTick=-1,this._bounds=new i.c(0,1,0,0),this._boundsDirty=!0}get bounds(){return this._boundsDirty?(this.updateBounds(),this._boundsDirty=!1,this._bounds):this._bounds}get roundPixels(){return!!this._roundPixels}set roundPixels(t){this._roundPixels=t?1:0}containsPoint(t){const e=this.bounds,{x:n,y:i}=t;return n>=e.minX&&n<=e.maxX&&i>=e.minY&&i<=e.maxY}onViewUpdate(){if(this._didViewChangeTick++,this._boundsDirty=!0,this.didViewUpdate)return;this.didViewUpdate=!0;const t=this.renderGroup||this.parentRenderGroup;t&&t.onChildViewUpdate(this)}destroy(t){super.destroy(t),this._bounds=null}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,