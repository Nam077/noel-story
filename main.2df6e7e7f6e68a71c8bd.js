"use strict";(self.webpackChunkpixijs_game=self.webpackChunkpixijs_game||[]).push([[792],{5093:(t,i,e)=>{var s,n=e(3423);!function(t){t[t.Rectangle=0]="Rectangle",t[t.RoundedRectangle=1]="RoundedRectangle",t[t.Circle=2]="Circle",t[t.Square=3]="Square"}(s||(s={}));class h extends n.mcf{constructor(t){super(),this.padding=8,this.arrowHeight=6,this.colors={background:3355443,text:16777215},this.text=new n.EYj({text:t,style:{fontFamily:"Roboto",fontSize:12,fill:this.colors.text,align:"center"}}),this.background=new n.A1g,this.addChild(this.background),this.addChild(this.text),this.visible=!1,this.draw()}draw(){const t=this.text.getBounds(),i=t.width+2*this.padding,e=t.height+2*this.padding;this.text.position.set(this.padding,this.padding),this.background.clear(),this.background.setFillStyle({color:this.colors.background}),this.background.beginPath(),this.background.roundRect(0,0,i,e,4),this.background.moveTo(i/2-5,e),this.background.lineTo(i/2,e+this.arrowHeight),this.background.lineTo(i/2+5,e),this.background.fill(),this.pivot.set(i/2,e+this.arrowHeight)}show(){this.visible=!0}hide(){this.visible=!1}updateText(t){this.text.text=t,this.draw()}setColors(t,i){this.colors.background=t,this.colors.text=i,this.text.style.fill=i,this.draw()}}class o extends n.mcf{calculateDimensions(t,i){const e=this.labelText.getBounds(),n=2*this.padding,h=e.width+n,o=e.height+n;if(this.shape===s.Circle){const t=Math.max(h,o);this.originalWidth=t,this.originalHeight=t}else if(this.shape===s.Square){const t=Math.max(h,o);this.originalWidth=t,this.originalHeight=t}else this.originalWidth=Math.max(t,h),this.originalHeight=Math.max(i,o)}constructor(t,i={}){super(),this.isPressed=!1,this.colors={default:5025616,hover:6732650,pressed:3706428,border:16777215},this.borderWidth=2,this.padding=20,this.tooltipOffset=-10;const{shape:e=s.Rectangle,width:o=120,height:a=40,borderColor:r,backgroundColor:l,padding:c=20,textStyle:d={},tooltipText:g,onClick:u,onHover:p,onOut:m,onDown:w,onUp:x,borderWidth:y=2}=i;if(this.padding=c,this.shape=e,this.onClick=u,this.onHover=p,this.onOut=m,this.onDown=w,this.onUp=x,r&&(this.colors.border=r),l&&(this.colors.default=l,this.colors.hover=this.adjustColor(l,20),this.colors.pressed=this.adjustColor(l,-20)),this.labelText=new n.EYj({text:t,style:Object.assign({fontFamily:"Roboto",fontSize:16,fill:16777215,align:"center"},d)}),this.labelText.anchor.set(.5),this.shape===s.Circle){const t=this.labelText.getBounds(),i=Math.max(t.width+this.padding,t.height+this.padding);this.calculateDimensions(i,i)}else this.calculateDimensions(o,a);this.background=new n.A1g,this.drawBackground(this.colors.default),this.centerText(),this.addChild(this.background),this.addChild(this.labelText),this.pivot.set(this.originalWidth/2,this.originalHeight/2),this.position.set(this.originalWidth/2,this.originalHeight/2),this.eventMode="static",this.cursor="pointer",this.on("pointerdown",this.onButtonDown.bind(this)).on("pointerup",this.onButtonUp.bind(this)).on("pointerupoutside",this.onButtonUp.bind(this)).on("pointerover",this.onButtonOver.bind(this)).on("pointerout",this.onButtonOut.bind(this)),g&&(this.tooltip=new h(g),this.tooltip.position.set(this.originalWidth/2,this.tooltipOffset),this.addChild(this.tooltip)),this.on("pointerover",(()=>{var t;this.onButtonOver(),null===(t=this.tooltip)||void 0===t||t.show()})),this.on("pointerout",(()=>{var t;this.onButtonOut(),null===(t=this.tooltip)||void 0===t||t.hide()})),this.borderWidth=y}centerText(){this.labelText.position.set(this.originalWidth/2,this.originalHeight/2)}drawBackground(t){switch(this.background.clear(),this.background.setStrokeStyle({width:this.borderWidth,color:this.colors.border}),this.background.setFillStyle({color:t}),this.shape){case s.Rectangle:this.background.rect(0,0,this.originalWidth,this.originalHeight);break;case s.RoundedRectangle:this.background.roundRect(0,0,this.originalWidth,this.originalHeight,10);break;case s.Circle:const t=Math.min(this.originalWidth,this.originalHeight)/2;this.background.circle(this.originalWidth/2,this.originalHeight/2,t);break;case s.Square:const i=Math.min(this.originalWidth,this.originalHeight);this.background.rect(0,0,i,i)}this.background.fill(),this.background.stroke()}onButtonDown(){var t;this.isPressed=!0,this.drawBackground(this.colors.pressed),this.scale.set(.95),null===(t=this.onDown)||void 0===t||t.call(this)}onButtonUp(){var t,i;this.isPressed&&(this.isPressed=!1,this.drawBackground(this.colors.default),this.scale.set(1),null===(t=this.onUp)||void 0===t||t.call(this),null===(i=this.onClick)||void 0===i||i.call(this))}onButtonOver(){var t;this.isPressed||(this.drawBackground(this.colors.hover),null===(t=this.onHover)||void 0===t||t.call(this))}onButtonOut(){var t;this.isPressed||(this.drawBackground(this.colors.default),null===(t=this.onOut)||void 0===t||t.call(this))}getWidth(){return this.originalWidth}getHeight(){return this.originalHeight}setBorder(t,i=2){this.colors.border=t,this.borderWidth=i,this.drawBackground(this.isPressed?this.colors.pressed:this.colors.default)}setCallbacks(t){Object.assign(this,t)}setWidth(t){this.originalWidth=t,this.drawBackground(this.isPressed?this.colors.pressed:this.colors.default),this.centerText(),this.pivot.set(this.originalWidth/2,this.originalHeight/2),this.position.set(this.position.x,this.position.y)}setHeight(t){this.originalHeight=t,this.drawBackground(this.isPressed?this.colors.pressed:this.colors.default),this.centerText(),this.pivot.set(this.originalWidth/2,this.originalHeight/2),this.position.set(this.position.x,this.position.y)}setSize(t,i){this.calculateDimensions(t,i),this.drawBackground(this.isPressed?this.colors.pressed:this.colors.default),this.centerText(),this.pivot.set(this.originalWidth/2,this.originalHeight/2),this.position.set(this.position.x,this.position.y)}setPosition(t,i){this.position.set(t+this.originalWidth/2,i+this.originalHeight/2)}setPositionFromCenter(t,i){this.position.set(t,i)}getPosition(){return{x:this.position.x-this.originalWidth/2,y:this.position.y-this.originalHeight/2}}getCenterPosition(){return{x:this.position.x,y:this.position.y}}setTooltip(t){this.tooltip?this.tooltip.updateText(t):(this.tooltip=new h(t),this.tooltip.position.set(this.originalWidth/2,this.tooltipOffset),this.addChild(this.tooltip))}hideTooltip(){var t;null===(t=this.tooltip)||void 0===t||t.hide()}showTooltip(){var t;null===(t=this.tooltip)||void 0===t||t.show()}setTextStyle(t){Object.assign(this.labelText.style,t),this.calculateDimensions(this.originalWidth,this.originalHeight),this.drawBackground(this.isPressed?this.colors.pressed:this.colors.default),this.centerText()}adjustColor(t,i){const e=t>>16&255,s=t>>8&255,n=255&t,h=Math.floor(i/100*255);return Math.min(255,Math.max(0,e+h))<<16|Math.min(255,Math.max(0,s+h))<<8|Math.min(255,Math.max(0,n+h))}}class a extends n.mcf{constructor(t=5,i,e){super(),this.originalAcceptPos={x:0,y:0},this.isHovering=!1,this.teasingCount=0,this.maxTeases=t,this.dialogOptions=i,this.character=e;const n={fontSize:48,fontWeight:"bold",fill:16777215,fontFamily:"Roboto"};this.acceptButton=new o("CÓ",{shape:s.RoundedRectangle,width:200,height:100,borderColor:3046706,borderWidth:4,tooltipText:"Hãy thử bắt lấy nút này :)",onHover:()=>this.onAcceptHover(),onOut:()=>this.onAcceptOut(),textStyle:n}),this.declineButton=new o("KHÔNG",{shape:s.RoundedRectangle,width:200,height:100,backgroundColor:16711680,borderColor:16711680,borderWidth:4,tooltipText:"Nhấn để từ chối",onClick:()=>console.log("Declined!"),textStyle:n});const h=this.acceptButton.getWidth()+40+this.declineButton.getWidth();this.acceptButton.setPosition(-h/2,0),this.declineButton.setPosition(-h/2+this.acceptButton.getWidth()+40,0),this.originalAcceptPos={x:-h/2,y:0},this.addChild(this.acceptButton),this.addChild(this.declineButton),this.startAnimation(),this.character.showDialog(this.dialogOptions.initialDialog)}onAcceptHover(){var t,i;if(!(this.teasingCount>=this.maxTeases||this.isHovering)){this.isHovering=!0,this.teasingCount++;const e=this.dialogOptions.teasingDialogs[Math.floor(Math.random()*this.dialogOptions.teasingDialogs.length)];this.character.showDialog(e),this.teasingCount===this.maxTeases&&(this.acceptButton.setTooltip(this.dialogOptions.finalDialog),null===(i=(t=this.dialogOptions).onMaxTeases)||void 0===i||i.call(t)),this.acceptButton.setTextStyle({fontSize:56,fontWeight:"bold",fill:16777215,fontFamily:"Roboto"}),this.moveAcceptButton()}}onAcceptOut(){this.isHovering=!1,this.acceptButton.setTextStyle({fontSize:48,fontWeight:"bold",fill:16777215,fontFamily:"Roboto"}),this.teasingCount>=this.maxTeases&&this.acceptButton.setPosition(this.originalAcceptPos.x,this.originalAcceptPos.y)}moveAcceptButton(){const t=Math.min(window.innerWidth-this.acceptButton.getWidth()-50,.8*window.innerWidth),i=Math.min(window.innerHeight-this.acceptButton.getHeight()-50,.8*window.innerHeight);let e,s;const n=this.declineButton.getPosition();do{e=50+Math.random()*(t-50),s=50+Math.random()*(i-50)}while(Math.abs(e-n.x)<100&&Math.abs(s-n.y)<100);const h=this.toLocal({x:e,y:s});this.acceptButton.setPosition(h.x,h.y)}startAnimation(){let t=0;const i=()=>{if(this.isHovering){t+=.1;const i=10*Math.sin(t),e=this.acceptButton.getPosition();this.acceptButton.setPosition(e.x,e.y+i)}requestAnimationFrame(i)};i()}setCallbacks(t,i){this.acceptButton.setCallbacks({onClick:()=>{this.teasingCount>=this.maxTeases&&t()}}),this.declineButton.setCallbacks({onClick:i})}}class r extends n.mcf{constructor(t,i,e){super(),this.currentDialog="",this.isDialogVisible=!1,this.options=e,this.onDialogComplete=e.onDialogComplete,this.sprite=new n.kxk,this.loadCharacterTexture(),this.sprite.anchor.set(.5),this.position.set(t,i),this.addChild(this.sprite)}calculateOptimalScale(){return(this.options.targetHeight||.3*window.innerHeight)/this.sprite.height}async loadCharacterTexture(){try{const t=await n.sP.load(this.options.image);this.sprite.texture=t;const i=this.calculateOptimalScale();this.sprite.scale.set(this.options.scale||i)}catch(t){console.error("Failed to load character texture:",t)}}createDialogBubble(){if(!this.dialogBubble){const t=new n.EYj({text:"",style:{fontFamily:"Roboto",fontSize:24,fill:0,align:"left",wordWrap:!0,wordWrapWidth:300}});let i;if(this.options.bubbleBackground)i=n.kxk.from(this.options.bubbleBackground);else{const t=new n.A1g;t.setFillStyle({color:16777215,alpha:.9}),t.beginPath(),t.roundRect(0,0,320,80,20),t.fill(),i=new n.kxk,i.addChild(t)}const e=new n.mcf;e.addChild(i),e.addChild(t),t.position.set(15,10),e.position.set(.3*this.sprite.width,.7*-this.sprite.height),this.dialogBubble={text:t,background:i},this.addChild(e)}}showDialog(t,i){this.dialogBubble||this.createDialogBubble(),this.dialogBubble&&(this.dialogBubble.text.text=t,this.currentDialog=t,this.isDialogVisible=!0,i?i():this.onDialogComplete&&this.onDialogComplete())}hideDialog(){this.dialogBubble&&(this.isDialogVisible=!1,this.currentDialog="",this.dialogBubble.text.text="")}getCurrentDialog(){return this.currentDialog}isShowingDialog(){return this.isDialogVisible}playTalkingAnimation(){}stopTalkingAnimation(){}setExpression(t){}setScale(t){this.sprite.scale.set(t)}setPosition(t,i){this.position.set(t,i)}}const l=e.p+"assets/images/2d29b3ebec448c228d9c.png",c=e.p+"assets/images/a396a67f0a89f7b0d017.jpg";class d extends n.A1g{constructor(t,i){super(),this.screenWidth=t,this.screenHeight=i,this.speedX=2*Math.random()-1,this.speedY=2+3*Math.random(),this.beginFill(16777215),this.drawCircle(0,0,2+2*Math.random()),this.endFill(),this.alpha=.6+.4*Math.random(),this.position.set(Math.random()*t,Math.random()*i)}update(){this.x+=this.speedX,this.y+=this.speedY,this.y>this.screenHeight&&(this.y=-10,this.x=Math.random()*this.screenWidth),this.x>this.screenWidth&&(this.x=0),this.x<0&&(this.x=this.screenWidth)}updateScreenSize(t,i){this.screenWidth=t,this.screenHeight=i}}const g=e.p+"assets/images/42bf48573d9475896de4.png";class u extends n.mcf{constructor(t,i){super(),this.speed=3,this.isMoving=!0,this.time=0,this.swayAmount=15,this.screenWidth=t,this.originalY=i,this.sprite=n.kxk.from(g),this.sprite.anchor.set(.5),this.sprite.scale.set(.2),this.sprite.zIndex=-.8,this.sprite.x=t+this.sprite.width,this.sprite.y=i,this.addChild(this.sprite),this.sortableChildren=!0}update(){this.isMoving&&(this.sprite.x-=this.speed,this.time+=.02,this.sprite.y=this.originalY+Math.sin(this.time)*this.swayAmount,this.sprite.x<-this.sprite.width&&(this.sprite.x=this.screenWidth+this.sprite.width))}setScreenWidth(t){this.screenWidth=t}setY(t){this.originalY=t}}class p extends n.mcf{constructor(t,i,e){super(),this.snowflakes=[],this.SNOW_COUNT=100,this.background=n.kxk.from(c),this.background.width=t,this.background.height=i,this.background.anchor.set(0),this.addChild(this.background),this.background.zIndex=-1,this.sortableChildren=!0;const s={fontSize:48,fontWeight:"bold",fill:16777215,fontFamily:"Roboto",align:"center"},h={fontSize:32,fill:16777215,fontFamily:"Roboto",align:"center",wordWrap:!0,wordWrapWidth:.8*t};e.title&&(this.titleText=new n.EYj({text:e.title,style:Object.assign(Object.assign({},s),e.titleStyle)}),this.titleText.anchor.set(.5),this.addChild(this.titleText)),this.messageText=new n.EYj({text:e.message,style:Object.assign(Object.assign({},h),e.messageStyle)}),this.messageText.anchor.set(.5),this.addChild(this.messageText),this.character=new r(.08*t,.75*i,{image:l,scale:.12,onDialogComplete:()=>{console.log("Dialog completed")}}),this.addChild(this.character),this.buttons=new a(10,{initialDialog:"Xin chào! Bạn có muốn nghe kể chuyện không?",teasingDialogs:["Hehe, bắt được không nào?","Ôi, suýt thì bắt được rồi!","Nhanh lên nào!","Gần lắm rồi!","Cố gắng thêm chút nữa!","Bạn giỏi thật đấy!","Wow, nhanh quá!","Chỉ còn một chút nữa thôi!","Bạn rất kiên trì đấy!","Đúng là một người không dễ bỏ cuộc!"],finalDialog:"Tuyệt vời! Bạn thật kiên trì, hãy nhấn nút này!",onMaxTeases:()=>{console.log("Đã đạt max teases!")}},this.character),this.addChild(this.buttons),this.updatePositions(t,i),this.buttons.setCallbacks((()=>{var t;null===(t=this.onConfirm)||void 0===t||t.call(this),this.character.showDialog("Tuyệt vời! Hãy cùng bắt đầu nhé!")}),(()=>{var t;null===(t=this.onCancel)||void 0===t||t.call(this),this.character.showDialog("Có được gì đâu, chơi tiếp đi!")})),this.character.showDialog("Xin chào! Bạn có muốn nghe kể chuyện không?"),this.createSnowEffect(t,i),this.santaSleigh=new u(t,.2*i),this.addChild(this.santaSleigh)}updatePositions(t,i){let e=.3*i;this.titleText&&(this.titleText.position.set(t/2,e),e+=this.titleText.height+40),this.messageText.position.set(t/2,e),e+=this.messageText.height+40,this.buttons.position.set(t/2,e)}createSnowEffect(t,i){const e=new n.mcf;this.addChild(e);for(let s=0;s<this.SNOW_COUNT;s++){const s=new d(t,i);this.snowflakes.push(s),e.addChild(s)}e.zIndex=-.5}update(){for(const t of this.snowflakes)t.update();this.santaSleigh.update()}resize(t,i){this.background.width=t,this.background.height=i,this.messageText.style.wordWrapWidth=.8*t,this.character.setPosition(.15*t,.75*i),this.updatePositions(t,i),this.snowflakes.forEach((e=>{e.updateScreenSize(t,i)})),this.santaSleigh.setScreenWidth(t),this.santaSleigh.setY(.2*i)}setCallbacks(t,i){this.onConfirm=t,this.onCancel=i}}var m=e(1944);const w=e.p+"assets/images/41b0d0947a3100234977.jpg";var x=e(7932);class y extends n.mcf{constructor(t,i,e){super(),this.currentPageIndex=0,this.currentTextIndex=0,this.textSpeed=50,this.isTyping=!1,this.isTransitioning=!1,this.snowflakes=[],this.SNOW_COUNT=100,this.isTypingComplete=!1,this.onComplete=e.onComplete,this.pages=e.pages,this.textSpeed=e.typingSpeed||50,this.background=n.kxk.from(w),this.background.width=t,this.background.height=i,this.background.anchor.set(0),this.addChild(this.background),this.background.zIndex=-1,this.sortableChildren=!0,this.createSnowEffect(t,i),this.santaSleigh=new u(t,.2*i),this.addChild(this.santaSleigh),this.character=new r(.15*t,.75*i,{image:l,scale:.1}),this.addChild(this.character),this.pageText=new n.EYj({text:"",style:{fontSize:20,fontFamily:"Roboto",fill:16777215,fontWeight:"bold",align:"center",wordWrap:!0,wordWrapWidth:.6*t,lineHeight:40,letterSpacing:1,padding:10}}),this.pageText.filters=[new x.GD({color:0,alpha:.8,blur:3,offset:{x:2,y:2},quality:3})],this.pageText.anchor.set(.5,0),this.pageText.position.set(.5*t,.6*i),this.addChild(this.pageText),this.textPanel=new n.A1g,this.textPanel.beginFill(0,.5),this.textPanel.drawRoundedRect(.3*-t,-50,.6*t,200,20),this.textPanel.endFill(),this.textContainer=new n.mcf,this.textContainer.addChild(this.textPanel),this.textContainer.addChild(this.pageText),this.textContainer.position.set(.5*t,.6*i),this.addChild(this.textContainer),this.pageText.style={fontSize:20,fontFamily:"Roboto",fill:16777215,fontWeight:"bold",align:"center",wordWrap:!0,wordWrapWidth:.55*t,lineHeight:40,letterSpacing:1,padding:20},this.pageText.position.set(0,0),this.setupNavigationButtons(),this.showPage(0)}setupNavigationButtons(){this.nextButton=new o("Tiếp",{shape:s.RoundedRectangle,width:120,height:50,borderColor:3046688,backgroundColor:5025616,textStyle:{fontSize:24,fontFamily:"Roboto",fill:16777215},onClick:()=>this.nextPage()}),this.prevButton=new o("Lùi",{shape:s.RoundedRectangle,width:120,height:50,borderColor:3046688,backgroundColor:5025616,textStyle:{fontSize:24,fontFamily:"Roboto",fill:16777215},onClick:()=>this.prevPage()});this.prevButton.setPosition(20,window.innerHeight-100),this.nextButton.setPosition(window.innerWidth-120-20,window.innerHeight-100),this.addChild(this.prevButton),this.addChild(this.nextButton)}showPage(t){this.isTransitioning||(this.isTransitioning=!0,this.typingTimeout&&clearTimeout(this.typingTimeout),this.currentPageIndex=t,this.pageText.text="",this.currentTextIndex=0,this.isTyping=!0,this.pages[t].image&&this.showImage(this.pages[t].image),this.typeText(this.pages[t].text),this.isTransitioning=!1)}showImage(t){const i=n.kxk.from(t);i.alpha=0,i.anchor.set(.5),i.width=.5*window.innerWidth,i.height=.45*window.innerHeight,i.position.set(.5*window.innerWidth,.25*window.innerHeight),this.pageImage?m.Ay.to(this.pageImage,{alpha:0,duration:.3,onComplete:()=>{this.removeChild(this.pageImage),this.pageImage=i,this.addChild(i),m.Ay.to(i,{alpha:1,duration:.3,onComplete:()=>{this.typeText(this.pages[this.currentPageIndex].text)}})}}):(this.pageImage=i,this.addChild(i),m.Ay.to(i,{alpha:1,duration:.3,onComplete:()=>{this.typeText(this.pages[this.currentPageIndex].text)}}))}typeText(t,i=!1){if(i)return this.pageText.text=t,this.currentTextIndex=t.length,this.updateTextPanel(),void(this.isTypingComplete=!0);const e=()=>{this.currentTextIndex<t.length&&this.isTyping?(this.pageText.text=t.substring(0,this.currentTextIndex+1),this.currentTextIndex++,this.updateTextPanel(),this.typingTimeout=window.setTimeout(e,this.textSpeed)):this.isTypingComplete=!0};e()}skipTyping(){this.typingTimeout&&clearTimeout(this.typingTimeout),this.isTyping=!1,this.pageText.text=this.pages[this.currentPageIndex].text,this.updateTextPanel(),this.isTypingComplete=!0}nextPage(){var t;if(!this.isTransitioning)return this.isTyping&&!this.isTypingComplete?(this.typingTimeout&&clearTimeout(this.typingTimeout),void this.typeText(this.pages[this.currentPageIndex].text,!0)):void(this.isTypingComplete&&(this.currentPageIndex<this.pages.length-1?(this.isTypingComplete=!1,this.showPage(this.currentPageIndex+1)):this.currentPageIndex===this.pages.length-1&&(null===(t=this.onComplete)||void 0===t||t.call(this))))}prevPage(){!this.isTransitioning&&this.currentPageIndex>0&&this.showPage(this.currentPageIndex-1)}resize(t,i){this.background.width=t,this.background.height=i,this.snowflakes.forEach((e=>{e.updateScreenSize(t,i)})),this.santaSleigh.setScreenWidth(t),this.santaSleigh.setY(.2*i),this.character.setPosition(.15*t,.75*i),this.pageText.position.set(.5*t,.6*i),this.pageText.style.wordWrapWidth=.6*t,this.pageImage&&(this.pageImage.width=.5*t,this.pageImage.height=.45*i,this.pageImage.position.set(.5*t,.25*i));this.prevButton.setPosition(20,i-100),this.nextButton.setPosition(t-120-20,i-100),this.pageText.style.wordWrapWidth=.55*t,this.textContainer.position.set(.5*t,.6*i),this.updateTextPanel()}createSnowEffect(t,i){const e=new n.mcf;this.addChild(e);for(let s=0;s<this.SNOW_COUNT;s++){const s=new d(t,i);this.snowflakes.push(s),e.addChild(s)}e.zIndex=-.5}update(){for(const t of this.snowflakes)t.update();this.santaSleigh.update()}updateTextPanel(){const t=this.pageText.getBounds();this.textPanel.clear(),this.textPanel.beginFill(0,.5),this.textPanel.drawRoundedRect(-t.width/2-40,-40,t.width+80,t.height+80,20),this.textPanel.endFill()}}const b=e.p+"assets/images/c70d5f2cc6c70e5b6172.jpg",C=e.p+"assets/images/afd03b7f3889460b3022.jpg",f=e.p+"assets/images/c163101eaa7519c2fbe4.jpg",k=e.p+"assets/images/5d5cbb7bd08e6fe554ea.jpg",T=e.p+"assets/images/176b39c520598f8548cf.jpg",v=e.p+"assets/images/0909a5bcbcb0b1a60e66.jpg",S=e.p+"assets/images/1ecbe0d31b78260480f1.jpg",P=e.p+"assets/images/c83f81e479d47de3d6a0.jpg";class W extends n.mcf{constructor(t,i){super(),this.currentLine=null,this.isDrawing=!1,this.lineColor=0,this.lineWidth=3,this.userLines=[];const e=new n.A1g;e.setStrokeStyle({width:2,color:10066329}),e.setFillStyle({color:15792383,alpha:.5}),e.drawRoundedRect(0,0,t,i,20),e.fill(),e.stroke(),this.addChild(e),this.treeLayer=new n.mcf,this.addChild(this.treeLayer),this.userDrawingLayer=new n.mcf,this.addChild(this.userDrawingLayer),e.eventMode="static",e.cursor="crosshair",e.on("pointerdown",this.onPointerDown.bind(this)),e.on("pointermove",this.onPointerMove.bind(this)),e.on("pointerup",this.onPointerUp.bind(this)),e.on("pointerupoutside",this.onPointerUp.bind(this)),setTimeout((()=>{this.drawChristmasTree()}),1e3)}onPointerDown(t){this.isDrawing=!0;const i=t.getLocalPosition(this);this.currentLine=new n.A1g,this.currentLine.setStrokeStyle({width:this.lineWidth,color:this.lineColor}),this.currentLine.beginPath(),this.currentLine.moveTo(i.x,i.y),this.userDrawingLayer.addChild(this.currentLine),this.userLines.push(this.currentLine)}onPointerMove(t){if(!this.isDrawing||!this.currentLine)return;const i=t.getLocalPosition(this);this.currentLine.lineTo(i.x,i.y),this.currentLine.stroke()}onPointerUp(){this.isDrawing=!1,this.currentLine=null}setColor(t){this.lineColor=t}setLineWidth(t){this.lineWidth=t}clear(){this.userLines.forEach((t=>{this.userDrawingLayer.removeChild(t),t.destroy()})),this.userLines=[],this.treeLayer.removeChildren()}clearUserDrawing(){this.userLines.forEach((t=>{this.userDrawingLayer.removeChild(t),t.destroy()})),this.userLines=[]}async drawTreePart(t,i){return new Promise((t=>{setTimeout((()=>{i(),t()}),300)}))}async drawLine(t,i,e){t.beginPath(),t.moveTo(i[0].x,i[0].y);for(let e=1;e<i.length;e++)await new Promise((t=>setTimeout(t,50))),t.lineTo(i[e].x,i[e].y);void 0!==e&&t.fill(),t.stroke()}async drawBezierCurve(t,i,e,s,n,h=20,o){void 0!==o&&t.setFillStyle({color:o});const a=[];for(let t=0;t<=h;t++){const o=t/h,r=Math.pow(1-o,3)*i.x+3*Math.pow(1-o,2)*o*e.x+3*(1-o)*Math.pow(o,2)*s.x+Math.pow(o,3)*n.x,l=Math.pow(1-o,3)*i.y+3*Math.pow(1-o,2)*o*e.y+3*(1-o)*Math.pow(o,2)*s.y+Math.pow(o,3)*n.y;a.push({x:r,y:l})}t.beginPath();for(let i=0;i<a.length;i++)await new Promise((t=>setTimeout(t,50))),0===i?t.moveTo(a[i].x,a[i].y):t.lineTo(a[i].x,a[i].y),t.stroke();void 0!==o&&t.fill()}async drawCurvePart(t,i,e=!1){e&&t.moveTo(i[0].x,i[0].y);for(let e=1;e<i.length;e++)await new Promise((t=>setTimeout(t,30))),t.lineTo(i[e].x,i[e].y),t.stroke()}async drawChristmasTree(){const t=this.width/2,i=.85*this.height,e=.4*this.width,s=.65*this.height,h=s/6,o=new n.A1g,a=new n.A1g,r=new n.A1g,l=new n.A1g,c=new n.A1g,d=new n.A1g;this.treeLayer.addChild(o,a,r,d,l,c),o.setStrokeStyle({width:2,color:9127187}),o.setFillStyle({color:13468991});const g=.08*e*2.5,u=.08*s*1.2,p=1.2*g;await this.drawLine(o,[{x:t-p/2,y:i+.08*s},{x:t-g/2,y:i+.08*s+u},{x:t+g/2,y:i+.08*s+u},{x:t+p/2,y:i+.08*s},{x:t-p/2,y:i+.08*s}],13468991),a.setStrokeStyle({width:2,color:9127187}),a.setFillStyle({color:10506797});const m=.08*e,w=.08*s;await this.drawLine(a,[{x:t-m/2,y:i},{x:t-m/2,y:i+w},{x:t+m/2,y:i+w},{x:t+m/2,y:i},{x:t-m/2,y:i}],10506797);for(let s=0;s<5;s++){const n=h*(1+.2*(5-s-1)),o=i-s*h*1.1,a=e*(1-.15*s);r.setStrokeStyle({width:2,color:742213});const l={x:t-a/2,y:o},c={x:t-a/3,y:o},g={x:t-a/6,y:o-1.1*n},u={x:t,y:o-n},p={x:t+a/6,y:o-1.1*n},m={x:t+a/3,y:o},w={x:t+a/2,y:o},x=[];x.push(l);for(let t=0;t<=1;t+=.1){const i=Math.pow(1-t,3)*l.x+3*Math.pow(1-t,2)*t*c.x+3*(1-t)*Math.pow(t,2)*g.x+Math.pow(t,3)*u.x,e=Math.pow(1-t,3)*l.y+3*Math.pow(1-t,2)*t*c.y+3*(1-t)*Math.pow(t,2)*g.y+Math.pow(t,3)*u.y;x.push({x:i,y:e})}for(let t=0;t<=1;t+=.1){const i=Math.pow(1-t,3)*u.x+3*Math.pow(1-t,2)*t*p.x+3*(1-t)*Math.pow(t,2)*m.x+Math.pow(t,3)*w.x,e=Math.pow(1-t,3)*u.y+3*Math.pow(1-t,2)*t*p.y+3*(1-t)*Math.pow(t,2)*m.y+Math.pow(t,3)*w.y;x.push({x:i,y:e})}x.push(l),await this.drawLayerWithAnimation(r,x,3066993),d.setStrokeStyle({width:1,color:742213}),d.setFillStyle({color:742213});const y=5+2*(5-s-1),b=a/y;for(let i=0;i<y;i++){const e=t-a/2+i*b,s=e+b/2,n=e+b;d.beginPath(),await new Promise((t=>setTimeout(t,30))),d.moveTo(e,o),d.quadraticCurveTo(s,o+.2*h,n,o),d.fill(),d.stroke()}}const x=.12*e,y=i-s-x/4;c.setStrokeStyle({width:2,color:16766720}),c.setFillStyle({color:16766720});const b=[];for(let i=0;i<=10;i++){const e=i%2==0?x:.4*x,s=i*Math.PI/5,n=t+Math.cos(s-Math.PI/2)*e,h=y+Math.sin(s-Math.PI/2)*e;b.push({x:n,y:h})}b.push(b[0]),await this.drawLine(c,b,16766720),await this.addTreeDecorations(l,t,i,e,s)}drawStar(t,i,e,s){t.setStrokeStyle({width:2,color:16766720}),t.setFillStyle({color:16766720});const n=s,h=.4*s;t.beginPath();for(let s=0;s<10;s++){const o=s%2==0?n:h,a=s*Math.PI/5,r=i+Math.cos(a-Math.PI/2)*o,l=e+Math.sin(a-Math.PI/2)*o;0===s?t.moveTo(r,l):t.lineTo(r,l)}t.fill(),t.stroke()}async addTreeDecorations(t,i,e,s,n){const h=[16711680,16766720,4286945,16738740],o=n/4;for(let n=4;n>=0;n--){const a=e-n*o*1.1,r=s*(1-.15*n),l=o*(1+.2*(5-n-1));if(n<4){const e=6;for(let s=0;s<e;s++){const e=i+(Math.random()-.5)*r*.8,s=a-Math.random()*l*.7;s<a&&s>a-l&&this.addDecoration(t,e,s,h)}const s=4;for(let e=0;e<=s;e++){const n=i-r/2+r*(e/s),o=a-.1*l;this.addDecoration(t,n,o,h)}}}}addDecoration(t,i,e,s){const n=s[Math.floor(Math.random()*s.length)],h=2*(Math.random()-.5),o=2*(Math.random()-.5);t.setStrokeStyle({width:1,color:0}),t.setFillStyle({color:n}),t.beginPath(),t.circle(i+h,e+o,3),t.fill()}async drawLayerWithAnimation(t,i,e){const s=new n.A1g;t.addChild(s);for(let t=1;t<=i.length;t++){s.clear(),s.setStrokeStyle({width:2,color:742213}),s.setFillStyle({color:e}),s.beginPath(),s.moveTo(i[0].x,i[0].y);for(let e=1;e<t;e++)s.lineTo(i[e].x,i[e].y);t===i.length?(s.fill(),s.stroke()):s.stroke(),await new Promise((t=>setTimeout(t,30)))}}}class M extends n.mcf{constructor(t,i,e){super(),this.snowflakes=[],this.SNOW_COUNT=100,this.background=n.kxk.from(w),this.background.width=t,this.background.height=i,this.background.anchor.set(0),this.addChild(this.background),this.background.zIndex=-1,this.sortableChildren=!0,this.createSnowEffect(t,i),this.santaSleigh=new u(t,.2*i),this.addChild(this.santaSleigh),this.drawingCanvas=new W(.7*t,.8*i),this.drawingCanvas.position.set(.15*t,.1*i),this.addChild(this.drawingCanvas),this.setupControls()}createSnowEffect(t,i){const e=new n.mcf;this.addChild(e);for(let s=0;s<this.SNOW_COUNT;s++){const s=new d(t,i);this.snowflakes.push(s),e.addChild(s)}e.zIndex=-.5}update(){for(const t of this.snowflakes)t.update();this.santaSleigh.update()}resize(t,i){this.background.width=t,this.background.height=i,this.snowflakes.forEach((e=>{e.updateScreenSize(t,i)})),this.santaSleigh.setScreenWidth(t),this.santaSleigh.setY(.2*i)}setupControls(){const t=35,i=[0,16711680,65280,255];i.forEach(((i,e)=>{const n=new o("",{shape:s.Circle,width:t,height:t,backgroundColor:i,onClick:()=>this.drawingCanvas.setColor(i)});n.setPosition(20,50+40*e),this.addChild(n)}));const e=[2,5,8],n=50+40*(i.length+1);e.forEach(((i,e)=>{const h=new o(i.toString(),{shape:s.Circle,width:t,height:t,backgroundColor:13421772,onClick:()=>this.drawingCanvas.setLineWidth(i)});h.setPosition(20,n+40*e),this.addChild(h)}));const h=new o("Clear",{shape:s.RoundedRectangle,width:70,height:t,backgroundColor:16729156,onClick:()=>this.drawingCanvas.clear()});h.setPosition(20,n+40*(e.length+1)),this.addChild(h);const a=new o("Draw Tree",{shape:s.RoundedRectangle,width:70,height:t,backgroundColor:5025616,onClick:async()=>await this.drawingCanvas.drawChristmasTree()});a.setPosition(20,n+40*(e.length+2)),this.addChild(a)}}class B{static init(t){this.audio=new Audio(t),this.audio.loop=!0,this.audio.volume=.5}static play(){!this.isPlaying&&this.audio&&this.audio.play().then((()=>{this.isPlaying=!0})).catch((t=>{console.log("Autoplay prevented:",t)}))}static pause(){this.isPlaying&&this.audio&&(this.audio.pause(),this.isPlaying=!1)}static setVolume(t){this.audio&&(this.audio.volume=Math.max(0,Math.min(1,t)))}}B.isPlaying=!1;const D=e.p+"assets/musics/4a9784c2d4bbd50adef8.mp3";class H{constructor(){this.app=new n.lgM,this.updateDimensions(),B.init(D);const t=()=>{B.play(),document.removeEventListener("click",t),document.removeEventListener("keydown",t),document.removeEventListener("touchstart",t)};document.addEventListener("click",t),document.addEventListener("keydown",t),document.addEventListener("touchstart",t)}updateDimensions(){this.gameWidth=window.innerWidth,this.gameHeight=window.innerHeight}async init(){window.devicePixelRatio;await this.app.init({width:this.gameWidth,height:this.gameHeight,backgroundColor:1087931,resolution:1,antialias:!0,hello:!0,autoDensity:!0}),this.app.stage.position.set(0,0),this.app.stage.scale.set(1),document.body.appendChild(this.app.canvas),await this.setup(),this.addEventListeners(),this.startGameLoop()}async loadAssets(){await n.sP.load([c,l,g,w,b,C,f,k,T,v,S,P])}async setup(){await this.loadAssets(),this.confirmationScreen=new p(this.gameWidth,this.gameHeight,{title:"Xác nhận",message:"Có muốn nghe kể chuyện không nè?",titleStyle:{fill:65280},messageStyle:{fill:16777215}}),this.currentScreen=this.confirmationScreen,this.app.stage.addChild(this.confirmationScreen),this.confirmationScreen.setCallbacks((()=>{B.setVolume(.3),this.showStoryScreen()}),(()=>console.log("User cancelled!")))}async showStoryScreen(){this.storyScreen=new y(this.gameWidth,this.gameHeight,{title:"Món Quà Giáng Sinh Kỳ Diệu",pages:[{text:"Ngày xửa ngày xưa, trong một ngôi làng nhỏ giữa mùa đông lạnh giá, có một cậu bé nghèo tên là Tom. Đêm Giáng sinh, tuyết rơi trắng xóa, Tom đứng co ro trước cửa sổ của một cửa hàng đồ chơi. Đôi mắt cậu lấp lánh nhìn những món đồ tuyệt đẹp bên trong - những thứ mà cậu chỉ dám mơ ước. Bên ngoài, gió rét thổi buốt da, nhưng Tom không rời đi, như thể ánh sáng từ cửa hàng là điều duy nhất sưởi ấm trái tim cậu.",image:b},{text:"Tom không có cha mẹ, cậu sống nhờ bà ngoại trong một căn nhà nhỏ xiêu vẹo ở cuối làng. Mỗi ngày, Tom đều giúp bà chẻ củi và nhặt những cành cây khô trong rừng để sưởi ��m. Cậu chưa từng được nhận quà Giáng sinh, nhưng trong tim, cậu vẫn luôn giữ niềm tin rằng ông già Noel sẽ mang đến điều kỳ diệu. “Liệu năm nay có gì khác không nhỉ?” Tom thầm nghĩ khi nhìn lên bầu trời đầy tuyết.",image:C},{text:"Đêm đó, Tom trở về nhà, ngồi bên bếp lửa nhỏ cùng bà. Dù nghèo khó, bà ngoại vẫn kể cho cậu những câu chuyện cổ tích ấm áp về ông già Noel và những phép màu đêm Giáng sinh. Trước khi đi ngủ, Tom lấy một mảnh giấy nhỏ, viết một bức thư đơn giản gửi đến ông già Noel: “Cháu không cần đồ chơi đắt tiền, cháu chỉ mong mọi người trong làng có thể cười nhiều hơn...” Cậu lặng lẽ đặt bức thư lên bệ cửa sổ rồi chìm vào giấc ngủ.",image:f},{text:"Đêm khuya, khi mọi thứ đều yên ắng, ông già Noel xuất hiện trên chiếc xe tuần lộc. Ông nhìn thấy căn nhà nhỏ của Tom và ánh sáng yếu ớt từ bên trong. Bước đến bên cửa sổ, ông tìm thấy bức thư nh���. Khi đọc dòng chữ trong thư, trái tim ông tràn ngập xúc động. “Một ước nguyện đặc biệt,” ông thì thầm. “Cậu bé này không chỉ nghĩ đến mình mà còn nghĩ đến hạnh phúc của mọi người...”",image:k},{text:"Sáng hôm sau, Tom tỉnh dậy, thấy một chiếc hộp nhỏ bên giường. Bên trong không phải là đồ chơi, mà là một chiếc chuông bạc xinh xắn và một lá thư từ ông già Noel: “Tom thân mến, món quà của cháu không nằm trong chiếc hộp này, mà là bên trong trái tim cháu. Hãy dùng chiếc chuông này để mang lại niềm vui cho những người xung quanh. Mỗi lần cháu làm ai đó mỉm cười, cháu sẽ nghe thấy âm thanh của phép màu.”",image:T},{text:"Từ ngày đó, Tom bắt đầu tìm cách giúp đỡ mọi người. Cậu nhặt củi giúp bà cụ hàng xóm, đẩy xe hàng cho bác thợ rèn, và kể chuyện cười cho những đứa trẻ trong làng. Điều kỳ lạ là mỗi khi có ai đó mỉm cười, chiếc chuông bạc trong túi Tom lại ngân lên m��t tiếng nhẹ nhàng. Mỗi tiếng chuông là một ngôi sao nhỏ sáng lên trên bầu trời.",image:v},{text:"Đêm Giáng sinh, cả làng bất ngờ nhận ra bầu trời sáng rực với hàng ngàn người sao. Mọi người tụ tập lại và cùng nhau trò chuyện, cười đùa. Ai cũng cảm nhận được hơi ấm kỳ diệu lan tỏa khắp nơi. Cậu bé Tom đứng bên cạnh bà, ngắm nhìn bầu trời và mỉm cười hạnh phúc. Cậu hiểu rằng, món quà quý giá nhất không phải là những thứ xa hoa, mà là niềm vui và tình yêu thương dành cho người khác.",image:S},{text:"Giờ đây, mỗi Giáng sinh, người dân trong làng lại kể câu chuyện về cậu bé Tom và chiếc chuông bạc kỳ diệu. Câu chuyện nhắc nhở rằng: “Hạnh phúc không phải ở việc nhận, mà là ở việc trao đi.” Những ngôi sao trên bầu trời là minh chứng cho tình yêu và lòng tốt không biên giới mà Tom đã mang lại.",image:P}],onComplete:()=>{this.showDrawScreen()}}),this.currentScreen&&m.Ay.to(this.currentScreen,{alpha:0,duration:.5,onComplete:()=>{this.app.stage.removeChild(this.currentScreen),this.storyScreen.alpha=0,this.app.stage.addChild(this.storyScreen),m.Ay.to(this.storyScreen,{alpha:1,duration:.5}),this.currentScreen=this.storyScreen,B.setVolume(.3)}})}async showDrawScreen(){const t=new M(this.gameWidth,this.gameHeight,{onComplete:()=>{}});m.Ay.to(this.currentScreen,{alpha:0,duration:.5,onComplete:()=>{this.app.stage.removeChild(this.currentScreen),t.alpha=0,this.app.stage.addChild(t),m.Ay.to(t,{alpha:1,duration:.5}),this.currentScreen=t,B.setVolume(.5)}})}onResize(){this.updateDimensions(),this.app.renderer.resize(this.gameWidth,this.gameHeight),this.confirmationScreen.resize(this.gameWidth,this.gameHeight)}addEventListeners(){window.addEventListener("resize",(()=>{this.onResize()}))}startGameLoop(){this.app.ticker.add((()=>{this.update()}))}update(){var t,i;this.currentScreen&&(null===(i=(t=this.currentScreen).update)||void 0===i||i.call(t))}}var L=e(3052),R=e.n(L);(async()=>{await new Promise((t=>{R().load({google:{families:["Roboto:400,700"]},active:()=>t()})}));(new H).init()})()}},t=>{t.O(0,[217,346,640,395,443,17,858,517,2,404,302,417,457,929,676,135,410,716,630,42],(()=>{return i=5093,t(t.s=i);var i}));t.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,