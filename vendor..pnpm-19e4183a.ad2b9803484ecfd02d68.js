"use strict";(self.webpackChunkpixijs_game=self.webpackChunkpixijs_game||[]).push([[217],{3122:e=>{function t(e,t,r){r=r||2;var x,o,u,f,a,c,h,l=t&&t.length,y=l?t[0]*r:e.length,w=n(e,0,y,r,!0),_=[];if(!w||w.next===w.prev)return _;if(l&&(w=function(e,t,r,i){var x,o,u,f=[];for(x=0,o=t.length;x<o;x++)(u=n(e,t[x]*i,x<o-1?t[x+1]*i:e.length,i,!1))===u.next&&(u.steiner=!0),f.push(p(u));for(f.sort(v),x=0;x<f.length;x++)r=s(f[x],r);return r}(e,t,w,r)),e.length>80*r){x=u=e[0],o=f=e[1];for(var Z=r;Z<y;Z+=r)(a=e[Z])<x&&(x=a),(c=e[Z+1])<o&&(o=c),a>u&&(u=a),c>f&&(f=c);h=0!==(h=Math.max(u-x,f-o))?32767/h:0}return i(w,_,r,x,o,h,0),_}function n(e,t,n,r,i){var x,o;if(i===z(e,t,n,r)>0)for(x=t;x<n;x+=r)o=m(x,e[x],e[x+1],o);else for(x=n-r;x>=t;x-=r)o=m(x,e[x],e[x+1],o);return o&&w(o,o.next)&&(k(o),o=o.next),o}function r(e,t){if(!e)return e;t||(t=e);var n,r=e;do{if(n=!1,r.steiner||!w(r,r.next)&&0!==y(r.prev,r,r.next))r=r.next;else{if(k(r),(r=t=r.prev)===r.next)break;n=!0}}while(n||r!==t);return t}function i(e,t,n,v,s,a,p){if(e){!p&&a&&function(e,t,n,r){var i=e;do{0===i.z&&(i.z=c(i.x,i.y,t,n,r)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==e);i.prevZ.nextZ=null,i.prevZ=null,function(e){var t,n,r,i,x,o,u,f,v=1;do{for(n=e,e=null,x=null,o=0;n;){for(o++,r=n,u=0,t=0;t<v&&(u++,r=r.nextZ);t++);for(f=v;u>0||f>0&&r;)0!==u&&(0===f||!r||n.z<=r.z)?(i=n,n=n.nextZ,u--):(i=r,r=r.nextZ,f--),x?x.nextZ=i:e=i,i.prevZ=x,x=i;n=r}x.nextZ=null,v*=2}while(o>1)}(i)}(e,v,s,a);for(var h,l,y=e;e.prev!==e.next;)if(h=e.prev,l=e.next,a?o(e,v,s,a):x(e))t.push(h.i/n|0),t.push(e.i/n|0),t.push(l.i/n|0),k(e),e=l.next,y=l.next;else if((e=l)===y){p?1===p?i(e=u(r(e),t,n),t,n,v,s,a,2):2===p&&f(e,t,n,v,s,a):i(r(e),t,n,v,s,a,1);break}}}function x(e){var t=e.prev,n=e,r=e.next;if(y(t,n,r)>=0)return!1;for(var i=t.x,x=n.x,o=r.x,u=t.y,f=n.y,v=r.y,s=i<x?i<o?i:o:x<o?x:o,a=u<f?u<v?u:v:f<v?f:v,c=i>x?i>o?i:o:x>o?x:o,p=u>f?u>v?u:v:f>v?f:v,l=r.next;l!==t;){if(l.x>=s&&l.x<=c&&l.y>=a&&l.y<=p&&h(i,u,x,f,o,v,l.x,l.y)&&y(l.prev,l,l.next)>=0)return!1;l=l.next}return!0}function o(e,t,n,r){var i=e.prev,x=e,o=e.next;if(y(i,x,o)>=0)return!1;for(var u=i.x,f=x.x,v=o.x,s=i.y,a=x.y,p=o.y,l=u<f?u<v?u:v:f<v?f:v,w=s<a?s<p?s:p:a<p?a:p,_=u>f?u>v?u:v:f>v?f:v,Z=s>a?s>p?s:p:a>p?a:p,g=c(l,w,t,n,r),d=c(_,Z,t,n,r),b=e.prevZ,m=e.nextZ;b&&b.z>=g&&m&&m.z<=d;){if(b.x>=l&&b.x<=_&&b.y>=w&&b.y<=Z&&b!==i&&b!==o&&h(u,s,f,a,v,p,b.x,b.y)&&y(b.prev,b,b.next)>=0)return!1;if(b=b.prevZ,m.x>=l&&m.x<=_&&m.y>=w&&m.y<=Z&&m!==i&&m!==o&&h(u,s,f,a,v,p,m.x,m.y)&&y(m.prev,m,m.next)>=0)return!1;m=m.nextZ}for(;b&&b.z>=g;){if(b.x>=l&&b.x<=_&&b.y>=w&&b.y<=Z&&b!==i&&b!==o&&h(u,s,f,a,v,p,b.x,b.y)&&y(b.prev,b,b.next)>=0)return!1;b=b.prevZ}for(;m&&m.z<=d;){if(m.x>=l&&m.x<=_&&m.y>=w&&m.y<=Z&&m!==i&&m!==o&&h(u,s,f,a,v,p,m.x,m.y)&&y(m.prev,m,m.next)>=0)return!1;m=m.nextZ}return!0}function u(e,t,n){var i=e;do{var x=i.prev,o=i.next.next;!w(x,o)&&_(x,i,i.next,o)&&d(x,o)&&d(o,x)&&(t.push(x.i/n|0),t.push(i.i/n|0),t.push(o.i/n|0),k(i),k(i.next),i=e=o),i=i.next}while(i!==e);return r(i)}function f(e,t,n,x,o,u){var f=e;do{for(var v=f.next.next;v!==f.prev;){if(f.i!==v.i&&l(f,v)){var s=b(f,v);return f=r(f,f.next),s=r(s,s.next),i(f,t,n,x,o,u,0),void i(s,t,n,x,o,u,0)}v=v.next}f=f.next}while(f!==e)}function v(e,t){return e.x-t.x}function s(e,t){var n=function(e,t){var n,r=t,i=e.x,x=e.y,o=-1/0;do{if(x<=r.y&&x>=r.next.y&&r.next.y!==r.y){var u=r.x+(x-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(u<=i&&u>o&&(o=u,n=r.x<r.next.x?r:r.next,u===i))return n}r=r.next}while(r!==t);if(!n)return null;var f,v=n,s=n.x,c=n.y,p=1/0;r=n;do{i>=r.x&&r.x>=s&&i!==r.x&&h(x<c?i:o,x,s,c,x<c?o:i,x,r.x,r.y)&&(f=Math.abs(x-r.y)/(i-r.x),d(r,e)&&(f<p||f===p&&(r.x>n.x||r.x===n.x&&a(n,r)))&&(n=r,p=f)),r=r.next}while(r!==v);return n}(e,t);if(!n)return t;var i=b(n,e);return r(i,i.next),r(n,n.next)}function a(e,t){return y(e.prev,e,t.prev)<0&&y(t.next,e,e.next)<0}function c(e,t,n,r,i){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-n)*i|0)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-r)*i|0)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function p(e){var t=e,n=e;do{(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next}while(t!==e);return n}function h(e,t,n,r,i,x,o,u){return(i-o)*(t-u)>=(e-o)*(x-u)&&(e-o)*(r-u)>=(n-o)*(t-u)&&(n-o)*(x-u)>=(i-o)*(r-u)}function l(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&_(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}(e,t)&&(d(e,t)&&d(t,e)&&function(e,t){var n=e,r=!1,i=(e.x+t.x)/2,x=(e.y+t.y)/2;do{n.y>x!=n.next.y>x&&n.next.y!==n.y&&i<(n.next.x-n.x)*(x-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next}while(n!==e);return r}(e,t)&&(y(e.prev,e,t.prev)||y(e,t.prev,t))||w(e,t)&&y(e.prev,e,e.next)>0&&y(t.prev,t,t.next)>0)}function y(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function w(e,t){return e.x===t.x&&e.y===t.y}function _(e,t,n,r){var i=g(y(e,t,n)),x=g(y(e,t,r)),o=g(y(n,r,e)),u=g(y(n,r,t));return i!==x&&o!==u||(!(0!==i||!Z(e,n,t))||(!(0!==x||!Z(e,r,t))||(!(0!==o||!Z(n,e,r))||!(0!==u||!Z(n,t,r)))))}function Z(e,t,n){return t.x<=Math.max(e.x,n.x)&&t.x>=Math.min(e.x,n.x)&&t.y<=Math.max(e.y,n.y)&&t.y>=Math.min(e.y,n.y)}function g(e){return e>0?1:e<0?-1:0}function d(e,t){return y(e.prev,e,e.next)<0?y(e,t,e.next)>=0&&y(e,e.prev,t)>=0:y(e,t,e.prev)<0||y(e,e.next,t)<0}function b(e,t){var n=new M(e.i,e.x,e.y),r=new M(t.i,t.x,t.y),i=e.next,x=t.prev;return e.next=t,t.prev=e,n.next=i,i.prev=n,r.next=n,n.prev=r,x.next=r,r.prev=x,r}function m(e,t,n,r){var i=new M(e,t,n);return r?(i.next=r.next,i.prev=r,r.next.prev=i,r.next=i):(i.prev=i,i.next=i),i}function k(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function M(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function z(e,t,n,r){for(var i=0,x=t,o=n-r;x<n;x+=r)i+=(e[o]-e[x])*(e[x+1]+e[o+1]),o=x;return i}e.exports=t,e.exports.default=t,t.deviation=function(e,t,n,r){var i=t&&t.length,x=i?t[0]*n:e.length,o=Math.abs(z(e,0,x,n));if(i)for(var u=0,f=t.length;u<f;u++){var v=t[u]*n,s=u<f-1?t[u+1]*n:e.length;o-=Math.abs(z(e,v,s,n))}var a=0;for(u=0;u<r.length;u+=3){var c=r[u]*n,p=r[u+1]*n,h=r[u+2]*n;a+=Math.abs((e[c]-e[h])*(e[p+1]-e[c+1])-(e[c]-e[p])*(e[h+1]-e[c+1]))}return 0===o&&0===a?0:Math.abs((a-o)/o)},t.flatten=function(e){for(var t=e[0][0].length,n={vertices:[],holes:[],dimensions:t},r=0,i=0;i<e.length;i++){for(var x=0;x<e[i].length;x++)for(var o=0;o<t;o++)n.vertices.push(e[i][x][o]);i>0&&(r+=e[i-1].length,n.holes.push(r))}return n}},1343:e=>{var t=Object.prototype.hasOwnProperty,n="~";function r(){}function i(e,t,n){this.fn=e,this.context=t,this.once=n||!1}function x(e,t,r,x,o){if("function"!=typeof r)throw new TypeError("The listener must be a function");var u=new i(r,x||e,o),f=n?n+t:t;return e._events[f]?e._events[f].fn?e._events[f]=[e._events[f],u]:e._events[f].push(u):(e._events[f]=u,e._eventsCount++),e}function o(e,t){0==--e._eventsCount?e._events=new r:delete e._events[t]}function u(){this._events=new r,this._eventsCount=0}Object.create&&(r.prototype=Object.create(null),(new r).__proto__||(n=!1)),u.prototype.eventNames=function(){var e,r,i=[];if(0===this._eventsCount)return i;for(r in e=this._events)t.call(e,r)&&i.push(n?r.slice(1):r);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(e)):i},u.prototype.listeners=function(e){var t=n?n+e:e,r=this._events[t];if(!r)return[];if(r.fn)return[r.fn];for(var i=0,x=r.length,o=new Array(x);i<x;i++)o[i]=r[i].fn;return o},u.prototype.listenerCount=function(e){var t=n?n+e:e,r=this._events[t];return r?r.fn?1:r.length:0},u.prototype.emit=function(e,t,r,i,x,o){var u=n?n+e:e;if(!this._events[u])return!1;var f,v,s=this._events[u],a=arguments.length;if(s.fn){switch(s.once&&this.removeListener(e,s.fn,void 0,!0),a){case 1:return s.fn.call(s.context),!0;case 2:return s.fn.call(s.context,t),!0;case 3:return s.fn.call(s.context,t,r),!0;case 4:return s.fn.call(s.context,t,r,i),!0;case 5:return s.fn.call(s.context,t,r,i,x),!0;case 6:return s.fn.call(s.context,t,r,i,x,o),!0}for(v=1,f=new Array(a-1);v<a;v++)f[v-1]=arguments[v];s.fn.apply(s.context,f)}else{var c,p=s.length;for(v=0;v<p;v++)switch(s[v].once&&this.removeListener(e,s[v].fn,void 0,!0),a){case 1:s[v].fn.call(s[v].context);break;case 2:s[v].fn.call(s[v].context,t);break;case 3:s[v].fn.call(s[v].context,t,r);break;case 4:s[v].fn.call(s[v].context,t,r,i);break;default:if(!f)for(c=1,f=new Array(a-1);c<a;c++)f[c-1]=arguments[c];s[v].fn.apply(s[v].context,f)}}return!0},u.prototype.on=function(e,t,n){return x(this,e,t,n,!1)},u.prototype.once=function(e,t,n){return x(this,e,t,n,!0)},u.prototype.removeListener=function(e,t,r,i){var x=n?n+e:e;if(!this._events[x])return this;if(!t)return o(this,x),this;var u=this._events[x];if(u.fn)u.fn!==t||i&&!u.once||r&&u.context!==r||o(this,x);else{for(var f=0,v=[],s=u.length;f<s;f++)(u[f].fn!==t||i&&!u[f].once||r&&u[f].context!==r)&&v.push(u[f]);v.length?this._events[x]=1===v.length?v[0]:v:o(this,x)}return this},u.prototype.removeAllListeners=function(e){var t;return e?(t=n?n+e:e,this._events[t]&&o(this,t)):(this._events=new r,this._eventsCount=0),this},u.prototype.off=u.prototype.removeListener,u.prototype.addListener=u.prototype.on,u.prefixed=n,u.EventEmitter=u,e.exports=u},413:(e,t,n)=>{n.d(t,{A:()=>r});const r=n(1343)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,