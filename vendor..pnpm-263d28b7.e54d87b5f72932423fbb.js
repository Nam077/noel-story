"use strict";(self.webpackChunkpixijs_game=self.webpackChunkpixijs_game||[]).push([[929],{9032:(e,t,r)=>{r.d(t,{mc:()=>V,u:()=>L,ig:()=>O,fR:()=>j});var i=r(413),n=r(1598),s=r(9621),o=r(1026),h=r(1081),a=r(7371),d=r(4124),l=r(2597),u=r(8143);const p={get isCachedAsTexture(){return!!this.renderGroup?.isCachedAsTexture},cacheAsTexture(e){"boolean"==typeof e&&!1===e?this.disableRenderGroup():(this.enableRenderGroup(),this.renderGroup.enableCacheAsTexture(!0===e?{}:e))},updateCacheTexture(){this.renderGroup?.updateCacheTexture()},get cacheAsBitmap(){return this.isCachedAsTexture},set cacheAsBitmap(e){(0,l.t6)("v8.6.0","cacheAsBitmap is deprecated, use cacheAsTexture instead."),this.cacheAsTexture(e)}};var c=r(2510);const m={allowChildren:!0,removeChildren(e=0,t){const r=t??this.children.length,i=r-e,n=[];if(i>0&&i<=r){for(let t=r-1;t>=e;t--){const e=this.children[t];e&&(n.push(e),e.parent=null)}(0,c.d)(this.children,e,r);const t=this.renderGroup||this.parentRenderGroup;t&&t.removeChildren(n);for(let e=0;e<n.length;++e)this.emit("childRemoved",n[e],this,e),n[e].emit("removed",this);return n}if(0===i&&0===this.children.length)return n;throw new RangeError("removeChildren: numeric values are outside the acceptable range.")},removeChildAt(e){const t=this.getChildAt(e);return this.removeChild(t)},getChildAt(e){if(e<0||e>=this.children.length)throw new Error(`getChildAt: Index (${e}) does not exist.`);return this.children[e]},setChildIndex(e,t){if(t<0||t>=this.children.length)throw new Error(`The index ${t} supplied is out of bounds ${this.children.length}`);this.getChildIndex(e),this.addChildAt(e,t)},getChildIndex(e){const t=this.children.indexOf(e);if(-1===t)throw new Error("The supplied Container must be a child of the caller");return t},addChildAt(e,t){this.allowChildren||(0,l.t6)(l.lj,"addChildAt: Only Containers will be allowed to add children in v8.0.0");const{children:r}=this;if(t<0||t>r.length)throw new Error(`${e}addChildAt: The index ${t} supplied is out of bounds ${r.length}`);if(e.parent){const r=e.parent.children.indexOf(e);if(e.parent===this&&r===t)return e;-1!==r&&e.parent.children.splice(r,1)}t===r.length?r.push(e):r.splice(t,0,e),e.parent=this,e.didChange=!0,e._updateFlags=15;const i=this.renderGroup||this.parentRenderGroup;return i&&i.addChild(e),this.sortableChildren&&(this.sortDirty=!0),this.emit("childAdded",e,this,t),e.emit("added",this),e},swapChildren(e,t){if(e===t)return;const r=this.getChildIndex(e),i=this.getChildIndex(t);this.children[r]=t,this.children[i]=e;const n=this.renderGroup||this.parentRenderGroup;n&&(n.structureDidChange=!0),this._didContainerChangeTick++},removeFromParent(){this.parent?.removeChild(this)},reparentChild(...e){return 1===e.length?this.reparentChildAt(e[0],this.children.length):(e.forEach((e=>this.reparentChildAt(e,this.children.length))),e[0])},reparentChildAt(e,t){if(e.parent===this)return this.setChildIndex(e,t),e;const r=e.worldTransform.clone();e.removeFromParent(),this.addChildAt(e,t);const i=this.worldTransform.clone();return i.invert(),r.prepend(i),e.setFromMatrix(r),e}};var f=r(6276),x=r(9399);const g={_maskEffect:null,_maskOptions:{inverse:!1},_filterEffect:null,effects:[],_markStructureAsChanged(){const e=this.renderGroup||this.parentRenderGroup;e&&(e.structureDidChange=!0)},addEffect(e){-1===this.effects.indexOf(e)&&(this.effects.push(e),this.effects.sort(((e,t)=>e.priority-t.priority)),this._markStructureAsChanged(),this._updateIsSimple())},removeEffect(e){const t=this.effects.indexOf(e);-1!==t&&(this.effects.splice(t,1),this._markStructureAsChanged(),this._updateIsSimple())},set mask(e){const t=this._maskEffect;t?.mask!==e&&(t&&(this.removeEffect(t),x.B.returnMaskEffect(t),this._maskEffect=null),null!=e&&(this._maskEffect=x.B.getMaskEffect(e),this.addEffect(this._maskEffect)))},setMask(e){this._maskOptions={...this._maskOptions,...e},e.mask&&(this.mask=e.mask),this._markStructureAsChanged()},get mask(){return this._maskEffect?.mask},set filters(e){!Array.isArray(e)&&e&&(e=[e]);const t=this._filterEffect||(this._filterEffect=new f.a),r=e?.length>0,i=r!==t.filters?.length>0;e=Array.isArray(e)?e.slice(0):e,t.filters=Object.freeze(e),i&&(r?this.addEffect(t):(this.removeEffect(t),t.filters=e??null))},get filters(){return this._filterEffect?.filters},set filterArea(e){this._filterEffect||(this._filterEffect=new f.a),this._filterEffect.filterArea=e},get filterArea(){return this._filterEffect?.filterArea}},_={label:null,get name(){return(0,l.t6)(l.lj,"Container.name property has been removed, use Container.label instead"),this.label},set name(e){(0,l.t6)(l.lj,"Container.name property has been removed, use Container.label instead"),this.label=e},getChildByName(e,t=!1){return this.getChildByLabel(e,t)},getChildByLabel(e,t=!1){const r=this.children;for(let t=0;t<r.length;t++){const i=r[t];if(i.label===e||e instanceof RegExp&&e.test(i.label))return i}if(t)for(let t=0;t<r.length;t++){const i=r[t].getChildByLabel(e,!0);if(i)return i}return null},getChildrenByLabel(e,t=!1,r=[]){const i=this.children;for(let t=0;t<i.length;t++){const n=i[t];(n.label===e||e instanceof RegExp&&e.test(n.label))&&r.push(n)}if(t)for(let t=0;t<i.length;t++)i[t].getChildrenByLabel(e,!0,r);return r}};var C=r(1278),b=r(5249),T=r(7520);function G(e){return((255&e)<<16)+(65280&e)+(e>>16&255)}const w={getGlobalAlpha(e){if(e)return this.renderGroup?this.renderGroup.worldAlpha:this.parentRenderGroup?this.parentRenderGroup.worldAlpha*this.alpha:this.alpha;let t=this.alpha,r=this.parent;for(;r;)t*=r.alpha,r=r.parent;return t},getGlobalTransform(e,t){if(t)return e.copyFrom(this.worldTransform);this.updateLocalTransform();const r=(0,C.Ek)(this,b.u.get().identity());return e.appendFrom(this.localTransform,r),b.u.return(r),e},getGlobalTint(e){if(e)return this.renderGroup?G(this.renderGroup.worldColor):this.parentRenderGroup?G((0,T.j)(this.localColor,this.parentRenderGroup.worldColor)):this.tint;let t=this.localColor,r=this.parent;for(;r;)t=(0,T.j)(t,r.localColor),r=r.parent;return G(t)}};var y=r(3475),R=r(98);function v(e,t){const r=e.children;for(let e=0;e<r.length;e++){const i=r[e],n=i.uid,s=(65535&i._didViewChangeTick)<<16|65535&i._didContainerChangeTick,o=t.index;t.data[o]===n&&t.data[o+1]===s||(t.data[t.index]=n,t.data[t.index+1]=s,t.didChange=!0),t.index=o+2,i.children.length&&v(i,t)}return t.didChange}const Y=new o.u,X={_localBoundsCacheId:-1,_localBoundsCacheData:null,_setWidth(e,t){const r=Math.sign(this.scale.x)||1;this.scale.x=0!==t?e/t*r:r},_setHeight(e,t){const r=Math.sign(this.scale.y)||1;this.scale.y=0!==t?e/t*r:r},getLocalBounds(){this._localBoundsCacheData||(this._localBoundsCacheData={data:[],index:1,didChange:!1,localBounds:new y.c});const e=this._localBoundsCacheData;return e.index=1,e.didChange=!1,e.data[0]!==this._didViewChangeTick&&(e.didChange=!0,e.data[0]=this._didViewChangeTick),v(this,e),e.didChange&&(0,R.n)(this,e.localBounds,Y),e.localBounds},getBounds(e,t){return(0,C.fB)(this,e,t||new y.c)}},A={_onRender:null,set onRender(e){const t=this.renderGroup||this.parentRenderGroup;if(!e)return this._onRender&&t?.removeOnRender(this),void(this._onRender=null);this._onRender||t?.addOnRender(this),this._onRender=e},get onRender(){return this._onRender}},k={_zIndex:0,sortDirty:!1,sortableChildren:!1,get zIndex(){return this._zIndex},set zIndex(e){this._zIndex!==e&&(this._zIndex=e,this.depthOfChildModified())},depthOfChildModified(){this.parent&&(this.parent.sortableChildren=!0,this.parent.sortDirty=!0),this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0)},sortChildren(){this.sortDirty&&(this.sortDirty=!1,this.children.sort(B))}};function B(e,t){return e._zIndex-t._zIndex}var D=r(5638);const P={getGlobalPosition(e=new D.b,t=!1){return this.parent?this.parent.toGlobal(this._position,e,t):(e.x=this._position.x,e.y=this._position.y),e},toGlobal(e,t,r=!1){const i=this.getGlobalTransform(b.u.get(),r);return t=i.apply(e,t),b.u.return(i),t},toLocal(e,t,r,i){t&&(e=t.toGlobal(e,r,i));const n=this.getGlobalTransform(b.u.get(),i);return r=n.applyInverse(e,r),b.u.return(n),r}};var I=r(3009),M=r(1448);class S{constructor(){this.renderPipeId="renderGroup",this.root=null,this.canBundle=!1,this.renderGroupParent=null,this.renderGroupChildren=[],this.worldTransform=new o.u,this.worldColorAlpha=4294967295,this.worldColor=16777215,this.worldAlpha=1,this.childrenToUpdate=Object.create(null),this.updateTick=0,this.childrenRenderablesToUpdate={list:[],index:0},this.structureDidChange=!0,this.instructionSet=new I.L,this._onRenderContainers=[],this.textureNeedsUpdate=!0,this.isCachedAsTexture=!1,this._matrixDirty=7}init(e){this.root=e,e._onRender&&this.addOnRender(e),e.didChange=!0;const t=e.children;for(let e=0;e<t.length;e++)this.addChild(t[e])}enableCacheAsTexture(e={}){this.textureOptions=e,this.isCachedAsTexture=!0,this.textureNeedsUpdate=!0}disableCacheAsTexture(){this.isCachedAsTexture=!1,this.texture&&(M.W.returnTexture(this.texture),this.texture=null)}updateCacheTexture(){this.textureNeedsUpdate=!0}reset(){this.renderGroupChildren.length=0;for(const e in this.childrenToUpdate){const t=this.childrenToUpdate[e];t.list.fill(null),t.index=0}this.childrenRenderablesToUpdate.index=0,this.childrenRenderablesToUpdate.list.fill(null),this.root=null,this.updateTick=0,this.structureDidChange=!0,this._onRenderContainers.length=0,this.renderGroupParent=null,this.disableCacheAsTexture()}get localTransform(){return this.root.localTransform}addRenderGroupChild(e){e.renderGroupParent&&e.renderGroupParent._removeRenderGroupChild(e),e.renderGroupParent=this,this.renderGroupChildren.push(e)}_removeRenderGroupChild(e){const t=this.renderGroupChildren.indexOf(e);t>-1&&this.renderGroupChildren.splice(t,1),e.renderGroupParent=null}addChild(e){if(this.structureDidChange=!0,e.parentRenderGroup=this,e.updateTick=-1,e.parent===this.root?e.relativeRenderGroupDepth=1:e.relativeRenderGroupDepth=e.parent.relativeRenderGroupDepth+1,e.didChange=!0,this.onChildUpdate(e),e.renderGroup)return void this.addRenderGroupChild(e.renderGroup);e._onRender&&this.addOnRender(e);const t=e.children;for(let e=0;e<t.length;e++)this.addChild(t[e])}removeChild(e){if(this.structureDidChange=!0,e._onRender&&(e.renderGroup||this.removeOnRender(e)),e.parentRenderGroup=null,e.renderGroup)return void this._removeRenderGroupChild(e.renderGroup);const t=e.children;for(let e=0;e<t.length;e++)this.removeChild(t[e])}removeChildren(e){for(let t=0;t<e.length;t++)this.removeChild(e[t])}onChildUpdate(e){let t=this.childrenToUpdate[e.relativeRenderGroupDepth];t||(t=this.childrenToUpdate[e.relativeRenderGroupDepth]={index:0,list:[]}),t.list[t.index++]=e}updateRenderable(e){e.globalDisplayStatus<7||(this.instructionSet.renderPipes[e.renderPipeId].updateRenderable(e),e.didViewUpdate=!1)}onChildViewUpdate(e){this.childrenRenderablesToUpdate.list[this.childrenRenderablesToUpdate.index++]=e}get isRenderable(){return 7===this.root.localDisplayStatus&&this.worldAlpha>0}addOnRender(e){this._onRenderContainers.push(e)}removeOnRender(e){this._onRenderContainers.splice(this._onRenderContainers.indexOf(e),1)}runOnRender(){for(let e=0;e<this._onRenderContainers.length;e++)this._onRenderContainers[e]._onRender()}destroy(){this.disableCacheAsTexture(),this.renderGroupParent=null,this.root=null,this.childrenRenderablesToUpdate=null,this.childrenToUpdate=null,this.renderGroupChildren=null,this._onRenderContainers=null,this.instructionSet=null}getChildren(e=[]){const t=this.root.children;for(let r=0;r<t.length;r++)this._getChildren(t[r],e);return e}_getChildren(e,t=[]){if(t.push(e),e.renderGroup)return t;const r=e.children;for(let e=0;e<r.length;e++)this._getChildren(r[e],t);return t}invalidateMatrices(){this._matrixDirty=7}get inverseWorldTransform(){return 1&this._matrixDirty?(this._matrixDirty&=-2,this._inverseWorldTransform||(this._inverseWorldTransform=new o.u),this._inverseWorldTransform.copyFrom(this.worldTransform).invert()):this._inverseWorldTransform}get textureOffsetInverseTransform(){return 2&this._matrixDirty?(this._matrixDirty&=-3,this._textureOffsetInverseTransform||(this._textureOffsetInverseTransform=new o.u),this._textureOffsetInverseTransform.copyFrom(this.inverseWorldTransform).translate(-this._textureBounds.x,-this._textureBounds.y)):this._textureOffsetInverseTransform}get inverseParentTextureTransform(){if(!(4&this._matrixDirty))return this._inverseParentTextureTransform;this._matrixDirty&=-5;const e=this._parentCacheAsTextureRenderGroup;return e?(this._inverseParentTextureTransform||(this._inverseParentTextureTransform=new o.u),this._inverseParentTextureTransform.copyFrom(this.worldTransform).prepend(e.inverseWorldTransform).translate(-e._textureBounds.x,-e._textureBounds.y)):this.worldTransform}get cacheToLocalTransform(){return this._parentCacheAsTextureRenderGroup?this._parentCacheAsTextureRenderGroup.textureOffsetInverseTransform:null}}const U=new a.o(null),E=new a.o(null),F=new a.o(null,1,1),O=1,L=2,j=4;class V extends i.A{constructor(e={}){super(),this.uid=(0,d.L)("renderable"),this._updateFlags=15,this.renderGroup=null,this.parentRenderGroup=null,this.parentRenderGroupIndex=0,this.didChange=!1,this.didViewUpdate=!1,this.relativeRenderGroupDepth=0,this.children=[],this.parent=null,this.includeInBuild=!0,this.measurable=!0,this.isSimple=!0,this.updateTick=-1,this.localTransform=new o.u,this.relativeGroupTransform=new o.u,this.groupTransform=this.relativeGroupTransform,this.destroyed=!1,this._position=new a.o(this,0,0),this._scale=F,this._pivot=E,this._skew=U,this._cx=1,this._sx=0,this._cy=0,this._sy=1,this._rotation=0,this.localColor=16777215,this.localAlpha=1,this.groupAlpha=1,this.groupColor=16777215,this.groupColorAlpha=4294967295,this.localBlendMode="inherit",this.groupBlendMode="normal",this.localDisplayStatus=7,this.globalDisplayStatus=7,this._didContainerChangeTick=0,this._didViewChangeTick=0,this._didLocalTransformChangeId=-1,this.effects=[],function(e,t,r={}){for(const i in t)r[i]||void 0===t[i]||(e[i]=t[i])}(this,e,{children:!0,parent:!0,effects:!0}),e.children?.forEach((e=>this.addChild(e))),e.parent?.addChild(this)}static mixin(e){Object.defineProperties(V.prototype,Object.getOwnPropertyDescriptors(e))}set _didChangeId(e){this._didViewChangeTick=e>>12&4095,this._didContainerChangeTick=4095&e}get _didChangeId(){return 4095&this._didContainerChangeTick|(4095&this._didViewChangeTick)<<12}addChild(...e){if(this.allowChildren||(0,l.t6)(l.lj,"addChild: Only Containers will be allowed to add children in v8.0.0"),e.length>1){for(let t=0;t<e.length;t++)this.addChild(e[t]);return e[0]}const t=e[0],r=this.renderGroup||this.parentRenderGroup;return t.parent===this?(this.children.splice(this.children.indexOf(t),1),this.children.push(t),r&&(r.structureDidChange=!0),t):(t.parent&&t.parent.removeChild(t),this.children.push(t),this.sortableChildren&&(this.sortDirty=!0),t.parent=this,t.didChange=!0,t._updateFlags=15,r&&r.addChild(t),this.emit("childAdded",t,this,this.children.length-1),t.emit("added",this),this._didViewChangeTick++,0!==t._zIndex&&t.depthOfChildModified(),t)}removeChild(...e){if(e.length>1){for(let t=0;t<e.length;t++)this.removeChild(e[t]);return e[0]}const t=e[0],r=this.children.indexOf(t);return r>-1&&(this._didViewChangeTick++,this.children.splice(r,1),this.renderGroup?this.renderGroup.removeChild(t):this.parentRenderGroup&&this.parentRenderGroup.removeChild(t),t.parent=null,this.emit("childRemoved",t,this,r),t.emit("removed",this)),t}_onUpdate(e){e&&e===this._skew&&this._updateSkew(),this._didContainerChangeTick++,this.didChange||(this.didChange=!0,this.parentRenderGroup&&this.parentRenderGroup.onChildUpdate(this))}set isRenderGroup(e){!!this.renderGroup!==e&&(e?this.enableRenderGroup():this.disableRenderGroup())}get isRenderGroup(){return!!this.renderGroup}enableRenderGroup(){if(this.renderGroup)return;const e=this.parentRenderGroup;e?.removeChild(this),this.renderGroup=u.Z.get(S,this),this.groupTransform=o.u.IDENTITY,e?.addChild(this),this._updateIsSimple()}disableRenderGroup(){if(!this.renderGroup)return;const e=this.parentRenderGroup;e?.removeChild(this),u.Z.return(this.renderGroup),this.renderGroup=null,this.groupTransform=this.relativeGroupTransform,e?.addChild(this),this._updateIsSimple()}_updateIsSimple(){this.isSimple=!this.renderGroup&&0===this.effects.length}get worldTransform(){return this._worldTransform||(this._worldTransform=new o.u),this.renderGroup?this._worldTransform.copyFrom(this.renderGroup.worldTransform):this.parentRenderGroup&&this._worldTransform.appendFrom(this.relativeGroupTransform,this.parentRenderGroup.worldTransform),this._worldTransform}get x(){return this._position.x}set x(e){this._position.x=e}get y(){return this._position.y}set y(e){this._position.y=e}get position(){return this._position}set position(e){this._position.copyFrom(e)}get rotation(){return this._rotation}set rotation(e){this._rotation!==e&&(this._rotation=e,this._onUpdate(this._skew))}get angle(){return this.rotation*h.bO}set angle(e){this.rotation=e*h.Td}get pivot(){return this._pivot===E&&(this._pivot=new a.o(this,0,0)),this._pivot}set pivot(e){this._pivot===E&&(this._pivot=new a.o(this,0,0)),"number"==typeof e?this._pivot.set(e):this._pivot.copyFrom(e)}get skew(){return this._skew===U&&(this._skew=new a.o(this,0,0)),this._skew}set skew(e){this._skew===U&&(this._skew=new a.o(this,0,0)),this._skew.copyFrom(e)}get scale(){return this._scale===F&&(this._scale=new a.o(this,1,1)),this._scale}set scale(e){this._scale===F&&(this._scale=new a.o(this,0,0)),"number"==typeof e?this._scale.set(e):this._scale.copyFrom(e)}get width(){return Math.abs(this.scale.x*this.getLocalBounds().width)}set width(e){const t=this.getLocalBounds().width;this._setWidth(e,t)}get height(){return Math.abs(this.scale.y*this.getLocalBounds().height)}set height(e){const t=this.getLocalBounds().height;this._setHeight(e,t)}getSize(e){e||(e={});const t=this.getLocalBounds();return e.width=Math.abs(this.scale.x*t.width),e.height=Math.abs(this.scale.y*t.height),e}setSize(e,t){const r=this.getLocalBounds();"object"==typeof e?(t=e.height??e.width,e=e.width):t??(t=e),void 0!==e&&this._setWidth(e,r.width),void 0!==t&&this._setHeight(t,r.height)}_updateSkew(){const e=this._rotation,t=this._skew;this._cx=Math.cos(e+t._y),this._sx=Math.sin(e+t._y),this._cy=-Math.sin(e-t._x),this._sy=Math.cos(e-t._x)}updateTransform(e){return this.position.set("number"==typeof e.x?e.x:this.position.x,"number"==typeof e.y?e.y:this.position.y),this.scale.set("number"==typeof e.scaleX?e.scaleX||1:this.scale.x,"number"==typeof e.scaleY?e.scaleY||1:this.scale.y),this.rotation="number"==typeof e.rotation?e.rotation:this.rotation,this.skew.set("number"==typeof e.skewX?e.skewX:this.skew.x,"number"==typeof e.skewY?e.skewY:this.skew.y),this.pivot.set("number"==typeof e.pivotX?e.pivotX:this.pivot.x,"number"==typeof e.pivotY?e.pivotY:this.pivot.y),this}setFromMatrix(e){e.decompose(this)}updateLocalTransform(){const e=this._didContainerChangeTick;if(this._didLocalTransformChangeId===e)return;this._didLocalTransformChangeId=e;const t=this.localTransform,r=this._scale,i=this._pivot,n=this._position,s=r._x,o=r._y,h=i._x,a=i._y;t.a=this._cx*s,t.b=this._sx*s,t.c=this._cy*o,t.d=this._sy*o,t.tx=n._x-(h*t.a+a*t.c),t.ty=n._y-(h*t.b+a*t.d)}set alpha(e){e!==this.localAlpha&&(this.localAlpha=e,this._updateFlags|=O,this._onUpdate())}get alpha(){return this.localAlpha}set tint(e){const t=n.Q.shared.setValue(e??16777215).toBgrNumber();t!==this.localColor&&(this.localColor=t,this._updateFlags|=O,this._onUpdate())}get tint(){return G(this.localColor)}set blendMode(e){this.localBlendMode!==e&&(this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0),this._updateFlags|=L,this.localBlendMode=e,this._onUpdate())}get blendMode(){return this.localBlendMode}get visible(){return!!(2&this.localDisplayStatus)}set visible(e){const t=e?2:0;(2&this.localDisplayStatus)!==t&&(this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0),this._updateFlags|=j,this.localDisplayStatus^=2,this._onUpdate())}get culled(){return!(4&this.localDisplayStatus)}set culled(e){const t=e?0:4;(4&this.localDisplayStatus)!==t&&(this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0),this._updateFlags|=j,this.localDisplayStatus^=4,this._onUpdate())}get renderable(){return!!(1&this.localDisplayStatus)}set renderable(e){const t=e?1:0;(1&this.localDisplayStatus)!==t&&(this._updateFlags|=j,this.localDisplayStatus^=1,this.parentRenderGroup&&(this.parentRenderGroup.structureDidChange=!0),this._onUpdate())}get isRenderable(){return 7===this.localDisplayStatus&&this.groupAlpha>0}destroy(e=!1){if(this.destroyed)return;let t;this.destroyed=!0,this.children.length&&(t=this.removeChildren(0,this.children.length)),this.removeFromParent(),this.parent=null,this._maskEffect=null,this._filterEffect=null,this.effects=null,this._position=null,this._scale=null,this._pivot=null,this._skew=null,this.emit("destroyed",this),this.removeAllListeners();if(("boolean"==typeof e?e:e?.children)&&t)for(let r=0;r<t.length;++r)t[r].destroy(e);this.renderGroup?.destroy(),this.renderGroup=null}}V.mixin(m),V.mixin(P),V.mixin(A),V.mixin(X),V.mixin(g),V.mixin(_),V.mixin(k),V.mixin(s.E),V.mixin(p),V.mixin(w)},7043:(e,t,r)=>{r.d(t,{_:()=>n});var i=r(9084);class n{constructor(e){this._renderer=e}updateRenderable(){}destroyRenderable(){}validateRenderable(){return!1}addRenderable(e,t){this._renderer.renderPipes.batch.break(t),t.add(e)}execute(e){e.isRenderable&&e.render(this._renderer)}destroy(){this._renderer=null}}n.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"customRender"}},5687:(e,t,r)=>{r.d(t,{a:()=>d});var i=r(9084),n=r(1026),s=r(8143),o=r(5235),h=r(2638);const a=new n.u;class d{constructor(e){this._renderer=e}addRenderGroup(e,t){e.isCachedAsTexture?this._addRenderableCacheAsTexture(e,t):this._addRenderableDirect(e,t)}execute(e){e.isRenderable&&(e.isCachedAsTexture?this._executeCacheAsTexture(e):this._executeDirect(e))}destroy(){this._renderer=null}_addRenderableDirect(e,t){this._renderer.renderPipes.batch.break(t),e._batchableRenderGroup&&(s.Z.return(e._batchableRenderGroup),e._batchableRenderGroup=null),t.add(e)}_addRenderableCacheAsTexture(e,t){const r=e._batchableRenderGroup??(e._batchableRenderGroup=s.Z.get(o.K));r.renderable=e.root,r.transform=e.root.relativeGroupTransform,r.texture=e.texture,r.bounds=e._textureBounds,t.add(e),this._renderer.renderPipes.batch.addToBatch(r,t)}_executeCacheAsTexture(e){if(e.textureNeedsUpdate){e.textureNeedsUpdate=!1;const t=a.identity().translate(-e._textureBounds.x,-e._textureBounds.y);this._renderer.renderTarget.push(e.texture,!0,null,e.texture.frame),this._renderer.globalUniforms.push({worldTransformMatrix:t,worldColor:4294967295}),(0,h.j)(e,this._renderer.renderPipes),this._renderer.renderTarget.finishRenderPass(),this._renderer.renderTarget.pop(),this._renderer.globalUniforms.pop()}e._batchableRenderGroup._batcher.updateElement(e._batchableRenderGroup),e._batchableRenderGroup._batcher.geometry.buffers[0].update()}_executeDirect(e){this._renderer.globalUniforms.push({worldTransformMatrix:e.inverseParentTextureTransform,worldColor:e.worldColorAlpha}),(0,h.j)(e,this._renderer.renderPipes),this._renderer.globalUniforms.pop()}}d.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"renderGroup"}},2698:(e,t,r)=>{r.d(t,{b:()=>_});var i=r(9084),n=r(1026),s=r(1448),o=r(3475),h=r(8235);function a(e,t){t||(t=0);for(let r=t;r<e.length&&e[r];r++)e[r]=null}var d=r(2638),l=r(9032),u=r(7520);const p=new l.mc,c=l.fR|l.ig|l.u;function m(e,t=!1){!function(e){const t=e.root;let r;if(e.renderGroupParent){const i=e.renderGroupParent;e.worldTransform.appendFrom(t.relativeGroupTransform,i.worldTransform),e.worldColor=(0,u.j)(t.groupColor,i.worldColor),r=t.groupAlpha*i.worldAlpha}else e.worldTransform.copyFrom(t.localTransform),e.worldColor=t.localColor,r=t.localAlpha;r=r<0?0:r>1?1:r,e.worldAlpha=r,e.worldColorAlpha=e.worldColor+(255*r<<24)}(e);const r=e.childrenToUpdate,i=e.updateTick++;for(const t in r){const n=Number(t),s=r[t],o=s.list,h=s.index;for(let t=0;t<h;t++){const r=o[t];r.parentRenderGroup===e&&r.relativeRenderGroupDepth===n&&f(r,i,0)}a(o,h),s.index=0}if(t)for(let r=0;r<e.renderGroupChildren.length;r++)m(e.renderGroupChildren[r],t)}function f(e,t,r){if(t===e.updateTick)return;e.updateTick=t,e.didChange=!1;const i=e.localTransform;e.updateLocalTransform();const n=e.parent;if(n&&!n.renderGroup?(r|=e._updateFlags,e.relativeGroupTransform.appendFrom(i,n.relativeGroupTransform),r&c&&x(e,n,r)):(r=e._updateFlags,e.relativeGroupTransform.copyFrom(i),r&c&&x(e,p,r)),!e.renderGroup){const i=e.children,n=i.length;for(let e=0;e<n;e++)f(i[e],t,r);const s=e.parentRenderGroup,o=e;o.renderPipeId&&!s.structureDidChange&&s.updateRenderable(o)}}function x(e,t,r){if(r&l.ig){e.groupColor=(0,u.j)(e.localColor,t.groupColor);let r=e.localAlpha*t.groupAlpha;r=r<0?0:r>1?1:r,e.groupAlpha=r,e.groupColorAlpha=e.groupColor+(255*r<<24)}r&l.u&&(e.groupBlendMode="inherit"===e.localBlendMode?t.groupBlendMode:e.localBlendMode),r&l.fR&&(e.globalDisplayStatus=e.localDisplayStatus&t.globalDisplayStatus),e._updateFlags=0}const g=new n.u;class _{constructor(e){this._renderer=e}render({container:e,transform:t}){const r=e.parent,i=e.renderGroup.renderGroupParent;e.parent=null,e.renderGroup.renderGroupParent=null;const n=this._renderer;let s=g;t&&(s=s.copyFrom(e.renderGroup.localTransform),e.renderGroup.localTransform.copyFrom(t));const o=n.renderPipes;this._updateCachedRenderGroups(e.renderGroup,null),this._updateRenderGroups(e.renderGroup),n.globalUniforms.start({worldTransformMatrix:t?e.renderGroup.localTransform:e.renderGroup.worldTransform,worldColor:e.renderGroup.worldColorAlpha}),(0,d.j)(e.renderGroup,o),o.uniformBatch&&o.uniformBatch.renderEnd(),t&&e.renderGroup.localTransform.copyFrom(s),e.parent=r,e.renderGroup.renderGroupParent=i}destroy(){this._renderer=null}_updateCachedRenderGroups(e,t){if(e.isCachedAsTexture){if(!e.updateCacheTexture)return;t=e}e._parentCacheAsTextureRenderGroup=t;for(let r=e.renderGroupChildren.length-1;r>=0;r--)this._updateCachedRenderGroups(e.renderGroupChildren[r],t);if(e.invalidateMatrices(),e.isCachedAsTexture){if(e.textureNeedsUpdate){const t=e.root.getLocalBounds();t.ceil();const r=e.texture;e.texture&&s.W.returnTexture(e.texture);const i=this._renderer,n=e.textureOptions.resolution||i.view.resolution,h=e.textureOptions.antialias??i.view.antialias;e.texture=s.W.getOptimalTexture(t.width,t.height,n,h),e._textureBounds||(e._textureBounds=new o.c),e._textureBounds.copyFrom(t),r!==e.texture&&e.renderGroupParent&&(e.renderGroupParent.structureDidChange=!0)}}else e.texture&&(s.W.returnTexture(e.texture),e.texture=null)}_updateRenderGroups(e){const t=this._renderer,r=t.renderPipes;if(e.runOnRender(),e.instructionSet.renderPipes=r,e.structureDidChange?a(e.childrenRenderablesToUpdate.list,0):function(e,t){const{list:r,index:i}=e.childrenRenderablesToUpdate;let n=!1;for(let e=0;e<i;e++){const i=r[e];if(n=t[i.renderPipeId].validateRenderable(i),n)break}e.structureDidChange=n}(e,r),m(e),e.structureDidChange?(e.structureDidChange=!1,(0,h.M)(e,t)):this._updateRenderables(e),e.childrenRenderablesToUpdate.index=0,t.renderPipes.batch.upload(e.instructionSet),!e.isCachedAsTexture||e.textureNeedsUpdate)for(let t=0;t<e.renderGroupChildren.length;t++)this._updateRenderGroups(e.renderGroupChildren[t])}_updateRenderables(e){const{list:t,index:r}=e.childrenRenderablesToUpdate;for(let i=0;i<r;i++){const r=t[i];r.didViewUpdate&&e.updateRenderable(r)}a(t,r)}}_.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem,i.Ag.CanvasSystem],name:"renderGroup"}},3475:(e,t,r)=>{r.d(t,{c:()=>o});var i=r(1026),n=r(7474);const s=new i.u;class o{constructor(e=1/0,t=1/0,r=-1/0,i=-1/0){this.minX=1/0,this.minY=1/0,this.maxX=-1/0,this.maxY=-1/0,this.matrix=s,this.minX=e,this.minY=t,this.maxX=r,this.maxY=i}isEmpty(){return this.minX>this.maxX||this.minY>this.maxY}get rectangle(){this._rectangle||(this._rectangle=new n.M);const e=this._rectangle;return this.minX>this.maxX||this.minY>this.maxY?(e.x=0,e.y=0,e.width=0,e.height=0):e.copyFromBounds(this),e}clear(){return this.minX=1/0,this.minY=1/0,this.maxX=-1/0,this.maxY=-1/0,this.matrix=s,this}set(e,t,r,i){this.minX=e,this.minY=t,this.maxX=r,this.maxY=i}addFrame(e,t,r,i,n){n||(n=this.matrix);const s=n.a,o=n.b,h=n.c,a=n.d,d=n.tx,l=n.ty;let u=this.minX,p=this.minY,c=this.maxX,m=this.maxY,f=s*e+h*t+d,x=o*e+a*t+l;f<u&&(u=f),x<p&&(p=x),f>c&&(c=f),x>m&&(m=x),f=s*r+h*t+d,x=o*r+a*t+l,f<u&&(u=f),x<p&&(p=x),f>c&&(c=f),x>m&&(m=x),f=s*e+h*i+d,x=o*e+a*i+l,f<u&&(u=f),x<p&&(p=x),f>c&&(c=f),x>m&&(m=x),f=s*r+h*i+d,x=o*r+a*i+l,f<u&&(u=f),x<p&&(p=x),f>c&&(c=f),x>m&&(m=x),this.minX=u,this.minY=p,this.maxX=c,this.maxY=m}addRect(e,t){this.addFrame(e.x,e.y,e.x+e.width,e.y+e.height,t)}addBounds(e,t){this.addFrame(e.minX,e.minY,e.maxX,e.maxY,t)}addBoundsMask(e){this.minX=this.minX>e.minX?this.minX:e.minX,this.minY=this.minY>e.minY?this.minY:e.minY,this.maxX=this.maxX<e.maxX?this.maxX:e.maxX,this.maxY=this.maxY<e.maxY?this.maxY:e.maxY}applyMatrix(e){const t=this.minX,r=this.minY,i=this.maxX,n=this.maxY,{a:s,b:o,c:h,d:a,tx:d,ty:l}=e;let u=s*t+h*r+d,p=o*t+a*r+l;this.minX=u,this.minY=p,this.maxX=u,this.maxY=p,u=s*i+h*r+d,p=o*i+a*r+l,this.minX=u<this.minX?u:this.minX,this.minY=p<this.minY?p:this.minY,this.maxX=u>this.maxX?u:this.maxX,this.maxY=p>this.maxY?p:this.maxY,u=s*t+h*n+d,p=o*t+a*n+l,this.minX=u<this.minX?u:this.minX,this.minY=p<this.minY?p:this.minY,this.maxX=u>this.maxX?u:this.maxX,this.maxY=p>this.maxY?p:this.maxY,u=s*i+h*n+d,p=o*i+a*n+l,this.minX=u<this.minX?u:this.minX,this.minY=p<this.minY?p:this.minY,this.maxX=u>this.maxX?u:this.maxX,this.maxY=p>this.maxY?p:this.maxY}fit(e){return this.minX<e.left&&(this.minX=e.left),this.maxX>e.right&&(this.maxX=e.right),this.minY<e.top&&(this.minY=e.top),this.maxY>e.bottom&&(this.maxY=e.bottom),this}fitBounds(e,t,r,i){return this.minX<e&&(this.minX=e),this.maxX>t&&(this.maxX=t),this.minY<r&&(this.minY=r),this.maxY>i&&(this.maxY=i),this}pad(e,t=e){return this.minX-=e,this.maxX+=e,this.minY-=t,this.maxY+=t,this}ceil(){return this.minX=Math.floor(this.minX),this.minY=Math.floor(this.minY),this.maxX=Math.ceil(this.maxX),this.maxY=Math.ceil(this.maxY),this}clone(){return new o(this.minX,this.minY,this.maxX,this.maxY)}scale(e,t=e){return this.minX*=e,this.minY*=t,this.maxX*=e,this.maxY*=t,this}get x(){return this.minX}set x(e){const t=this.maxX-this.minX;this.minX=e,this.maxX=e+t}get y(){return this.minY}set y(e){const t=this.maxY-this.minY;this.minY=e,this.maxY=e+t}get width(){return this.maxX-this.minX}set width(e){this.maxX=this.minX+e}get height(){return this.maxY-this.minY}set height(e){this.maxY=this.minY+e}get left(){return this.minX}get right(){return this.maxX}get top(){return this.minY}get bottom(){return this.maxY}get isPositive(){return this.maxX-this.minX>0&&this.maxY-this.minY>0}get isValid(){return this.minX+this.minY!==1/0}addVertexData(e,t,r,i){let n=this.minX,s=this.minY,o=this.maxX,h=this.maxY;i||(i=this.matrix);const a=i.a,d=i.b,l=i.c,u=i.d,p=i.tx,c=i.ty;for(let i=t;i<r;i+=2){const t=e[i],r=e[i+1],m=a*t+l*r+p,f=d*t+u*r+c;n=m<n?m:n,s=f<s?f:s,o=m>o?m:o,h=f>h?f:h}this.minX=n,this.minY=s,this.maxX=o,this.maxY=h}containsPoint(e,t){return this.minX<=e&&this.minY<=t&&this.maxX>=e&&this.maxY>=t}toString(){return`[pixi.js:Bounds minX=${this.minX} minY=${this.minY} maxX=${this.maxX} maxY=${this.maxY} width=${this.width} height=${this.height}]`}copyFrom(e){return this.minX=e.minX,this.minY=e.minY,this.maxX=e.maxX,this.maxY=e.maxY,this}}},4584:(e,t,r)=>{r.d(t,{v:()=>o});var i=r(1026),n=r(5249);const s=new i.u;function o(e,t){t.clear(),h(e,t),t.isValid||t.set(0,0,0,0);const r=e.renderGroup||e.parentRenderGroup;return t.applyMatrix(r.worldTransform),t}function h(e,t){if(7!==e.localDisplayStatus||!e.measurable)return;const r=!!e.effects.length;let i=t;if((e.renderGroup||r)&&(i=n.o.get().clear()),e.boundsArea)t.addRect(e.boundsArea,e.worldTransform);else{if(e.renderPipeId){const t=e.bounds;i.addFrame(t.minX,t.minY,t.maxX,t.maxY,e.groupTransform)}const t=e.children;for(let e=0;e<t.length;e++)h(t[e],i)}if(r){let r=!1;const o=e.renderGroup||e.parentRenderGroup;for(let t=0;t<e.effects.length;t++)e.effects[t].addBounds&&(r||(r=!0,i.applyMatrix(o.worldTransform)),e.effects[t].addBounds(i,!0));r&&(i.applyMatrix(o.worldTransform.copyTo(s).invert()),t.addBounds(i,e.relativeGroupTransform)),t.addBounds(i),n.o.return(i)}else e.renderGroup&&(t.addBounds(i,e.relativeGroupTransform),n.o.return(i))}},1278:(e,t,r)=>{r.d(t,{Ek:()=>h,fB:()=>s});var i=r(1026),n=r(5249);function s(e,t,r){let s,a;return r.clear(),e.parent?t?s=e.parent.worldTransform:(a=n.u.get().identity(),s=h(e,a)):s=i.u.IDENTITY,o(e,r,s,t),a&&n.u.return(a),r.isValid||r.set(0,0,0,0),r}function o(e,t,r,s){if(!e.visible||!e.measurable)return;let h;s?h=e.worldTransform:(e.updateLocalTransform(),h=n.u.get(),h.appendFrom(e.localTransform,r));const a=t,d=!!e.effects.length;if(d&&(t=n.o.get().clear()),e.boundsArea)t.addRect(e.boundsArea,h);else{e.bounds&&(t.matrix=h,t.addBounds(e.bounds));for(let r=0;r<e.children.length;r++)o(e.children[r],t,h,s)}if(d){for(let r=0;r<e.effects.length;r++)e.effects[r].addBounds?.(t);a.addBounds(t,i.u.IDENTITY),n.o.return(t)}s||n.u.return(h)}function h(e,t){const r=e.parent;return r&&(h(r,t),r.updateLocalTransform(),t.append(r.localTransform)),t}},98:(e,t,r)=>{r.d(t,{n:()=>s});var i=r(1026),n=r(5249);function s(e,t,r){return t.clear(),r||(r=i.u.IDENTITY),o(e,t,r,e,!0),t.isValid||t.set(0,0,0,0),t}function o(e,t,r,s,h){let a;if(h)a=n.u.get(),a=r.copyTo(a);else{if(!e.visible||!e.measurable)return;e.updateLocalTransform();const t=e.localTransform;a=n.u.get(),a.appendFrom(t,r)}const d=t,l=!!e.effects.length;if(l&&(t=n.o.get().clear()),e.boundsArea)t.addRect(e.boundsArea,a);else{e.renderPipeId&&(t.matrix=a,t.addBounds(e.bounds));const r=e.children;for(let e=0;e<r.length;e++)o(r[e],t,a,s,!1)}if(l){for(let r=0;r<e.effects.length;r++)e.effects[r].addLocalBounds?.(t,s);d.addBounds(t,i.u.IDENTITY),n.o.return(t)}n.u.return(a)}},3375:(e,t,r)=>{function i(e,t){t.clear();const r=t.matrix;for(let r=0;r<e.length;r++){const i=e[r];i.globalDisplayStatus<7||(t.matrix=i.worldTransform,t.addBounds(i.bounds))}return t.matrix=r,t}r.d(t,{L:()=>i})},5249:(e,t,r)=>{r.d(t,{o:()=>h,u:()=>o});var i=r(1026),n=r(790),s=r(3475);const o=new n.b(i.u),h=new n.b(s.c)},8235:(e,t,r)=>{function i(e,t){const r=e.root,i=e.instructionSet;i.reset();const n=t.renderPipes?t:t.batch.renderer,o=n.renderPipes;o.batch.buildStart(i),o.blendMode.buildStart(),o.colorMask.buildStart(),r.sortableChildren&&r.sortChildren(),s(r,i,n,!0),o.batch.buildEnd(i),o.blendMode.buildEnd(i)}function n(e,t,r){const i=r.renderPipes?r:r.batch.renderer;e.globalDisplayStatus<7||!e.includeInBuild||(e.sortableChildren&&e.sortChildren(),e.isSimple?function(e,t,r){if(e.renderPipeId){const i=e,{renderPipes:n,renderableGC:s}=r;n.blendMode.setBlendMode(i,e.groupBlendMode,t);n[i.renderPipeId].addRenderable(i,t),s.addRenderable(i,t),i.didViewUpdate=!1}if(!e.renderGroup){const i=e.children,s=i.length;for(let e=0;e<s;e++)n(i[e],t,r)}}(e,t,i):s(e,t,i,!1))}function s(e,t,r,i){const{renderPipes:s,renderableGC:o}=r;if(!i&&e.renderGroup)s.renderGroup.addRenderGroup(e.renderGroup,t);else{for(let r=0;r<e.effects.length;r++){const i=e.effects[r];s[i.pipe].push(i,e,t)}const i=e,h=i.renderPipeId;if(h){s.blendMode.setBlendMode(i,i.groupBlendMode,t);s[h].addRenderable(i,t),o.addRenderable(i,t),i.didViewUpdate=!1}const a=e.children;if(a.length)for(let e=0;e<a.length;e++)n(a[e],t,r);for(let r=e.effects.length-1;r>=0;r--){const i=e.effects[r];s[i.pipe].pop(i,e,t)}}}r.d(t,{M:()=>i,z:()=>n})},7771:(e,t,r)=>{function i(e){const t={};for(const r in e)void 0!==e[r]&&(t[r]=e[r]);return t}r.d(t,{S:()=>i})},2638:(e,t,r)=>{function i(e,t){const r=e.instructionSet,i=r.instructions;for(let e=0;e<r.instructionSize;e++){const r=i[e];t[r.renderPipeId].execute(r)}}r.d(t,{j:()=>i})},7520:(e,t,r)=>{r.d(t,{j:()=>s});var i=r(143);const n=16777215;function s(e,t){return e===n?t:t===n?e:(0,i.u)(e,t)}},143:(e,t,r)=>{function i(e,t){if(16777215===e||!t)return t;if(16777215===t||!e)return e;return(((e>>16&255)*(t>>16&255)/255|0)<<16)+(((e>>8&255)*(t>>8&255)/255|0)<<8)+((255&e)*(255&t)/255|0)}r.d(t,{u:()=>i})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,