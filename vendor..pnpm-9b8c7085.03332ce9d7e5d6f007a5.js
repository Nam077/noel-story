"use strict";(self.webpackChunkpixijs_game=self.webpackChunkpixijs_game||[]).push([[17],{9621:(e,t,n)=>{n.d(t,{E:()=>r});const r={cullArea:null,cullable:!1,cullableChildren:!0}},9997:(e,t,n)=>{n(928),n(6903);var r=n(9084),i=n(9032),o=n(413),s=n(5638),a=n(8273),u=n(2947),l=n(6212);const h=new class{constructor(){this.interactionFrequency=10,this._deltaTime=0,this._didMove=!1,this._tickerAdded=!1,this._pauseUpdate=!0}init(e){this.removeTickerListener(),this.events=e,this.interactionFrequency=10,this._deltaTime=0,this._didMove=!1,this._tickerAdded=!1,this._pauseUpdate=!0}get pauseUpdate(){return this._pauseUpdate}set pauseUpdate(e){this._pauseUpdate=e}addTickerListener(){!this._tickerAdded&&this.domElement&&(l.R.system.add(this._tickerUpdate,this,u.d.INTERACTION),this._tickerAdded=!0)}removeTickerListener(){this._tickerAdded&&(l.R.system.remove(this._tickerUpdate,this),this._tickerAdded=!1)}pointerMoved(){this._didMove=!0}_update(){if(!this.domElement||this._pauseUpdate)return;if(this._didMove)return void(this._didMove=!1);const e=this.events._rootPointerEvent;this.events.supportsTouchEvents&&"touch"===e.pointerType||globalThis.document.dispatchEvent(new PointerEvent("pointermove",{clientX:e.clientX,clientY:e.clientY,pointerType:e.pointerType,pointerId:e.pointerId}))}_tickerUpdate(e){this._deltaTime+=e.deltaTime,this._deltaTime<this.interactionFrequency||(this._deltaTime=0,this._update())}};var p=n(1369);class c extends p.N{constructor(){super(...arguments),this.client=new s.b,this.movement=new s.b,this.offset=new s.b,this.global=new s.b,this.screen=new s.b}get clientX(){return this.client.x}get clientY(){return this.client.y}get x(){return this.clientX}get y(){return this.clientY}get movementX(){return this.movement.x}get movementY(){return this.movement.y}get offsetX(){return this.offset.x}get offsetY(){return this.offset.y}get globalX(){return this.global.x}get globalY(){return this.global.y}get screenX(){return this.screen.x}get screenY(){return this.screen.y}getLocalPosition(e,t,n){return e.worldTransform.applyInverse(n||this.global,t)}getModifierState(e){return"getModifierState"in this.nativeEvent&&this.nativeEvent.getModifierState(e)}initMouseEvent(e,t,n,r,i,o,s,a,u,l,h,p,c,d,v){throw new Error("Method not implemented.")}}class d extends c{constructor(){super(...arguments),this.width=0,this.height=0,this.isPrimary=!1}getCoalescedEvents(){return"pointermove"===this.type||"mousemove"===this.type||"touchmove"===this.type?[this]:[]}getPredictedEvents(){throw new Error("getPredictedEvents is not supported!")}}class v extends c{constructor(){super(...arguments),this.DOM_DELTA_PIXEL=0,this.DOM_DELTA_LINE=1,this.DOM_DELTA_PAGE=2}}v.DOM_DELTA_PIXEL=0,v.DOM_DELTA_LINE=1,v.DOM_DELTA_PAGE=2;const f=new s.b,m=new s.b;class g{constructor(e){this.dispatch=new o.A,this.moveOnAll=!1,this.enableGlobalMoveEvents=!0,this.mappingState={trackingData:{}},this.eventPool=new Map,this._allInteractiveElements=[],this._hitElements=[],this._isPointerMoveEvent=!1,this.rootTarget=e,this.hitPruneFn=this.hitPruneFn.bind(this),this.hitTestFn=this.hitTestFn.bind(this),this.mapPointerDown=this.mapPointerDown.bind(this),this.mapPointerMove=this.mapPointerMove.bind(this),this.mapPointerOut=this.mapPointerOut.bind(this),this.mapPointerOver=this.mapPointerOver.bind(this),this.mapPointerUp=this.mapPointerUp.bind(this),this.mapPointerUpOutside=this.mapPointerUpOutside.bind(this),this.mapWheel=this.mapWheel.bind(this),this.mappingTable={},this.addEventMapping("pointerdown",this.mapPointerDown),this.addEventMapping("pointermove",this.mapPointerMove),this.addEventMapping("pointerout",this.mapPointerOut),this.addEventMapping("pointerleave",this.mapPointerOut),this.addEventMapping("pointerover",this.mapPointerOver),this.addEventMapping("pointerup",this.mapPointerUp),this.addEventMapping("pointerupoutside",this.mapPointerUpOutside),this.addEventMapping("wheel",this.mapWheel)}addEventMapping(e,t){this.mappingTable[e]||(this.mappingTable[e]=[]),this.mappingTable[e].push({fn:t,priority:0}),this.mappingTable[e].sort(((e,t)=>e.priority-t.priority))}dispatchEvent(e,t){e.propagationStopped=!1,e.propagationImmediatelyStopped=!1,this.propagate(e,t),this.dispatch.emit(t||e.type,e)}mapEvent(e){if(!this.rootTarget)return;const t=this.mappingTable[e.type];if(t)for(let n=0,r=t.length;n<r;n++)t[n].fn(e);else(0,a.R)(`[EventBoundary]: Event mapping not defined for ${e.type}`)}hitTest(e,t){h.pauseUpdate=!0;const n=this[this._isPointerMoveEvent&&this.enableGlobalMoveEvents?"hitTestMoveRecursive":"hitTestRecursive"](this.rootTarget,this.rootTarget.eventMode,f.set(e,t),this.hitTestFn,this.hitPruneFn);return n&&n[0]}propagate(e,t){if(!e.target)return;const n=e.composedPath();e.eventPhase=e.CAPTURING_PHASE;for(let r=0,i=n.length-1;r<i;r++)if(e.currentTarget=n[r],this.notifyTarget(e,t),e.propagationStopped||e.propagationImmediatelyStopped)return;if(e.eventPhase=e.AT_TARGET,e.currentTarget=e.target,this.notifyTarget(e,t),!e.propagationStopped&&!e.propagationImmediatelyStopped){e.eventPhase=e.BUBBLING_PHASE;for(let r=n.length-2;r>=0;r--)if(e.currentTarget=n[r],this.notifyTarget(e,t),e.propagationStopped||e.propagationImmediatelyStopped)return}}all(e,t,n=this._allInteractiveElements){if(0===n.length)return;e.eventPhase=e.BUBBLING_PHASE;const r=Array.isArray(t)?t:[t];for(let t=n.length-1;t>=0;t--)r.forEach((r=>{e.currentTarget=n[t],this.notifyTarget(e,r)}))}propagationPath(e){const t=[e];for(let n=0;n<2048&&e!==this.rootTarget&&e.parent;n++){if(!e.parent)throw new Error("Cannot find propagation path to disconnected target");t.push(e.parent),e=e.parent}return t.reverse(),t}hitTestMoveRecursive(e,t,n,r,i,o=!1){let s=!1;if(this._interactivePrune(e))return null;if("dynamic"!==e.eventMode&&"dynamic"!==t||(h.pauseUpdate=!1),e.interactiveChildren&&e.children){const a=e.children;for(let u=a.length-1;u>=0;u--){const l=a[u],h=this.hitTestMoveRecursive(l,this._isInteractive(t)?t:l.eventMode,n,r,i,o||i(e,n));if(h){if(h.length>0&&!h[h.length-1].parent)continue;const t=e.isInteractive();(h.length>0||t)&&(t&&this._allInteractiveElements.push(e),h.push(e)),0===this._hitElements.length&&(this._hitElements=h),s=!0}}}const a=this._isInteractive(t),u=e.isInteractive();return u&&u&&this._allInteractiveElements.push(e),o||this._hitElements.length>0?null:s?this._hitElements:a&&!i(e,n)&&r(e,n)?u?[e]:[]:null}hitTestRecursive(e,t,n,r,i){if(this._interactivePrune(e)||i(e,n))return null;if("dynamic"!==e.eventMode&&"dynamic"!==t||(h.pauseUpdate=!1),e.interactiveChildren&&e.children){const o=e.children,s=n;for(let n=o.length-1;n>=0;n--){const a=o[n],u=this.hitTestRecursive(a,this._isInteractive(t)?t:a.eventMode,s,r,i);if(u){if(u.length>0&&!u[u.length-1].parent)continue;const t=e.isInteractive();return(u.length>0||t)&&u.push(e),u}}}const o=this._isInteractive(t),s=e.isInteractive();return o&&r(e,n)?s?[e]:[]:null}_isInteractive(e){return"static"===e||"dynamic"===e}_interactivePrune(e){return!(e&&e.visible&&e.renderable&&e.measurable)||("none"===e.eventMode||"passive"===e.eventMode&&!e.interactiveChildren)}hitPruneFn(e,t){if(e.hitArea&&(e.worldTransform.applyInverse(t,m),!e.hitArea.contains(m.x,m.y)))return!0;if(e.effects&&e.effects.length)for(let n=0;n<e.effects.length;n++){const r=e.effects[n];if(r.containsPoint){if(!r.containsPoint(t,this.hitTestFn))return!0}}return!1}hitTestFn(e,t){return!!e.hitArea||!!e?.containsPoint&&(e.worldTransform.applyInverse(t,m),e.containsPoint(m))}notifyTarget(e,t){if(!e.currentTarget.isInteractive())return;t??(t=e.type);const n=`on${t}`;e.currentTarget[n]?.(e);const r=e.eventPhase===e.CAPTURING_PHASE||e.eventPhase===e.AT_TARGET?`${t}capture`:t;this._notifyListeners(e,r),e.eventPhase===e.AT_TARGET&&this._notifyListeners(e,t)}mapPointerDown(e){if(!(e instanceof d))return void(0,a.R)("EventBoundary cannot map a non-pointer event as a pointer event");const t=this.createPointerEvent(e);if(this.dispatchEvent(t,"pointerdown"),"touch"===t.pointerType)this.dispatchEvent(t,"touchstart");else if("mouse"===t.pointerType||"pen"===t.pointerType){const e=2===t.button;this.dispatchEvent(t,e?"rightdown":"mousedown")}this.trackingData(e.pointerId).pressTargetsByButton[e.button]=t.composedPath(),this.freeEvent(t)}mapPointerMove(e){if(!(e instanceof d))return void(0,a.R)("EventBoundary cannot map a non-pointer event as a pointer event");this._allInteractiveElements.length=0,this._hitElements.length=0,this._isPointerMoveEvent=!0;const t=this.createPointerEvent(e);this._isPointerMoveEvent=!1;const n="mouse"===t.pointerType||"pen"===t.pointerType,r=this.trackingData(e.pointerId),i=this.findMountedTarget(r.overTargets);if(r.overTargets?.length>0&&i!==t.target){const r="mousemove"===e.type?"mouseout":"pointerout",o=this.createPointerEvent(e,r,i);if(this.dispatchEvent(o,"pointerout"),n&&this.dispatchEvent(o,"mouseout"),!t.composedPath().includes(i)){const r=this.createPointerEvent(e,"pointerleave",i);for(r.eventPhase=r.AT_TARGET;r.target&&!t.composedPath().includes(r.target);)r.currentTarget=r.target,this.notifyTarget(r),n&&this.notifyTarget(r,"mouseleave"),r.target=r.target.parent;this.freeEvent(r)}this.freeEvent(o)}if(i!==t.target){const r="mousemove"===e.type?"mouseover":"pointerover",o=this.clonePointerEvent(t,r);this.dispatchEvent(o,"pointerover"),n&&this.dispatchEvent(o,"mouseover");let s=i?.parent;for(;s&&s!==this.rootTarget.parent&&s!==t.target;)s=s.parent;if(!s||s===this.rootTarget.parent){const e=this.clonePointerEvent(t,"pointerenter");for(e.eventPhase=e.AT_TARGET;e.target&&e.target!==i&&e.target!==this.rootTarget.parent;)e.currentTarget=e.target,this.notifyTarget(e),n&&this.notifyTarget(e,"mouseenter"),e.target=e.target.parent;this.freeEvent(e)}this.freeEvent(o)}const o=[],s=this.enableGlobalMoveEvents??!0;this.moveOnAll?o.push("pointermove"):this.dispatchEvent(t,"pointermove"),s&&o.push("globalpointermove"),"touch"===t.pointerType&&(this.moveOnAll?o.splice(1,0,"touchmove"):this.dispatchEvent(t,"touchmove"),s&&o.push("globaltouchmove")),n&&(this.moveOnAll?o.splice(1,0,"mousemove"):this.dispatchEvent(t,"mousemove"),s&&o.push("globalmousemove"),this.cursor=t.target?.cursor),o.length>0&&this.all(t,o),this._allInteractiveElements.length=0,this._hitElements.length=0,r.overTargets=t.composedPath(),this.freeEvent(t)}mapPointerOver(e){if(!(e instanceof d))return void(0,a.R)("EventBoundary cannot map a non-pointer event as a pointer event");const t=this.trackingData(e.pointerId),n=this.createPointerEvent(e),r="mouse"===n.pointerType||"pen"===n.pointerType;this.dispatchEvent(n,"pointerover"),r&&this.dispatchEvent(n,"mouseover"),"mouse"===n.pointerType&&(this.cursor=n.target?.cursor);const i=this.clonePointerEvent(n,"pointerenter");for(i.eventPhase=i.AT_TARGET;i.target&&i.target!==this.rootTarget.parent;)i.currentTarget=i.target,this.notifyTarget(i),r&&this.notifyTarget(i,"mouseenter"),i.target=i.target.parent;t.overTargets=n.composedPath(),this.freeEvent(n),this.freeEvent(i)}mapPointerOut(e){if(!(e instanceof d))return void(0,a.R)("EventBoundary cannot map a non-pointer event as a pointer event");const t=this.trackingData(e.pointerId);if(t.overTargets){const n="mouse"===e.pointerType||"pen"===e.pointerType,r=this.findMountedTarget(t.overTargets),i=this.createPointerEvent(e,"pointerout",r);this.dispatchEvent(i),n&&this.dispatchEvent(i,"mouseout");const o=this.createPointerEvent(e,"pointerleave",r);for(o.eventPhase=o.AT_TARGET;o.target&&o.target!==this.rootTarget.parent;)o.currentTarget=o.target,this.notifyTarget(o),n&&this.notifyTarget(o,"mouseleave"),o.target=o.target.parent;t.overTargets=null,this.freeEvent(i),this.freeEvent(o)}this.cursor=null}mapPointerUp(e){if(!(e instanceof d))return void(0,a.R)("EventBoundary cannot map a non-pointer event as a pointer event");const t=performance.now(),n=this.createPointerEvent(e);if(this.dispatchEvent(n,"pointerup"),"touch"===n.pointerType)this.dispatchEvent(n,"touchend");else if("mouse"===n.pointerType||"pen"===n.pointerType){const e=2===n.button;this.dispatchEvent(n,e?"rightup":"mouseup")}const r=this.trackingData(e.pointerId),i=this.findMountedTarget(r.pressTargetsByButton[e.button]);let o=i;if(i&&!n.composedPath().includes(i)){let t=i;for(;t&&!n.composedPath().includes(t);){if(n.currentTarget=t,this.notifyTarget(n,"pointerupoutside"),"touch"===n.pointerType)this.notifyTarget(n,"touchendoutside");else if("mouse"===n.pointerType||"pen"===n.pointerType){const e=2===n.button;this.notifyTarget(n,e?"rightupoutside":"mouseupoutside")}t=t.parent}delete r.pressTargetsByButton[e.button],o=t}if(o){const i=this.clonePointerEvent(n,"click");i.target=o,i.path=null,r.clicksByButton[e.button]||(r.clicksByButton[e.button]={clickCount:0,target:i.target,timeStamp:t});const s=r.clicksByButton[e.button];if(s.target===i.target&&t-s.timeStamp<200?++s.clickCount:s.clickCount=1,s.target=i.target,s.timeStamp=t,i.detail=s.clickCount,"mouse"===i.pointerType){const e=2===i.button;this.dispatchEvent(i,e?"rightclick":"click")}else"touch"===i.pointerType&&this.dispatchEvent(i,"tap");this.dispatchEvent(i,"pointertap"),this.freeEvent(i)}this.freeEvent(n)}mapPointerUpOutside(e){if(!(e instanceof d))return void(0,a.R)("EventBoundary cannot map a non-pointer event as a pointer event");const t=this.trackingData(e.pointerId),n=this.findMountedTarget(t.pressTargetsByButton[e.button]),r=this.createPointerEvent(e);if(n){let i=n;for(;i;)r.currentTarget=i,this.notifyTarget(r,"pointerupoutside"),"touch"===r.pointerType?this.notifyTarget(r,"touchendoutside"):"mouse"!==r.pointerType&&"pen"!==r.pointerType||this.notifyTarget(r,2===r.button?"rightupoutside":"mouseupoutside"),i=i.parent;delete t.pressTargetsByButton[e.button]}this.freeEvent(r)}mapWheel(e){if(!(e instanceof v))return void(0,a.R)("EventBoundary cannot map a non-wheel event as a wheel event");const t=this.createWheelEvent(e);this.dispatchEvent(t),this.freeEvent(t)}findMountedTarget(e){if(!e)return null;let t=e[0];for(let n=1;n<e.length&&e[n].parent===t;n++)t=e[n];return t}createPointerEvent(e,t,n){const r=this.allocateEvent(d);return this.copyPointerData(e,r),this.copyMouseData(e,r),this.copyData(e,r),r.nativeEvent=e.nativeEvent,r.originalEvent=e,r.target=n??this.hitTest(r.global.x,r.global.y)??this._hitElements[0],"string"==typeof t&&(r.type=t),r}createWheelEvent(e){const t=this.allocateEvent(v);return this.copyWheelData(e,t),this.copyMouseData(e,t),this.copyData(e,t),t.nativeEvent=e.nativeEvent,t.originalEvent=e,t.target=this.hitTest(t.global.x,t.global.y),t}clonePointerEvent(e,t){const n=this.allocateEvent(d);return n.nativeEvent=e.nativeEvent,n.originalEvent=e.originalEvent,this.copyPointerData(e,n),this.copyMouseData(e,n),this.copyData(e,n),n.target=e.target,n.path=e.composedPath().slice(),n.type=t??n.type,n}copyWheelData(e,t){t.deltaMode=e.deltaMode,t.deltaX=e.deltaX,t.deltaY=e.deltaY,t.deltaZ=e.deltaZ}copyPointerData(e,t){e instanceof d&&t instanceof d&&(t.pointerId=e.pointerId,t.width=e.width,t.height=e.height,t.isPrimary=e.isPrimary,t.pointerType=e.pointerType,t.pressure=e.pressure,t.tangentialPressure=e.tangentialPressure,t.tiltX=e.tiltX,t.tiltY=e.tiltY,t.twist=e.twist)}copyMouseData(e,t){e instanceof c&&t instanceof c&&(t.altKey=e.altKey,t.button=e.button,t.buttons=e.buttons,t.client.copyFrom(e.client),t.ctrlKey=e.ctrlKey,t.metaKey=e.metaKey,t.movement.copyFrom(e.movement),t.screen.copyFrom(e.screen),t.shiftKey=e.shiftKey,t.global.copyFrom(e.global))}copyData(e,t){t.isTrusted=e.isTrusted,t.srcElement=e.srcElement,t.timeStamp=performance.now(),t.type=e.type,t.detail=e.detail,t.view=e.view,t.which=e.which,t.layer.copyFrom(e.layer),t.page.copyFrom(e.page)}trackingData(e){return this.mappingState.trackingData[e]||(this.mappingState.trackingData[e]={pressTargetsByButton:{},clicksByButton:{},overTarget:null}),this.mappingState.trackingData[e]}allocateEvent(e){this.eventPool.has(e)||this.eventPool.set(e,[]);const t=this.eventPool.get(e).pop()||new e(this);return t.eventPhase=t.NONE,t.currentTarget=null,t.defaultPrevented=!1,t.path=null,t.target=null,t}freeEvent(e){if(e.manager!==this)throw new Error("It is illegal to free an event not managed by this EventBoundary!");const t=e.constructor;this.eventPool.has(t)||this.eventPool.set(t,[]),this.eventPool.get(t).push(e)}_notifyListeners(e,t){const n=e.currentTarget._events[t];if(n)if("fn"in n)n.once&&e.currentTarget.removeListener(t,n.fn,void 0,!0),n.fn.call(n.context,e);else for(let r=0,i=n.length;r<i&&!e.propagationImmediatelyStopped;r++)n[r].once&&e.currentTarget.removeListener(t,n[r].fn,void 0,!0),n[r].fn.call(n[r].context,e)}}const y={touchstart:"pointerdown",touchend:"pointerup",touchendoutside:"pointerupoutside",touchmove:"pointermove",touchcancel:"pointercancel"},b=class e{constructor(t){this.supportsTouchEvents="ontouchstart"in globalThis,this.supportsPointerEvents=!!globalThis.PointerEvent,this.domElement=null,this.resolution=1,this.renderer=t,this.rootBoundary=new g(null),h.init(this),this.autoPreventDefault=!0,this._eventsAdded=!1,this._rootPointerEvent=new d(null),this._rootWheelEvent=new v(null),this.cursorStyles={default:"inherit",pointer:"pointer"},this.features=new Proxy({...e.defaultEventFeatures},{set:(e,t,n)=>("globalMove"===t&&(this.rootBoundary.enableGlobalMoveEvents=n),e[t]=n,!0)}),this._onPointerDown=this._onPointerDown.bind(this),this._onPointerMove=this._onPointerMove.bind(this),this._onPointerUp=this._onPointerUp.bind(this),this._onPointerOverOut=this._onPointerOverOut.bind(this),this.onWheel=this.onWheel.bind(this)}static get defaultEventMode(){return this._defaultEventMode}init(t){const{canvas:n,resolution:r}=this.renderer;this.setTargetElement(n),this.resolution=r,e._defaultEventMode=t.eventMode??"passive",Object.assign(this.features,t.eventFeatures??{}),this.rootBoundary.enableGlobalMoveEvents=this.features.globalMove}resolutionChange(e){this.resolution=e}destroy(){this.setTargetElement(null),this.renderer=null,this._currentCursor=null}setCursor(e){e||(e="default");let t=!0;if(globalThis.OffscreenCanvas&&this.domElement instanceof OffscreenCanvas&&(t=!1),this._currentCursor===e)return;this._currentCursor=e;const n=this.cursorStyles[e];if(n)switch(typeof n){case"string":t&&(this.domElement.style.cursor=n);break;case"function":n(e);break;case"object":t&&Object.assign(this.domElement.style,n)}else t&&"string"==typeof e&&!Object.prototype.hasOwnProperty.call(this.cursorStyles,e)&&(this.domElement.style.cursor=e)}get pointer(){return this._rootPointerEvent}_onPointerDown(e){if(!this.features.click)return;this.rootBoundary.rootTarget=this.renderer.lastObjectRendered;const t=this._normalizeToPointerData(e);if(this.autoPreventDefault&&t[0].isNormalized){(e.cancelable||!("cancelable"in e))&&e.preventDefault()}for(let e=0,n=t.length;e<n;e++){const n=t[e],r=this._bootstrapEvent(this._rootPointerEvent,n);this.rootBoundary.mapEvent(r)}this.setCursor(this.rootBoundary.cursor)}_onPointerMove(e){if(!this.features.move)return;this.rootBoundary.rootTarget=this.renderer.lastObjectRendered,h.pointerMoved();const t=this._normalizeToPointerData(e);for(let e=0,n=t.length;e<n;e++){const n=this._bootstrapEvent(this._rootPointerEvent,t[e]);this.rootBoundary.mapEvent(n)}this.setCursor(this.rootBoundary.cursor)}_onPointerUp(e){if(!this.features.click)return;this.rootBoundary.rootTarget=this.renderer.lastObjectRendered;let t=e.target;e.composedPath&&e.composedPath().length>0&&(t=e.composedPath()[0]);const n=t!==this.domElement?"outside":"",r=this._normalizeToPointerData(e);for(let e=0,t=r.length;e<t;e++){const t=this._bootstrapEvent(this._rootPointerEvent,r[e]);t.type+=n,this.rootBoundary.mapEvent(t)}this.setCursor(this.rootBoundary.cursor)}_onPointerOverOut(e){if(!this.features.click)return;this.rootBoundary.rootTarget=this.renderer.lastObjectRendered;const t=this._normalizeToPointerData(e);for(let e=0,n=t.length;e<n;e++){const n=this._bootstrapEvent(this._rootPointerEvent,t[e]);this.rootBoundary.mapEvent(n)}this.setCursor(this.rootBoundary.cursor)}onWheel(e){if(!this.features.wheel)return;const t=this.normalizeWheelEvent(e);this.rootBoundary.rootTarget=this.renderer.lastObjectRendered,this.rootBoundary.mapEvent(t)}setTargetElement(e){this._removeEvents(),this.domElement=e,h.domElement=e,this._addEvents()}_addEvents(){if(this._eventsAdded||!this.domElement)return;h.addTickerListener();const e=this.domElement.style;e&&(globalThis.navigator.msPointerEnabled?(e.msContentZooming="none",e.msTouchAction="none"):this.supportsPointerEvents&&(e.touchAction="none")),this.supportsPointerEvents?(globalThis.document.addEventListener("pointermove",this._onPointerMove,!0),this.domElement.addEventListener("pointerdown",this._onPointerDown,!0),this.domElement.addEventListener("pointerleave",this._onPointerOverOut,!0),this.domElement.addEventListener("pointerover",this._onPointerOverOut,!0),globalThis.addEventListener("pointerup",this._onPointerUp,!0)):(globalThis.document.addEventListener("mousemove",this._onPointerMove,!0),this.domElement.addEventListener("mousedown",this._onPointerDown,!0),this.domElement.addEventListener("mouseout",this._onPointerOverOut,!0),this.domElement.addEventListener("mouseover",this._onPointerOverOut,!0),globalThis.addEventListener("mouseup",this._onPointerUp,!0),this.supportsTouchEvents&&(this.domElement.addEventListener("touchstart",this._onPointerDown,!0),this.domElement.addEventListener("touchend",this._onPointerUp,!0),this.domElement.addEventListener("touchmove",this._onPointerMove,!0))),this.domElement.addEventListener("wheel",this.onWheel,{passive:!0,capture:!0}),this._eventsAdded=!0}_removeEvents(){if(!this._eventsAdded||!this.domElement)return;h.removeTickerListener();const e=this.domElement.style;e&&(globalThis.navigator.msPointerEnabled?(e.msContentZooming="",e.msTouchAction=""):this.supportsPointerEvents&&(e.touchAction="")),this.supportsPointerEvents?(globalThis.document.removeEventListener("pointermove",this._onPointerMove,!0),this.domElement.removeEventListener("pointerdown",this._onPointerDown,!0),this.domElement.removeEventListener("pointerleave",this._onPointerOverOut,!0),this.domElement.removeEventListener("pointerover",this._onPointerOverOut,!0),globalThis.removeEventListener("pointerup",this._onPointerUp,!0)):(globalThis.document.removeEventListener("mousemove",this._onPointerMove,!0),this.domElement.removeEventListener("mousedown",this._onPointerDown,!0),this.domElement.removeEventListener("mouseout",this._onPointerOverOut,!0),this.domElement.removeEventListener("mouseover",this._onPointerOverOut,!0),globalThis.removeEventListener("mouseup",this._onPointerUp,!0),this.supportsTouchEvents&&(this.domElement.removeEventListener("touchstart",this._onPointerDown,!0),this.domElement.removeEventListener("touchend",this._onPointerUp,!0),this.domElement.removeEventListener("touchmove",this._onPointerMove,!0))),this.domElement.removeEventListener("wheel",this.onWheel,!0),this.domElement=null,this._eventsAdded=!1}mapPositionToPoint(e,t,n){const r=this.domElement.isConnected?this.domElement.getBoundingClientRect():{x:0,y:0,width:this.domElement.width,height:this.domElement.height,left:0,top:0},i=1/this.resolution;e.x=(t-r.left)*(this.domElement.width/r.width)*i,e.y=(n-r.top)*(this.domElement.height/r.height)*i}_normalizeToPointerData(e){const t=[];if(this.supportsTouchEvents&&e instanceof TouchEvent)for(let n=0,r=e.changedTouches.length;n<r;n++){const r=e.changedTouches[n];void 0===r.button&&(r.button=0),void 0===r.buttons&&(r.buttons=1),void 0===r.isPrimary&&(r.isPrimary=1===e.touches.length&&"touchstart"===e.type),void 0===r.width&&(r.width=r.radiusX||1),void 0===r.height&&(r.height=r.radiusY||1),void 0===r.tiltX&&(r.tiltX=0),void 0===r.tiltY&&(r.tiltY=0),void 0===r.pointerType&&(r.pointerType="touch"),void 0===r.pointerId&&(r.pointerId=r.identifier||0),void 0===r.pressure&&(r.pressure=r.force||.5),void 0===r.twist&&(r.twist=0),void 0===r.tangentialPressure&&(r.tangentialPressure=0),void 0===r.layerX&&(r.layerX=r.offsetX=r.clientX),void 0===r.layerY&&(r.layerY=r.offsetY=r.clientY),r.isNormalized=!0,r.type=e.type,t.push(r)}else if(globalThis.MouseEvent&&(!(e instanceof MouseEvent)||this.supportsPointerEvents&&e instanceof globalThis.PointerEvent))t.push(e);else{const n=e;void 0===n.isPrimary&&(n.isPrimary=!0),void 0===n.width&&(n.width=1),void 0===n.height&&(n.height=1),void 0===n.tiltX&&(n.tiltX=0),void 0===n.tiltY&&(n.tiltY=0),void 0===n.pointerType&&(n.pointerType="mouse"),void 0===n.pointerId&&(n.pointerId=1),void 0===n.pressure&&(n.pressure=.5),void 0===n.twist&&(n.twist=0),void 0===n.tangentialPressure&&(n.tangentialPressure=0),n.isNormalized=!0,t.push(n)}return t}normalizeWheelEvent(e){const t=this._rootWheelEvent;return this._transferMouseData(t,e),t.deltaX=e.deltaX,t.deltaY=e.deltaY,t.deltaZ=e.deltaZ,t.deltaMode=e.deltaMode,this.mapPositionToPoint(t.screen,e.clientX,e.clientY),t.global.copyFrom(t.screen),t.offset.copyFrom(t.screen),t.nativeEvent=e,t.type=e.type,t}_bootstrapEvent(e,t){return e.originalEvent=null,e.nativeEvent=t,e.pointerId=t.pointerId,e.width=t.width,e.height=t.height,e.isPrimary=t.isPrimary,e.pointerType=t.pointerType,e.pressure=t.pressure,e.tangentialPressure=t.tangentialPressure,e.tiltX=t.tiltX,e.tiltY=t.tiltY,e.twist=t.twist,this._transferMouseData(e,t),this.mapPositionToPoint(e.screen,t.clientX,t.clientY),e.global.copyFrom(e.screen),e.offset.copyFrom(e.screen),e.isTrusted=t.isTrusted,"pointerleave"===e.type&&(e.type="pointerout"),e.type.startsWith("mouse")&&(e.type=e.type.replace("mouse","pointer")),e.type.startsWith("touch")&&(e.type=y[e.type]||e.type),e}_transferMouseData(e,t){e.isTrusted=t.isTrusted,e.srcElement=t.srcElement,e.timeStamp=performance.now(),e.type=t.type,e.altKey=t.altKey,e.button=t.button,e.buttons=t.buttons,e.client.x=t.clientX,e.client.y=t.clientY,e.ctrlKey=t.ctrlKey,e.metaKey=t.metaKey,e.movement.x=t.movementX,e.movement.y=t.movementY,e.page.x=t.pageX,e.page.y=t.pageY,e.relatedTarget=null,e.shiftKey=t.shiftKey}};b.extension={name:"events",type:[r.Ag.WebGLSystem,r.Ag.CanvasSystem,r.Ag.WebGPUSystem],priority:-1},b.defaultEventFeatures={move:!0,globalMove:!0,click:!0,wheel:!0};let T=b;const E={onclick:null,onmousedown:null,onmouseenter:null,onmouseleave:null,onmousemove:null,onglobalmousemove:null,onmouseout:null,onmouseover:null,onmouseup:null,onmouseupoutside:null,onpointercancel:null,onpointerdown:null,onpointerenter:null,onpointerleave:null,onpointermove:null,onglobalpointermove:null,onpointerout:null,onpointerover:null,onpointertap:null,onpointerup:null,onpointerupoutside:null,onrightclick:null,onrightdown:null,onrightup:null,onrightupoutside:null,ontap:null,ontouchcancel:null,ontouchend:null,ontouchendoutside:null,ontouchmove:null,onglobaltouchmove:null,ontouchstart:null,onwheel:null,get interactive(){return"dynamic"===this.eventMode||"static"===this.eventMode},set interactive(e){this.eventMode=e?"static":"passive"},_internalEventMode:void 0,get eventMode(){return this._internalEventMode??T.defaultEventMode},set eventMode(e){this._internalEventMode=e},isInteractive(){return"static"===this.eventMode||"dynamic"===this.eventMode},interactiveChildren:!0,hitArea:null,addEventListener(e,t,n){const r="boolean"==typeof n&&n||"object"==typeof n&&n.capture,i="object"==typeof n?n.signal:void 0,o="object"==typeof n&&!0===n.once,s="function"==typeof t?void 0:t;e=r?`${e}capture`:e;const a="function"==typeof t?t:t.handleEvent,u=this;i&&i.addEventListener("abort",(()=>{u.off(e,a,s)})),o?u.once(e,a,s):u.on(e,a,s)},removeEventListener(e,t,n){const r="function"==typeof t?void 0:t;e="boolean"==typeof n&&n||"object"==typeof n&&n.capture?`${e}capture`:e,t="function"==typeof t?t:t.handleEvent,this.off(e,t,r)},dispatchEvent(e){if(!(e instanceof p.N))throw new Error("Container cannot propagate events outside of the Federated Events API");return e.defaultPrevented=!1,e.path=null,e.target=this,e.manager.dispatchEvent(e),!e.defaultPrevented}};r.XO.add(T),i.mc.mixin(E);n(4573),n(924),n(2969),n(2372),n(8460),n(6578),n(169),n(6689),n(7172),n(8445),n(4376)},8831:(e,t,n)=>{n.d(t,{I:()=>r});const r={extension:{type:n(9084).Ag.Environment,name:"browser",priority:-1},test:()=>!0,load:async()=>{await Promise.all([n.e(217),n.e(346),n.e(640),n.e(395),n.e(443),n.e(17),n.e(858),n.e(517),n.e(2),n.e(404),n.e(302),n.e(417),n.e(457),n.e(929),n.e(676),n.e(135),n.e(410),n.e(716),n.e(630),n.e(42)]).then(n.bind(n,9997))}}},315:(e,t,n)=>{n.r(t);n(6903),n(4573),n(924),n(2969),n(2372),n(8460),n(6578),n(169),n(6689),n(7172),n(8445),n(4376)},3275:(e,t,n)=>{n.d(t,{S:()=>r});const r={extension:{type:n(9084).Ag.Environment,name:"webworker",priority:0},test:()=>"undefined"!=typeof self&&void 0!==self.WorkerGlobalScope,load:async()=>{await Promise.all([n.e(217),n.e(346),n.e(640),n.e(395),n.e(443),n.e(17),n.e(858),n.e(517),n.e(2),n.e(404),n.e(302),n.e(417),n.e(457),n.e(929),n.e(676),n.e(135),n.e(410),n.e(716),n.e(630),n.e(42)]).then(n.bind(n,315))}}},4184:(e,t,n)=>{n.d(t,{e:()=>i});let r={createCanvas:(e,t)=>{const n=document.createElement("canvas");return n.width=e,n.height=t,n},getCanvasRenderingContext2D:()=>CanvasRenderingContext2D,getWebGLRenderingContext:()=>WebGLRenderingContext,getNavigator:()=>navigator,getBaseUrl:()=>document.baseURI??window.location.href,getFontFaceSet:()=>document.fonts,fetch:(e,t)=>fetch(e,t),parseXML:e=>(new DOMParser).parseFromString(e,"text/xml")};const i={get:()=>r,set(e){r=e}}},8434:(e,t,n)=>{n.d(t,{W:()=>o});var r=n(9084);const i=[];async function o(e){if(!e)for(let e=0;e<i.length;e++){const t=i[e];if(t.value.test())return void await t.value.load()}}r.XO.handleByNamedList(r.Ag.Environment,i)},1369:(e,t,n)=>{n.d(t,{N:()=>i});var r=n(5638);class i{constructor(e){this.bubbles=!0,this.cancelBubble=!0,this.cancelable=!1,this.composed=!1,this.defaultPrevented=!1,this.eventPhase=i.prototype.NONE,this.propagationStopped=!1,this.propagationImmediatelyStopped=!1,this.layer=new r.b,this.page=new r.b,this.NONE=0,this.CAPTURING_PHASE=1,this.AT_TARGET=2,this.BUBBLING_PHASE=3,this.manager=e}get layerX(){return this.layer.x}get layerY(){return this.layer.y}get pageX(){return this.page.x}get pageY(){return this.page.y}get data(){return this}composedPath(){return!this.manager||this.path&&this.path[this.path.length-1]===this.target||(this.path=this.target?this.manager.propagationPath(this.target):[]),this.path}initEvent(e,t,n){throw new Error("initEvent() is a legacy DOM API. It is not implemented in the Federated Events API.")}initUIEvent(e,t,n,r,i){throw new Error("initUIEvent() is a legacy DOM API. It is not implemented in the Federated Events API.")}preventDefault(){this.nativeEvent instanceof Event&&this.nativeEvent.cancelable&&this.nativeEvent.preventDefault(),this.defaultPrevented=!0}stopImmediatePropagation(){this.propagationImmediatelyStopped=!0}stopPropagation(){this.propagationStopped=!0}}},9084:(e,t,n)=>{n.d(t,{Ag:()=>r,XO:()=>s});var r=(e=>(e.Application="application",e.WebGLPipes="webgl-pipes",e.WebGLPipesAdaptor="webgl-pipes-adaptor",e.WebGLSystem="webgl-system",e.WebGPUPipes="webgpu-pipes",e.WebGPUPipesAdaptor="webgpu-pipes-adaptor",e.WebGPUSystem="webgpu-system",e.CanvasSystem="canvas-system",e.CanvasPipesAdaptor="canvas-pipes-adaptor",e.CanvasPipes="canvas-pipes",e.Asset="asset",e.LoadParser="load-parser",e.ResolveParser="resolve-parser",e.CacheParser="cache-parser",e.DetectionParser="detection-parser",e.MaskEffect="mask-effect",e.BlendMode="blend-mode",e.TextureSource="texture-source",e.Environment="environment",e.ShapeBuilder="shape-builder",e.Batcher="batcher",e))(r||{});const i=e=>{if("function"==typeof e||"object"==typeof e&&e.extension){if(!e.extension)throw new Error("Extension class must have an extension object");e={..."object"!=typeof e.extension?{type:e.extension}:e.extension,ref:e}}if("object"!=typeof e)throw new Error("Invalid extension type");return"string"==typeof(e={...e}).type&&(e.type=[e.type]),e},o=(e,t)=>i(e).priority??t,s={_addHandlers:{},_removeHandlers:{},_queue:{},remove(...e){return e.map(i).forEach((e=>{e.type.forEach((t=>this._removeHandlers[t]?.(e)))})),this},add(...e){return e.map(i).forEach((e=>{e.type.forEach((t=>{const n=this._addHandlers,r=this._queue;n[t]?n[t]?.(e):(r[t]=r[t]||[],r[t]?.push(e))}))})),this},handle(e,t,n){const r=this._addHandlers,i=this._removeHandlers;if(r[e]||i[e])throw new Error(`Extension type ${e} already has a handler`);r[e]=t,i[e]=n;const o=this._queue;return o[e]&&(o[e]?.forEach((e=>t(e))),delete o[e]),this},handleByMap(e,t){return this.handle(e,(e=>{e.name&&(t[e.name]=e.ref)}),(e=>{e.name&&delete t[e.name]}))},handleByNamedList(e,t,n=-1){return this.handle(e,(e=>{t.findIndex((t=>t.name===e.name))>=0||(t.push({name:e.name,value:e.ref}),t.sort(((e,t)=>o(t.value,n)-o(e.value,n))))}),(e=>{const n=t.findIndex((t=>t.name===e.name));-1!==n&&t.splice(n,1)}))},handleByList(e,t,n=-1){return this.handle(e,(e=>{t.includes(e.ref)||(t.push(e.ref),t.sort(((e,t)=>o(t,n)-o(e,n))))}),(e=>{const n=t.indexOf(e.ref);-1!==n&&t.splice(n,1)}))}}},5807:(e,t,n)=>{n.d(t,{d:()=>u});var r=n(1368),i=n(4557),o=n(5106),s=n(9678);const a=class e extends o.M{constructor(t){super(t={...e.defaultOptions,...t}),this.enabled=!0,this._state=s.U.for2d(),this.blendMode=t.blendMode,this.padding=t.padding,"boolean"==typeof t.antialias?this.antialias=t.antialias?"on":"off":this.antialias=t.antialias,this.resolution=t.resolution,this.blendRequired=t.blendRequired,this.clipToViewport=t.clipToViewport,this.addResource("uTexture",0,1)}apply(e,t,n,r){e.applyFilter(this,t,n,r)}get blendMode(){return this._state.blendMode}set blendMode(e){this._state.blendMode=e}static from(t){const{gpu:n,gl:o,...s}=t;let a,u;return n&&(a=i.B.from(n)),o&&(u=r.M.from(o)),new e({gpuProgram:a,glProgram:u,...s})}};a.defaultOptions={blendMode:"normal",resolution:1,padding:0,antialias:"off",blendRequired:!1,clipToViewport:!0};let u=a},6276:(e,t,n)=>{n.d(t,{a:()=>r});class r{constructor(){this.pipe="filter",this.priority=1}destroy(){for(let e=0;e<this.filters.length;e++)this.filters[e].destroy();this.filters=null,this.filterArea=null}}},167:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(1368),i=n(4557),o=n(6524),s=n(5807),a="struct GlobalFilterUniforms {\n  uInputSize:vec4<f32>,\n  uInputPixel:vec4<f32>,\n  uInputClamp:vec4<f32>,\n  uOutputFrame:vec4<f32>,\n  uGlobalFrame:vec4<f32>,\n  uOutputTexture:vec4<f32>,\n};\n\nstruct AlphaUniforms {\n  uAlpha:f32,\n};\n\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\n@group(0) @binding(2) var uSampler : sampler;\n\n@group(1) @binding(0) var<uniform> alphaUniforms : AlphaUniforms;\n\nstruct VSOutput {\n    @builtin(position) position: vec4<f32>,\n    @location(0) uv : vec2<f32>\n  };\n\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\n{\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\n\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\n{\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\n}\n\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\n{\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);  \n}\n\nfn getSize() -> vec2<f32>\n{\n  return gfu.uGlobalFrame.zw;\n}\n  \n@vertex\nfn mainVertex(\n  @location(0) aPosition : vec2<f32>, \n) -> VSOutput {\n  return VSOutput(\n   filterVertexPosition(aPosition),\n   filterTextureCoord(aPosition)\n  );\n}\n\n@fragment\nfn mainFragment(\n  @location(0) uv: vec2<f32>,\n  @builtin(position) position: vec4<f32>\n) -> @location(0) vec4<f32> {\n \n    var sample = textureSample(uTexture, uSampler, uv);\n    \n    return sample * alphaUniforms.uAlpha;\n}";const u=class e extends s.d{constructor(t){t={...e.defaultOptions,...t};const n=i.B.from({vertex:{source:a,entryPoint:"mainVertex"},fragment:{source:a,entryPoint:"mainFragment"}}),s=r.M.from({vertex:"in vec2 aPosition;\nout vec2 vTextureCoord;\n\nuniform vec4 uInputSize;\nuniform vec4 uOutputFrame;\nuniform vec4 uOutputTexture;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\n    \n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord( void )\n{\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n    vTextureCoord = filterTextureCoord();\n}\n",fragment:"\nin vec2 vTextureCoord;\n\nout vec4 finalColor;\n\nuniform float uAlpha;\nuniform sampler2D uTexture;\n\nvoid main()\n{\n    finalColor =  texture(uTexture, vTextureCoord) * uAlpha;\n}\n",name:"alpha-filter"}),{alpha:u,...l}=t;super({...l,gpuProgram:n,glProgram:s,resources:{alphaUniforms:new o.k({uAlpha:{value:u,type:"f32"}})}})}get alpha(){return this.resources.alphaUniforms.uniforms.uAlpha}set alpha(e){this.resources.alphaUniforms.uniforms.uAlpha=e}};u.defaultOptions={alpha:1};let l=u},6125:(e,t,n)=>{n.d(t,{e:()=>u});var r=n(1448),i=n(2672),o=n(2597),s=n(5807),a=n(8130);class u extends s.d{constructor(...e){let t=e[0]??{};"number"==typeof t&&((0,o.t6)(o.lj,"BlurFilter constructor params are now options object. See params: { strength, quality, resolution, kernelSize }"),t={strength:t},void 0!==e[1]&&(t.quality=e[1]),void 0!==e[2]&&(t.resolution=e[2]||"inherit"),void 0!==e[3]&&(t.kernelSize=e[3])),t={...a.H.defaultOptions,...t};const{strength:n,strengthX:r,strengthY:s,quality:u,...l}=t;super({...l,compatibleRenderers:i.W.BOTH,resources:{}}),this._repeatEdgePixels=!1,this.blurXFilter=new a.H({horizontal:!0,...t}),this.blurYFilter=new a.H({horizontal:!1,...t}),this.quality=u,this.strengthX=r??n,this.strengthY=s??n,this.repeatEdgePixels=!1}apply(e,t,n,i){const o=Math.abs(this.blurXFilter.strength),s=Math.abs(this.blurYFilter.strength);if(o&&s){const o=r.W.getSameSizeTexture(t);this.blurXFilter.blendMode="normal",this.blurXFilter.apply(e,t,o,!0),this.blurYFilter.blendMode=this.blendMode,this.blurYFilter.apply(e,o,n,i),r.W.returnTexture(o)}else s?(this.blurYFilter.blendMode=this.blendMode,this.blurYFilter.apply(e,t,n,i)):(this.blurXFilter.blendMode=this.blendMode,this.blurXFilter.apply(e,t,n,i))}updatePadding(){this._repeatEdgePixels?this.padding=0:this.padding=2*Math.max(Math.abs(this.blurXFilter.blur),Math.abs(this.blurYFilter.blur))}get strength(){if(this.strengthX!==this.strengthY)throw new Error("BlurFilter's strengthX and strengthY are different");return this.strengthX}set strength(e){this.blurXFilter.blur=this.blurYFilter.blur=e,this.updatePadding()}get quality(){return this.blurXFilter.quality}set quality(e){this.blurXFilter.quality=this.blurYFilter.quality=e}get strengthX(){return this.blurXFilter.blur}set strengthX(e){this.blurXFilter.blur=e,this.updatePadding()}get strengthY(){return this.blurYFilter.blur}set strengthY(e){this.blurYFilter.blur=e,this.updatePadding()}get blur(){return(0,o.t6)("8.3.0","BlurFilter.blur is deprecated, please use BlurFilter.strength instead."),this.strength}set blur(e){(0,o.t6)("8.3.0","BlurFilter.blur is deprecated, please use BlurFilter.strength instead."),this.strength=e}get blurX(){return(0,o.t6)("8.3.0","BlurFilter.blurX is deprecated, please use BlurFilter.strengthX instead."),this.strengthX}set blurX(e){(0,o.t6)("8.3.0","BlurFilter.blurX is deprecated, please use BlurFilter.strengthX instead."),this.strengthX=e}get blurY(){return(0,o.t6)("8.3.0","BlurFilter.blurY is deprecated, please use BlurFilter.strengthY instead."),this.strengthY}set blurY(e){(0,o.t6)("8.3.0","BlurFilter.blurY is deprecated, please use BlurFilter.strengthY instead."),this.strengthY=e}get repeatEdgePixels(){return this._repeatEdgePixels}set repeatEdgePixels(e){this._repeatEdgePixels=e,this.updatePadding()}}u.defaultOptions={strength:8,quality:4,kernelSize:5}},8130:(e,t,n)=>{n.d(t,{H:()=>c});var r=n(1448),i=n(2672),o=n(5807),s=n(1368);const a={5:[.153388,.221461,.250301],7:[.071303,.131514,.189879,.214607],9:[.028532,.067234,.124009,.179044,.20236],11:[.0093,.028002,.065984,.121703,.175713,.198596],13:[.002406,.009255,.027867,.065666,.121117,.174868,.197641],15:[489e-6,.002403,.009246,.02784,.065602,.120999,.174697,.197448]},u=["in vec2 vBlurTexCoords[%size%];","uniform sampler2D uTexture;","out vec4 finalColor;","void main(void)","{","    finalColor = vec4(0.0);","    %blur%","}"].join("\n");function l(e,t){const n=function(e,t){const n=Math.ceil(e/2);let r,i="\n    in vec2 aPosition;\n\n    uniform float uStrength;\n\n    out vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 uInputSize;\n    uniform vec4 uOutputFrame;\n    uniform vec4 uOutputTexture;\n\n    vec4 filterVertexPosition( void )\n{\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\n    \n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\n    vec2 filterTextureCoord( void )\n    {\n        return aPosition * (uOutputFrame.zw * uInputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position = filterVertexPosition();\n\n        float pixelStrength = uInputSize.%dimension% * uStrength;\n\n        vec2 textureCoord = filterTextureCoord();\n        %blur%\n    }",o="";r=t?"vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * pixelStrength, 0.0);":"vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * pixelStrength);";for(let t=0;t<e;t++){let e=r.replace("%index%",t.toString());e=e.replace("%sampleIndex%",t-(n-1)+".0"),o+=e,o+="\n"}return i=i.replace("%blur%",o),i=i.replace("%size%",e.toString()),i=i.replace("%dimension%",t?"z":"w"),i}(t,e),r=function(e){const t=a[e],n=t.length;let r,i=u,o="";for(let i=0;i<e;i++){let s="finalColor += texture(uTexture, vBlurTexCoords[%index%]) * %value%;".replace("%index%",i.toString());r=i,i>=n&&(r=e-i-1),s=s.replace("%value%",t[r].toString()),o+=s,o+="\n"}return i=i.replace("%blur%",o),i=i.replace("%size%",e.toString()),i}(t);return s.M.from({vertex:n,fragment:r,name:`blur-${e?"horizontal":"vertical"}-pass-filter`})}var h=n(4557);const p=class e extends o.d{constructor(t){super({glProgram:l((t={...e.defaultOptions,...t}).horizontal,t.kernelSize),gpuProgram:function(e,t){const n=a[t],r=n.length,i=[],o=[],s=[];for(let a=0;a<t;a++){i[a]=`@location(${a}) offset${a}: vec2<f32>,`,o[a]=e?`filteredCord + vec2(${a-r+1} * pixelStrength, 0.0),`:`filteredCord + vec2(0.0, ${a-r+1} * pixelStrength),`;const u=n[a<r?a:t-a-1].toString();s[a]=`finalColor += textureSample(uTexture, uSampler, offset${a}) * ${u};`}const u=i.join("\n"),l=o.join("\n"),p=s.join("\n"),c="\n\nstruct GlobalFilterUniforms {\n  uInputSize:vec4<f32>,\n  uInputPixel:vec4<f32>,\n  uInputClamp:vec4<f32>,\n  uOutputFrame:vec4<f32>,\n  uGlobalFrame:vec4<f32>,\n  uOutputTexture:vec4<f32>,\n};\n\nstruct BlurUniforms {\n  uStrength:f32,\n};\n\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\n@group(0) @binding(2) var uSampler : sampler;\n\n@group(1) @binding(0) var<uniform> blurUniforms : BlurUniforms;\n\n\nstruct VSOutput {\n    @builtin(position) position: vec4<f32>,\n    %blur-struct%\n  };\n\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\n{\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\n\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\n{\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\n}\n\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\n{\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);  \n}\n\nfn getSize() -> vec2<f32>\n{\n  return gfu.uGlobalFrame.zw;\n}\n\n\n@vertex\nfn mainVertex(\n  @location(0) aPosition : vec2<f32>, \n) -> VSOutput {\n\n  let filteredCord = filterTextureCoord(aPosition);\n\n  let pixelStrength = gfu.uInputSize.%dimension% * blurUniforms.uStrength;\n\n  return VSOutput(\n   filterVertexPosition(aPosition),\n    %blur-vertex-out%\n  );\n}\n\n@fragment\nfn mainFragment(\n  @builtin(position) position: vec4<f32>,\n  %blur-fragment-in%\n) -> @location(0) vec4<f32> {\n\n    var   finalColor = vec4(0.0);\n\n    %blur-sampling%\n\n    return finalColor;\n}".replace("%blur-struct%",u).replace("%blur-vertex-out%",l).replace("%blur-fragment-in%",u).replace("%blur-sampling%",p).replace("%dimension%",e?"z":"w");return h.B.from({vertex:{source:c,entryPoint:"mainVertex"},fragment:{source:c,entryPoint:"mainFragment"}})}(t.horizontal,t.kernelSize),resources:{blurUniforms:{uStrength:{value:0,type:"f32"}}},...t}),this.horizontal=t.horizontal,this._quality=0,this.quality=t.quality,this.blur=t.strength,this._uniforms=this.resources.blurUniforms.uniforms}apply(e,t,n,o){if(this._uniforms.uStrength=this.strength/this.passes,1===this.passes)e.applyFilter(this,t,n,o);else{const s=r.W.getSameSizeTexture(t);let a=t,u=s;this._state.blend=!1;const l=e.renderer.type===i.W.WEBGPU;for(let t=0;t<this.passes-1;t++){e.applyFilter(this,a,u,0===t||l);const n=u;u=a,a=n}this._state.blend=!0,e.applyFilter(this,a,n,o),r.W.returnTexture(s)}}get blur(){return this.strength}set blur(e){this.padding=1+2*Math.abs(e),this.strength=e}get quality(){return this._quality}set quality(e){this._quality=e,this.passes=e}};p.defaultOptions={strength:8,quality:4,kernelSize:5};let c=p},4376:(e,t,n)=>{var r=n(9084);class i{constructor(e){this._renderer=e}push(e,t,n){this._renderer.renderPipes.batch.break(n),n.add({renderPipeId:"filter",canBundle:!1,action:"pushFilter",container:t,filterEffect:e})}pop(e,t,n){this._renderer.renderPipes.batch.break(n),n.add({renderPipeId:"filter",action:"popFilter",canBundle:!1})}execute(e){"pushFilter"===e.action?this._renderer.filter.push(e):"popFilter"===e.action&&this._renderer.filter.pop()}destroy(){this._renderer=null}}i.extension={type:[r.Ag.WebGLPipes,r.Ag.WebGPUPipes,r.Ag.CanvasPipes],name:"filter"};var o=n(1026),s=n(5638),a=n(5108),u=n(6712),l=n(6524),h=n(8554),p=n(1448),c=n(2672),d=n(3475),v=n(4584),f=n(3375),m=n(8273);const g=new u.V({attributes:{aPosition:{buffer:new Float32Array([0,0,1,0,1,1,0,1]),format:"float32x2",stride:8,offset:0}},indexBuffer:new Uint32Array([0,1,2,0,2,3])});class y{constructor(e){this._filterStackIndex=0,this._filterStack=[],this._filterGlobalUniforms=new l.k({uInputSize:{value:new Float32Array(4),type:"vec4<f32>"},uInputPixel:{value:new Float32Array(4),type:"vec4<f32>"},uInputClamp:{value:new Float32Array(4),type:"vec4<f32>"},uOutputFrame:{value:new Float32Array(4),type:"vec4<f32>"},uGlobalFrame:{value:new Float32Array(4),type:"vec4<f32>"},uOutputTexture:{value:new Float32Array(4),type:"vec4<f32>"}}),this._globalFilterBindGroup=new a.T({}),this.renderer=e}get activeBackTexture(){return this._activeFilterData?.backTexture}push(e){const t=this.renderer,n=e.filterEffect.filters;this._filterStack[this._filterStackIndex]||(this._filterStack[this._filterStackIndex]=this._getFilterData());const r=this._filterStack[this._filterStackIndex];if(this._filterStackIndex++,0===n.length)return void(r.skip=!0);const i=r.bounds;if(e.renderables?(0,f.L)(e.renderables,i):e.filterEffect.filterArea?(i.clear(),i.addRect(e.filterEffect.filterArea),i.applyMatrix(e.container.worldTransform)):(0,v.v)(e.container,i),e.container){const t=(e.container.renderGroup||e.container.parentRenderGroup).cacheToLocalTransform;t&&i.applyMatrix(t)}const o=t.renderTarget.renderTarget.colorTexture.source;let s=1/0,a=0,u=!0,l=!1,h=!1,c=!0;for(let e=0;e<n.length;e++){const r=n[e];s=Math.min(s,"inherit"===r.resolution?o._resolution:r.resolution),a+=r.padding,"off"===r.antialias?u=!1:"inherit"===r.antialias&&u&&(u=o.antialias),r.clipToViewport||(c=!1);if(!!!(r.compatibleRenderers&t.type)){h=!1;break}if(r.blendRequired&&!(t.backBuffer?.useBackBuffer??1)){(0,m.R)("Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options."),h=!1;break}h=r.enabled||h,l||(l=r.blendRequired)}if(h){if(c){const e=t.renderTarget.rootViewPort,n=t.renderTarget.renderTarget.resolution;i.fitBounds(0,e.width/n,0,e.height/n)}i.scale(s).ceil().scale(1/s).pad(0|a),i.isPositive?(r.skip=!1,r.bounds=i,r.blendRequired=l,r.container=e.container,r.filterEffect=e.filterEffect,r.previousRenderSurface=t.renderTarget.renderSurface,r.inputTexture=p.W.getOptimalTexture(i.width,i.height,s,u),t.renderTarget.bind(r.inputTexture,!0),t.globalUniforms.push({offset:i})):r.skip=!0}else r.skip=!0}pop(){const e=this.renderer;this._filterStackIndex--;const t=this._filterStack[this._filterStackIndex];if(t.skip)return;this._activeFilterData=t;const n=t.inputTexture,r=t.bounds;let i=h.g.EMPTY;if(e.renderTarget.finishRenderPass(),t.blendRequired){const n=this._filterStackIndex>0?this._filterStack[this._filterStackIndex-1].bounds:null,o=e.renderTarget.getRenderTarget(t.previousRenderSurface);i=this.getBackTexture(o,r,n)}t.backTexture=i;const o=t.filterEffect.filters;if(this._globalFilterBindGroup.setResource(n.source.style,2),this._globalFilterBindGroup.setResource(i.source,3),e.globalUniforms.pop(),1===o.length)o[0].apply(this,n,t.previousRenderSurface,!1),p.W.returnTexture(n);else{let e=t.inputTexture,n=p.W.getOptimalTexture(r.width,r.height,e.source._resolution,!1),i=0;for(i=0;i<o.length-1;++i){o[i].apply(this,e,n,!0);const t=e;e=n,n=t}o[i].apply(this,e,t.previousRenderSurface,!1),p.W.returnTexture(e),p.W.returnTexture(n)}t.blendRequired&&p.W.returnTexture(i)}getBackTexture(e,t,n){const r=e.colorTexture.source._resolution,i=p.W.getOptimalTexture(t.width,t.height,r,!1);let o=t.minX,s=t.minY;n&&(o-=n.minX,s-=n.minY),o=Math.floor(o*r),s=Math.floor(s*r);const a=Math.ceil(t.width*r),u=Math.ceil(t.height*r);return this.renderer.renderTarget.copyToTexture(e,i,{x:o,y:s},{width:a,height:u},{x:0,y:0}),i}applyFilter(e,t,n,r){const i=this.renderer,o=this._filterStack[this._filterStackIndex],a=o.bounds,u=s.b.shared,l=o.previousRenderSurface===n;let p=this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution,d=this._filterStackIndex-1;for(;d>0&&this._filterStack[d].skip;)--d;d>0&&(p=this._filterStack[d].inputTexture.source._resolution);const v=this._filterGlobalUniforms,f=v.uniforms,m=f.uOutputFrame,y=f.uInputSize,b=f.uInputPixel,T=f.uInputClamp,E=f.uGlobalFrame,P=f.uOutputTexture;if(l){let e=this._filterStackIndex;for(;e>0;){e--;const t=this._filterStack[this._filterStackIndex-1];if(!t.skip){u.x=t.bounds.minX,u.y=t.bounds.minY;break}}m[0]=a.minX-u.x,m[1]=a.minY-u.y}else m[0]=0,m[1]=0;m[2]=t.frame.width,m[3]=t.frame.height,y[0]=t.source.width,y[1]=t.source.height,y[2]=1/y[0],y[3]=1/y[1],b[0]=t.source.pixelWidth,b[1]=t.source.pixelHeight,b[2]=1/b[0],b[3]=1/b[1],T[0]=.5*b[2],T[1]=.5*b[3],T[2]=t.frame.width*y[2]-.5*b[2],T[3]=t.frame.height*y[3]-.5*b[3];const x=this.renderer.renderTarget.rootRenderTarget.colorTexture;E[0]=u.x*p,E[1]=u.y*p,E[2]=x.source.width*p,E[3]=x.source.height*p;const _=this.renderer.renderTarget.getRenderTarget(n);if(i.renderTarget.bind(n,!!r),n instanceof h.g?(P[0]=n.frame.width,P[1]=n.frame.height):(P[0]=_.width,P[1]=_.height),P[2]=_.isRoot?-1:1,v.update(),i.renderPipes.uniformBatch){const e=i.renderPipes.uniformBatch.getUboResource(v);this._globalFilterBindGroup.setResource(e,0)}else this._globalFilterBindGroup.setResource(v,0);this._globalFilterBindGroup.setResource(t.source,1),this._globalFilterBindGroup.setResource(t.source.style,2),e.groups[0]=this._globalFilterBindGroup,i.encoder.draw({geometry:g,shader:e,state:e._state,topology:"triangle-list"}),i.type===c.W.WEBGL&&i.renderTarget.finishRenderPass()}_getFilterData(){return{skip:!1,inputTexture:null,bounds:new d.c,container:null,filterEffect:null,blendRequired:!1,previousRenderSurface:null}}calculateSpriteMatrix(e,t){const n=this._activeFilterData,r=e.set(n.inputTexture._source.width,0,0,n.inputTexture._source.height,n.bounds.minX,n.bounds.minY),i=t.worldTransform.copyTo(o.u.shared),s=t.renderGroup||t.parentRenderGroup;return s&&s.cacheToLocalTransform&&i.prepend(s.cacheToLocalTransform),i.invert(),r.prepend(i),r.scale(1/t.texture.frame.width,1/t.texture.frame.height),r.translate(t.anchor.x,t.anchor.y),r}}y.extension={type:[r.Ag.WebGLSystem,r.Ag.WebGPUSystem],name:"filter"},r.XO.add(y),r.XO.add(i)},3685:(e,t,n)=>{n.d(t,{L:()=>h});var r=n(1026),i=n(1368),o=n(4557),s=n(6524),a=n(7273),u=n(5807),l="struct GlobalFilterUniforms {\n  uInputSize:vec4<f32>,\n  uInputPixel:vec4<f32>,\n  uInputClamp:vec4<f32>,\n  uOutputFrame:vec4<f32>,\n  uGlobalFrame:vec4<f32>,\n  uOutputTexture:vec4<f32>,\n};\n\nstruct MaskUniforms {\n  uFilterMatrix:mat3x3<f32>,\n  uMaskClamp:vec4<f32>,\n  uAlpha:f32,\n  uInverse:f32,\n};\n\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\n@group(0) @binding(1) var uTexture: texture_2d<f32>;\n@group(0) @binding(2) var uSampler : sampler;\n\n@group(1) @binding(0) var<uniform> filterUniforms : MaskUniforms;\n@group(1) @binding(1) var uMaskTexture: texture_2d<f32>;\n\nstruct VSOutput {\n    @builtin(position) position: vec4<f32>,\n    @location(0) uv : vec2<f32>,\n    @location(1) filterUv : vec2<f32>,\n};\n\nfn filterVertexPosition(aPosition:vec2<f32>) -> vec4<f32>\n{\n    var position = aPosition * gfu.uOutputFrame.zw + gfu.uOutputFrame.xy;\n\n    position.x = position.x * (2.0 / gfu.uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0*gfu.uOutputTexture.z / gfu.uOutputTexture.y) - gfu.uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\nfn filterTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\n{\n    return aPosition * (gfu.uOutputFrame.zw * gfu.uInputSize.zw);\n}\n\nfn globalTextureCoord( aPosition:vec2<f32> ) -> vec2<f32>\n{\n  return  (aPosition.xy / gfu.uGlobalFrame.zw) + (gfu.uGlobalFrame.xy / gfu.uGlobalFrame.zw);\n}\n\nfn getFilterCoord(aPosition:vec2<f32> ) -> vec2<f32>\n{\n  return ( filterUniforms.uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\n}\n\nfn getSize() -> vec2<f32>\n{\n  return gfu.uGlobalFrame.zw;\n}\n\n@vertex\nfn mainVertex(\n  @location(0) aPosition : vec2<f32>,\n) -> VSOutput {\n  return VSOutput(\n   filterVertexPosition(aPosition),\n   filterTextureCoord(aPosition),\n   getFilterCoord(aPosition)\n  );\n}\n\n@fragment\nfn mainFragment(\n  @location(0) uv: vec2<f32>,\n  @location(1) filterUv: vec2<f32>,\n  @builtin(position) position: vec4<f32>\n) -> @location(0) vec4<f32> {\n\n    var maskClamp = filterUniforms.uMaskClamp;\n    var uAlpha = filterUniforms.uAlpha;\n\n    var clip = step(3.5,\n      step(maskClamp.x, filterUv.x) +\n      step(maskClamp.y, filterUv.y) +\n      step(filterUv.x, maskClamp.z) +\n      step(filterUv.y, maskClamp.w));\n\n    var mask = textureSample(uMaskTexture, uSampler, filterUv);\n    var source = textureSample(uTexture, uSampler, uv);\n    var alphaMul = 1.0 - uAlpha * (1.0 - mask.a);\n\n    var a: f32 = alphaMul * mask.r * uAlpha * clip;\n\n    if (filterUniforms.uInverse == 1.0) {\n        a = 1.0 - a;\n    }\n\n    return source * a;\n}\n";class h extends u.d{constructor(e){const{sprite:t,...n}=e,u=new a.N(t.texture),h=new s.k({uFilterMatrix:{value:new r.u,type:"mat3x3<f32>"},uMaskClamp:{value:u.uClampFrame,type:"vec4<f32>"},uAlpha:{value:1,type:"f32"},uInverse:{value:e.inverse?1:0,type:"f32"}});super({...n,gpuProgram:o.B.from({vertex:{source:l,entryPoint:"mainVertex"},fragment:{source:l,entryPoint:"mainFragment"}}),glProgram:i.M.from({vertex:"in vec2 aPosition;\n\nout vec2 vTextureCoord;\nout vec2 vMaskCoord;\n\n\nuniform vec4 uInputSize;\nuniform vec4 uOutputFrame;\nuniform vec4 uOutputTexture;\nuniform mat3 uFilterMatrix;\n\nvec4 filterVertexPosition(  vec2 aPosition )\n{\n    vec2 position = aPosition * uOutputFrame.zw + uOutputFrame.xy;\n       \n    position.x = position.x * (2.0 / uOutputTexture.x) - 1.0;\n    position.y = position.y * (2.0*uOutputTexture.z / uOutputTexture.y) - uOutputTexture.z;\n\n    return vec4(position, 0.0, 1.0);\n}\n\nvec2 filterTextureCoord(  vec2 aPosition )\n{\n    return aPosition * (uOutputFrame.zw * uInputSize.zw);\n}\n\nvec2 getFilterCoord( vec2 aPosition )\n{\n    return  ( uFilterMatrix * vec3( filterTextureCoord(aPosition), 1.0)  ).xy;\n}   \n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition(aPosition);\n    vTextureCoord = filterTextureCoord(aPosition);\n    vMaskCoord = getFilterCoord(aPosition);\n}\n",fragment:"in vec2 vMaskCoord;\nin vec2 vTextureCoord;\n\nuniform sampler2D uTexture;\nuniform sampler2D uMaskTexture;\n\nuniform float uAlpha;\nuniform vec4 uMaskClamp;\nuniform float uInverse;\n\nout vec4 finalColor;\n\nvoid main(void)\n{\n    float clip = step(3.5,\n        step(uMaskClamp.x, vMaskCoord.x) +\n        step(uMaskClamp.y, vMaskCoord.y) +\n        step(vMaskCoord.x, uMaskClamp.z) +\n        step(vMaskCoord.y, uMaskClamp.w));\n\n    // TODO look into why this is needed\n    float npmAlpha = uAlpha;\n    vec4 original = texture(uTexture, vTextureCoord);\n    vec4 masky = texture(uMaskTexture, vMaskCoord);\n    float alphaMul = 1.0 - npmAlpha * (1.0 - masky.a);\n\n    float a = alphaMul * masky.r * npmAlpha * clip;\n\n    if (uInverse == 1.0) {\n        a = 1.0 - a;\n    }\n\n    finalColor = original * a;\n}\n",name:"mask-filter"}),resources:{filterUniforms:h,uMaskTexture:t.texture.source}}),this.sprite=t,this._textureMatrix=u}set inverse(e){this.resources.filterUniforms.uniforms.uInverse=e?1:0}get inverse(){return 1===this.resources.filterUniforms.uniforms.uInverse}apply(e,t,n,r){this._textureMatrix.texture=this.sprite.texture,e.calculateSpriteMatrix(this.resources.filterUniforms.uniforms.uFilterMatrix,this.sprite).prepend(this._textureMatrix.mapCoord),this.resources.uMaskTexture=this.sprite.texture.source,e.applyFilter(this,t,n,r)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,