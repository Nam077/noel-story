"use strict";(self.webpackChunkpixijs_game=self.webpackChunkpixijs_game||[]).push([[517],{1026:(t,s,i)=>{i.d(s,{u:()=>n});var h=i(1081),a=i(5638);class n{constructor(t=1,s=0,i=0,h=1,a=0,n=0){this.array=null,this.a=t,this.b=s,this.c=i,this.d=h,this.tx=a,this.ty=n}fromArray(t){this.a=t[0],this.b=t[1],this.c=t[3],this.d=t[4],this.tx=t[2],this.ty=t[5]}set(t,s,i,h,a,n){return this.a=t,this.b=s,this.c=i,this.d=h,this.tx=a,this.ty=n,this}toArray(t,s){this.array||(this.array=new Float32Array(9));const i=s||this.array;return t?(i[0]=this.a,i[1]=this.b,i[2]=0,i[3]=this.c,i[4]=this.d,i[5]=0,i[6]=this.tx,i[7]=this.ty,i[8]=1):(i[0]=this.a,i[1]=this.c,i[2]=this.tx,i[3]=this.b,i[4]=this.d,i[5]=this.ty,i[6]=0,i[7]=0,i[8]=1),i}apply(t,s){s=s||new a.b;const i=t.x,h=t.y;return s.x=this.a*i+this.c*h+this.tx,s.y=this.b*i+this.d*h+this.ty,s}applyInverse(t,s){s=s||new a.b;const i=this.a,h=this.b,n=this.c,r=this.d,c=this.tx,e=this.ty,y=1/(i*r+n*-h),d=t.x,o=t.y;return s.x=r*y*d+-n*y*o+(e*n-c*r)*y,s.y=i*y*o+-h*y*d+(-e*i+c*h)*y,s}translate(t,s){return this.tx+=t,this.ty+=s,this}scale(t,s){return this.a*=t,this.d*=s,this.c*=t,this.b*=s,this.tx*=t,this.ty*=s,this}rotate(t){const s=Math.cos(t),i=Math.sin(t),h=this.a,a=this.c,n=this.tx;return this.a=h*s-this.b*i,this.b=h*i+this.b*s,this.c=a*s-this.d*i,this.d=a*i+this.d*s,this.tx=n*s-this.ty*i,this.ty=n*i+this.ty*s,this}append(t){const s=this.a,i=this.b,h=this.c,a=this.d;return this.a=t.a*s+t.b*h,this.b=t.a*i+t.b*a,this.c=t.c*s+t.d*h,this.d=t.c*i+t.d*a,this.tx=t.tx*s+t.ty*h+this.tx,this.ty=t.tx*i+t.ty*a+this.ty,this}appendFrom(t,s){const i=t.a,h=t.b,a=t.c,n=t.d,r=t.tx,c=t.ty,e=s.a,y=s.b,d=s.c,o=s.d;return this.a=i*e+h*d,this.b=i*y+h*o,this.c=a*e+n*d,this.d=a*y+n*o,this.tx=r*e+c*d+s.tx,this.ty=r*y+c*o+s.ty,this}setTransform(t,s,i,h,a,n,r,c,e){return this.a=Math.cos(r+e)*a,this.b=Math.sin(r+e)*a,this.c=-Math.sin(r-c)*n,this.d=Math.cos(r-c)*n,this.tx=t-(i*this.a+h*this.c),this.ty=s-(i*this.b+h*this.d),this}prepend(t){const s=this.tx;if(1!==t.a||0!==t.b||0!==t.c||1!==t.d){const s=this.a,i=this.c;this.a=s*t.a+this.b*t.c,this.b=s*t.b+this.b*t.d,this.c=i*t.a+this.d*t.c,this.d=i*t.b+this.d*t.d}return this.tx=s*t.a+this.ty*t.c+t.tx,this.ty=s*t.b+this.ty*t.d+t.ty,this}decompose(t){const s=this.a,i=this.b,a=this.c,n=this.d,r=t.pivot,c=-Math.atan2(-a,n),e=Math.atan2(i,s),y=Math.abs(c+e);return y<1e-5||Math.abs(h.TO-y)<1e-5?(t.rotation=e,t.skew.x=t.skew.y=0):(t.rotation=0,t.skew.x=c,t.skew.y=e),t.scale.x=Math.sqrt(s*s+i*i),t.scale.y=Math.sqrt(a*a+n*n),t.position.x=this.tx+(r.x*s+r.y*a),t.position.y=this.ty+(r.x*i+r.y*n),t}invert(){const t=this.a,s=this.b,i=this.c,h=this.d,a=this.tx,n=t*h-s*i;return this.a=h/n,this.b=-s/n,this.c=-i/n,this.d=t/n,this.tx=(i*this.ty-h*a)/n,this.ty=-(t*this.ty-s*a)/n,this}isIdentity(){return 1===this.a&&0===this.b&&0===this.c&&1===this.d&&0===this.tx&&0===this.ty}identity(){return this.a=1,this.b=0,this.c=0,this.d=1,this.tx=0,this.ty=0,this}clone(){const t=new n;return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.tx=this.tx,t.ty=this.ty,t}copyTo(t){return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.tx=this.tx,t.ty=this.ty,t}copyFrom(t){return this.a=t.a,this.b=t.b,this.c=t.c,this.d=t.d,this.tx=t.tx,this.ty=t.ty,this}equals(t){return t.a===this.a&&t.b===this.b&&t.c===this.c&&t.d===this.d&&t.tx===this.tx&&t.ty===this.ty}toString(){return`[pixi.js:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`}static get IDENTITY(){return c.identity()}static get shared(){return r.identity()}}const r=new n,c=new n},7278:(t,s,i)=>{i.d(s,{E:()=>o});var h=i(1026);const a=[1,1,0,-1,-1,-1,0,1,1,1,0,-1,-1,-1,0,1],n=[0,1,1,1,0,-1,-1,-1,0,1,1,1,0,-1,-1,-1],r=[0,-1,-1,-1,0,1,1,1,0,1,1,1,0,-1,-1,-1],c=[1,1,0,-1,-1,-1,0,1,-1,-1,0,1,1,1,0,-1],e=[],y=[],d=Math.sign;!function(){for(let t=0;t<16;t++){const s=[];e.push(s);for(let i=0;i<16;i++){const h=d(a[t]*a[i]+r[t]*n[i]),e=d(n[t]*a[i]+c[t]*n[i]),y=d(a[t]*r[i]+r[t]*c[i]),o=d(n[t]*r[i]+c[t]*c[i]);for(let t=0;t<16;t++)if(a[t]===h&&n[t]===e&&r[t]===y&&c[t]===o){s.push(t);break}}}for(let t=0;t<16;t++){const s=new h.u;s.set(a[t],n[t],r[t],c[t],0,0),y.push(s)}}();const o={E:0,SE:1,S:2,SW:3,W:4,NW:5,N:6,NE:7,MIRROR_VERTICAL:8,MAIN_DIAGONAL:10,MIRROR_HORIZONTAL:12,REVERSE_DIAGONAL:14,uX:t=>a[t],uY:t=>n[t],vX:t=>r[t],vY:t=>c[t],inv:t=>8&t?15&t:7&-t,add:(t,s)=>e[t][s],sub:(t,s)=>e[t][o.inv(s)],rotate180:t=>4^t,isVertical:t=>2==(3&t),byDirection:(t,s)=>2*Math.abs(t)<=Math.abs(s)?s>=0?o.S:o.N:2*Math.abs(s)<=Math.abs(t)?t>0?o.E:o.W:s>0?t>0?o.SE:o.SW:t>0?o.NE:o.NW,matrixAppendRotationInv:(t,s,i=0,h=0)=>{const a=y[o.inv(s)];a.tx=i,a.ty=h,t.append(a)}}},1081:(t,s,i)=>{i.d(s,{TO:()=>h,Td:()=>n,bO:()=>a});const h=2*Math.PI,a=180/Math.PI,n=Math.PI/180},3932:(t,s,i)=>{function h(t){return t+=0===t?1:0,--t,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,(t|=t>>>16)+1}function a(t){return!(t&t-1||!t)}i.d(s,{U5:()=>h,f3:()=>a})},2390:(t,s,i)=>{function h(t,s,i,h,a,n){const r=a-i,c=n-h,e=r*r+c*c;let y,d,o=-1;0!==e&&(o=((t-i)*r+(s-h)*c)/e),o<0?(y=i,d=h):o>1?(y=a,d=n):(y=i+o*r,d=h+o*c);const b=t-y,x=s-d;return b*b+x*x}i.d(s,{z:()=>h})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,