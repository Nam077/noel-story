"use strict";(self.webpackChunkpixijs_game=self.webpackChunkpixijs_game||[]).push([[630],{4573:(t,e,s)=>{var i=s(9084),r=s(9160),a=s(4942),n=s(4494),h=s(8554),o=s(2138),l=s(7474);const c=class t{constructor(t,e){this.linkedSheets=[],this._texture=t instanceof h.g?t:null,this.textureSource=t.source,this.textures={},this.animations={},this.data=e;const s=parseFloat(e.meta.scale);s?(this.resolution=s,t.source.resolution=this.resolution):this.resolution=t.source._resolution,this._frames=this.data.frames,this._frameKeys=Object.keys(this._frames),this._batchIndex=0,this._callback=null}parse(){return new Promise((e=>{this._callback=e,this._batchIndex=0,this._frameKeys.length<=t.BATCH_SIZE?(this._processFrames(0),this._processAnimations(),this._parseComplete()):this._nextBatch()}))}_processFrames(e){let s=e;const i=t.BATCH_SIZE;for(;s-e<i&&s<this._frameKeys.length;){const t=this._frameKeys[s],e=this._frames[t],i=e.frame;if(i){let s=null,r=null;const a=!1!==e.trimmed&&e.sourceSize?e.sourceSize:e.frame,n=new l.M(0,0,Math.floor(a.w)/this.resolution,Math.floor(a.h)/this.resolution);s=e.rotated?new l.M(Math.floor(i.x)/this.resolution,Math.floor(i.y)/this.resolution,Math.floor(i.h)/this.resolution,Math.floor(i.w)/this.resolution):new l.M(Math.floor(i.x)/this.resolution,Math.floor(i.y)/this.resolution,Math.floor(i.w)/this.resolution,Math.floor(i.h)/this.resolution),!1!==e.trimmed&&e.spriteSourceSize&&(r=new l.M(Math.floor(e.spriteSourceSize.x)/this.resolution,Math.floor(e.spriteSourceSize.y)/this.resolution,Math.floor(i.w)/this.resolution,Math.floor(i.h)/this.resolution)),this.textures[t]=new h.g({source:this.textureSource,frame:s,orig:n,trim:r,rotate:e.rotated?2:0,defaultAnchor:e.anchor,defaultBorders:e.borders,label:t.toString()})}s++}}_processAnimations(){const t=this.data.animations||{};for(const e in t){this.animations[e]=[];for(let s=0;s<t[e].length;s++){const i=t[e][s];this.animations[e].push(this.textures[i])}}}_parseComplete(){const t=this._callback;this._callback=null,this._batchIndex=0,t.call(this,this.textures)}_nextBatch(){this._processFrames(this._batchIndex*t.BATCH_SIZE),this._batchIndex++,setTimeout((()=>{this._batchIndex*t.BATCH_SIZE<this._frameKeys.length?this._nextBatch():(this._processAnimations(),this._parseComplete())}),0)}destroy(t=!1){for(const t in this.textures)this.textures[t].destroy();this._frames=null,this._frameKeys=null,this.data=null,this.textures=null,t&&(this._texture?.destroy(),this.textureSource.destroy()),this._texture=null,this.textureSource=null,this.linkedSheets=[]}};c.BATCH_SIZE=1e3;let d=c;const u=["jpg","png","jpeg","avif","webp","basis","etc2","bc7","bc6h","bc5","bc4","bc3","bc2","bc1","eac","astc"];function _(t,e,s){const i={};if(t.forEach((t=>{i[t]=e})),Object.keys(e.textures).forEach((t=>{i[t]=e.textures[t]})),!s){const s=o.A.dirname(t[0]);e.linkedSheets.forEach(((t,r)=>{const a=_([`${s}/${e.data.meta.related_multi_packs[r]}`],t,!0);Object.assign(i,a)}))}return i}const m={extension:i.Ag.Asset,cache:{test:t=>t instanceof d,getCacheableAssets:(t,e)=>_(t,e,!1)},resolver:{extension:{type:i.Ag.ResolveParser,name:"resolveSpritesheet"},test:t=>{const e=t.split("?")[0].split("."),s=e.pop(),i=e.pop();return"json"===s&&u.includes(i)},parse:t=>{const e=t.split(".");return{resolution:parseFloat(a.x.RETINA_PREFIX.exec(t)?.[1]??"1"),format:e[e.length-2],src:t}}},loader:{name:"spritesheetLoader",extension:{type:i.Ag.LoadParser,priority:r.T.Normal,name:"spritesheetLoader"},testParse:async(t,e)=>".json"===o.A.extname(e.src).toLowerCase()&&!!t.frames,async parse(t,e,s){const{texture:i,imageFilename:r}=e?.data??{};let a,l=o.A.dirname(e.src);if(l&&l.lastIndexOf("/")!==l.length-1&&(l+="/"),i instanceof h.g)a=i;else{const i=(0,n.Y)(l+(r??t.meta.image),e.src);a=(await s.load([i]))[i]}const c=new d(a.source,t);await c.parse();const u=t?.meta?.related_multi_packs;if(Array.isArray(u)){const t=[];for(const i of u){if("string"!=typeof i)continue;let r=l+i;e.data?.ignoreMultiPack||(r=(0,n.Y)(r,e.src),t.push(s.load({src:r,data:{ignoreMultiPack:!0}})))}const i=await Promise.all(t);c.linkedSheets=i,i.forEach((t=>{t.linkedSheets=[c].concat(c.linkedSheets.filter((e=>e!==t)))}))}return c},async unload(t,e,s){await s.unload(t.textureSource._sourceOrigin),t.destroy(!1)}}};i.XO.add(m)},6212:(t,e,s)=>{s.d(e,{R:()=>n});var i=s(2947);class r{constructor(t,e=null,s=0,i=!1){this.next=null,this.previous=null,this._destroyed=!1,this._fn=t,this._context=e,this.priority=s,this._once=i}match(t,e=null){return this._fn===t&&this._context===e}emit(t){this._fn&&(this._context?this._fn.call(this._context,t):this._fn(t));const e=this.next;return this._once&&this.destroy(!0),this._destroyed&&(this.next=null),e}connect(t){this.previous=t,t.next&&(t.next.previous=this),this.next=t.next,t.next=this}destroy(t=!1){this._destroyed=!0,this._fn=null,this._context=null,this.previous&&(this.previous.next=this.next),this.next&&(this.next.previous=this.previous);const e=this.next;return this.next=t?null:e,this.previous=null,e}}const a=class t{constructor(){this.autoStart=!1,this.deltaTime=1,this.lastTime=-1,this.speed=1,this.started=!1,this._requestId=null,this._maxElapsedMS=100,this._minElapsedMS=0,this._protected=!1,this._lastFrame=-1,this._head=new r(null,null,1/0),this.deltaMS=1/t.targetFPMS,this.elapsedMS=1/t.targetFPMS,this._tick=t=>{this._requestId=null,this.started&&(this.update(t),this.started&&null===this._requestId&&this._head.next&&(this._requestId=requestAnimationFrame(this._tick)))}}_requestIfNeeded(){null===this._requestId&&this._head.next&&(this.lastTime=performance.now(),this._lastFrame=this.lastTime,this._requestId=requestAnimationFrame(this._tick))}_cancelIfNeeded(){null!==this._requestId&&(cancelAnimationFrame(this._requestId),this._requestId=null)}_startIfPossible(){this.started?this._requestIfNeeded():this.autoStart&&this.start()}add(t,e,s=i.d.NORMAL){return this._addListener(new r(t,e,s))}addOnce(t,e,s=i.d.NORMAL){return this._addListener(new r(t,e,s,!0))}_addListener(t){let e=this._head.next,s=this._head;if(e){for(;e;){if(t.priority>e.priority){t.connect(s);break}s=e,e=e.next}t.previous||t.connect(s)}else t.connect(s);return this._startIfPossible(),this}remove(t,e){let s=this._head.next;for(;s;)s=s.match(t,e)?s.destroy():s.next;return this._head.next||this._cancelIfNeeded(),this}get count(){if(!this._head)return 0;let t=0,e=this._head;for(;e=e.next;)t++;return t}start(){this.started||(this.started=!0,this._requestIfNeeded())}stop(){this.started&&(this.started=!1,this._cancelIfNeeded())}destroy(){if(!this._protected){this.stop();let t=this._head.next;for(;t;)t=t.destroy(!0);this._head.destroy(),this._head=null}}update(e=performance.now()){let s;if(e>this.lastTime){if(s=this.elapsedMS=e-this.lastTime,s>this._maxElapsedMS&&(s=this._maxElapsedMS),s*=this.speed,this._minElapsedMS){const t=e-this._lastFrame|0;if(t<this._minElapsedMS)return;this._lastFrame=e-t%this._minElapsedMS}this.deltaMS=s,this.deltaTime=this.deltaMS*t.targetFPMS;const i=this._head;let r=i.next;for(;r;)r=r.emit(this);i.next||this._cancelIfNeeded()}else this.deltaTime=this.deltaMS=this.elapsedMS=0;this.lastTime=e}get FPS(){return 1e3/this.elapsedMS}get minFPS(){return 1e3/this._maxElapsedMS}set minFPS(e){const s=Math.min(this.maxFPS,e),i=Math.min(Math.max(0,s)/1e3,t.targetFPMS);this._maxElapsedMS=1/i}get maxFPS(){return this._minElapsedMS?Math.round(1e3/this._minElapsedMS):0}set maxFPS(t){if(0===t)this._minElapsedMS=0;else{const e=Math.max(this.minFPS,t);this._minElapsedMS=1/(e/1e3)}}static get shared(){if(!t._shared){const e=t._shared=new t;e.autoStart=!0,e._protected=!0}return t._shared}static get system(){if(!t._system){const e=t._system=new t;e.autoStart=!0,e._protected=!0}return t._system}};a.targetFPMS=.06;let n=a},2947:(t,e,s)=>{s.d(e,{d:()=>i});var i=(t=>(t[t.INTERACTION=50]="INTERACTION",t[t.HIGH=25]="HIGH",t[t.NORMAL=0]="NORMAL",t[t.LOW=-25]="LOW",t[t.UTILITY=-50]="UTILITY",t))(i||{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,