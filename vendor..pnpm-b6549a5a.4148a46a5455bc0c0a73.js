"use strict";(self.webpackChunkpixijs_game=self.webpackChunkpixijs_game||[]).push([[676],{7541:(t,e,s)=>{s.d(e,{k:()=>f});var r=s(9084),i=s(1026),n=s(3490),a=s(684),o=s(9278),h=s(7955),l=s(544),c=s(2152),u=s(2137),d=s(5106),p=s(6524);class f{init(){const t=new p.k({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new i.u,type:"mat3x3<f32>"},uRound:{value:0,type:"f32"}}),e=(0,n.a)(),s=(0,a.I)({name:"graphics",bits:[o.a,(0,h.P)(e),l.mA,c.m]});this.shader=new d.M({glProgram:s,resources:{localUniforms:t,batchSamplers:(0,u.n)(e)}})}execute(t,e){const s=e.context,r=s.customShader||this.shader,i=t.renderer,n=i.graphicsContext,{batcher:a,instructions:o}=n.getContextRenderData(s);r.groups[0]=i.globalUniforms.bindGroup,i.state.set(t.state),i.shader.bind(r),i.geometry.bind(a.geometry,r.glProgram);const h=o.instructions;for(let t=0;t<o.instructionSize;t++){const e=h[t];if(e.size){for(let t=0;t<e.textures.count;t++)i.texture.bind(e.textures.textures[t],t);i.geometry.draw(e.topology,e.size,e.start)}}}destroy(){this.shader.destroy(!0),this.shader=null}}f.extension={type:[r.Ag.WebGLPipesAdaptor],name:"graphics"}},1345:(t,e,s)=>{s.d(e,{r:()=>f});var r=s(9084),i=s(1026),n=s(3490),a=s(1980),o=s(684),h=s(9278),l=s(7955),c=s(544),u=s(2152),d=s(5106),p=s(6524);class f{init(){const t=new p.k({uTransformMatrix:{value:new i.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),e=(0,o.v)({name:"graphics",bits:[h.F,(0,l._)((0,n.a)()),c._Q,u.b]});this.shader=new d.M({gpuProgram:e,resources:{localUniforms:t}})}execute(t,e){const s=e.context,r=s.customShader||this.shader,i=t.renderer,n=i.graphicsContext,{batcher:o,instructions:h}=n.getContextRenderData(s),l=i.encoder;l.setGeometry(o.geometry,r.gpuProgram);const c=i.globalUniforms.bindGroup;l.setBindGroup(0,c,r.gpuProgram);const u=i.renderPipes.uniformBatch.getUniformBindGroup(r.resources.localUniforms,!0);l.setBindGroup(2,u,r.gpuProgram);const d=h.instructions;let p=null;for(let e=0;e<h.instructionSize;e++){const s=d[e];if(s.topology!==p&&(p=s.topology,l.setPipelineFromGeometryProgramAndState(o.geometry,r.gpuProgram,t.state,s.topology)),r.groups[1]=s.bindGroup,!s.gpuBindGroup){const t=s.textures;s.bindGroup=(0,a.w)(t.textures,t.count),s.gpuBindGroup=i.bindGroup.getBindGroup(s.bindGroup,r.gpuProgram,1)}l.setBindGroup(1,s.bindGroup,r.gpuProgram),l.renderPassEncoder.drawIndexed(s.size,1,s.start)}}destroy(){this.shader.destroy(!0),this.shader=null}}f.extension={type:[r.Ag.WebGPUPipesAdaptor],name:"graphics"}},7275:(t,e,s)=>{function r(t,e,s){const r=(t>>24&255)/255;e[s++]=(255&t)/255*r,e[s++]=(t>>8&255)/255*r,e[s++]=(t>>16&255)/255*r,e[s++]=r}s.d(e,{V:()=>r})},2969:(t,e,s)=>{var r=s(9084),i=s(9987),n=s(9678),a=s(8143),o=s(7275),h=s(2401);class l{constructor(t,e){this.state=n.U.for2d(),this._graphicsBatchesHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=t,this._adaptor=e,this._adaptor.init(),this.renderer.renderableGC.addManagedHash(this,"_graphicsBatchesHash")}validateRenderable(t){const e=t.context,s=!!this._graphicsBatchesHash[t.uid],r=this.renderer.graphicsContext.updateGpuContext(e);return!(!r.isBatchable&&s===r.isBatchable)}addRenderable(t,e){const s=this.renderer.graphicsContext.updateGpuContext(t.context);t.didViewUpdate&&this._rebuild(t),s.isBatchable?this._addToBatcher(t,e):(this.renderer.renderPipes.batch.break(e),e.add(t))}updateRenderable(t){const e=this._graphicsBatchesHash[t.uid];if(e)for(let t=0;t<e.length;t++){const s=e[t];s._batcher.updateElement(s)}}destroyRenderable(t){this._graphicsBatchesHash[t.uid]&&this._removeBatchForRenderable(t.uid),t.off("destroyed",this._destroyRenderableBound)}execute(t){if(!t.isRenderable)return;const e=this.renderer,s=t.context;if(!e.graphicsContext.getGpuContext(s).batches.length)return;const r=s.customShader||this._adaptor.shader;this.state.blendMode=t.groupBlendMode;const i=r.resources.localUniforms.uniforms;i.uTransformMatrix=t.groupTransform,i.uRound=e._roundPixels|t._roundPixels,(0,o.V)(t.groupColorAlpha,i.uColor,0),this._adaptor.execute(this,t)}_rebuild(t){const e=!!this._graphicsBatchesHash[t.uid],s=this.renderer.graphicsContext.updateGpuContext(t.context);e&&this._removeBatchForRenderable(t.uid),s.isBatchable&&this._initBatchesForRenderable(t),t.batched=s.isBatchable}_addToBatcher(t,e){const s=this.renderer.renderPipes.batch,r=this._getBatchesForRenderable(t);for(let t=0;t<r.length;t++){const i=r[t];s.addToBatch(i,e)}}_getBatchesForRenderable(t){return this._graphicsBatchesHash[t.uid]||this._initBatchesForRenderable(t)}_initBatchesForRenderable(t){const e=t.context,s=this.renderer.graphicsContext.getGpuContext(e),r=this.renderer._roundPixels|t._roundPixels,i=s.batches.map((e=>{const s=a.Z.get(h.G);return e.copyTo(s),s.renderable=t,s.roundPixels=r,s}));return void 0===this._graphicsBatchesHash[t.uid]&&t.on("destroyed",this._destroyRenderableBound),this._graphicsBatchesHash[t.uid]=i,i}_removeBatchForRenderable(t){this._graphicsBatchesHash[t].forEach((t=>{a.Z.return(t)})),this._graphicsBatchesHash[t]=null}destroy(){this.renderer=null,this._adaptor.destroy(),this._adaptor=null,this.state=null;for(const t in this._graphicsBatchesHash)this._removeBatchForRenderable(t);this._graphicsBatchesHash=null}}l.extension={type:[r.Ag.WebGLPipes,r.Ag.WebGPUPipes,r.Ag.CanvasPipes],name:"graphics"},r.XO.add(l),r.XO.add(i.GH)},2401:(t,e,s)=>{s.d(e,{G:()=>a});var r=s(1026),i=s(143);const n=new r.u;class a{constructor(){this.packAsQuad=!1,this.batcherName="default",this.topology="triangle-list",this.applyTransform=!0,this.roundPixels=0,this._batcher=null,this._batch=null}get uvs(){return this.geometryData.uvs}get positions(){return this.geometryData.vertices}get indices(){return this.geometryData.indices}get blendMode(){return this.applyTransform?this.renderable.groupBlendMode:"normal"}get color(){const t=this.baseColor,e=t>>16|65280&t|(255&t)<<16,s=this.renderable;return s?(0,i.u)(e,s.groupColor)+(this.alpha*s.groupAlpha*255<<24):e+(255*this.alpha<<24)}get transform(){return this.renderable?.groupTransform||n}copyTo(t){t.indexOffset=this.indexOffset,t.indexSize=this.indexSize,t.attributeOffset=this.attributeOffset,t.attributeSize=this.attributeSize,t.baseColor=this.baseColor,t.alpha=this.alpha,t.texture=this.texture,t.geometryData=this.geometryData,t.topology=this.topology}reset(){this.applyTransform=!0,this.renderable=null,this.topology="triangle-list"}}},9201:(t,e,s)=>{s.d(e,{A:()=>a});var r=s(2597),i=s(2320),n=s(4023);class a extends i.l{constructor(t){t instanceof n.T&&(t={context:t});const{context:e,roundPixels:s,...r}=t||{};super({label:"Graphics",...r}),this.renderPipeId="graphics",this._context=e||(this._ownedContext=new n.T),this._context.on("update",this.onViewUpdate,this),this.allowChildren=!1,this.roundPixels=s??!1}set context(t){t!==this._context&&(this._context.off("update",this.onViewUpdate,this),this._context=t,this._context.on("update",this.onViewUpdate,this),this.onViewUpdate())}get context(){return this._context}get bounds(){return this._context.bounds}updateBounds(){}containsPoint(t){return this._context.containsPoint(t)}destroy(t){this._ownedContext&&!t?this._ownedContext.destroy(t):!0!==t&&!0!==t?.context||this._context.destroy(t),this._ownedContext=null,this._context=null,super.destroy(t)}_callContextMethod(t,e){return this.context[t](...e),this}setFillStyle(...t){return this._callContextMethod("setFillStyle",t)}setStrokeStyle(...t){return this._callContextMethod("setStrokeStyle",t)}fill(...t){return this._callContextMethod("fill",t)}stroke(...t){return this._callContextMethod("stroke",t)}texture(...t){return this._callContextMethod("texture",t)}beginPath(){return this._callContextMethod("beginPath",[])}cut(){return this._callContextMethod("cut",[])}arc(...t){return this._callContextMethod("arc",t)}arcTo(...t){return this._callContextMethod("arcTo",t)}arcToSvg(...t){return this._callContextMethod("arcToSvg",t)}bezierCurveTo(...t){return this._callContextMethod("bezierCurveTo",t)}closePath(){return this._callContextMethod("closePath",[])}ellipse(...t){return this._callContextMethod("ellipse",t)}circle(...t){return this._callContextMethod("circle",t)}path(...t){return this._callContextMethod("path",t)}lineTo(...t){return this._callContextMethod("lineTo",t)}moveTo(...t){return this._callContextMethod("moveTo",t)}quadraticCurveTo(...t){return this._callContextMethod("quadraticCurveTo",t)}rect(...t){return this._callContextMethod("rect",t)}roundRect(...t){return this._callContextMethod("roundRect",t)}poly(...t){return this._callContextMethod("poly",t)}regularPoly(...t){return this._callContextMethod("regularPoly",t)}roundPoly(...t){return this._callContextMethod("roundPoly",t)}roundShape(...t){return this._callContextMethod("roundShape",t)}filletRect(...t){return this._callContextMethod("filletRect",t)}chamferRect(...t){return this._callContextMethod("chamferRect",t)}star(...t){return this._callContextMethod("star",t)}svg(...t){return this._callContextMethod("svg",t)}restore(...t){return this._callContextMethod("restore",t)}save(){return this._callContextMethod("save",[])}getTransform(){return this.context.getTransform()}resetTransform(){return this._callContextMethod("resetTransform",[])}rotateTransform(...t){return this._callContextMethod("rotate",t)}scaleTransform(...t){return this._callContextMethod("scale",t)}setTransform(...t){return this._callContextMethod("setTransform",t)}transform(...t){return this._callContextMethod("transform",t)}translateTransform(...t){return this._callContextMethod("translate",t)}clear(){return this._callContextMethod("clear",[])}get fillStyle(){return this._context.fillStyle}set fillStyle(t){this._context.fillStyle=t}get strokeStyle(){return this._context.strokeStyle}set strokeStyle(t){this._context.strokeStyle=t}clone(t=!1){if(t)return new a(this._context.clone());this._ownedContext=null;return new a(this._context)}lineStyle(t,e,s){(0,r.t6)(r.lj,"Graphics#lineStyle is no longer needed. Use Graphics#setStrokeStyle to set the stroke style.");const i={};return t&&(i.width=t),e&&(i.color=e),s&&(i.alpha=s),this.context.strokeStyle=i,this}beginFill(t,e){(0,r.t6)(r.lj,"Graphics#beginFill is no longer needed. Use Graphics#fill to fill the shape with the desired style.");const s={};return void 0!==t&&(s.color=t),void 0!==e&&(s.alpha=e),this.context.fillStyle=s,this}endFill(){(0,r.t6)(r.lj,"Graphics#endFill is no longer needed. Use Graphics#fill to fill the shape with the desired style."),this.context.fill();const t=this.context.strokeStyle;return t.width===n.T.defaultStrokeStyle.width&&t.color===n.T.defaultStrokeStyle.color&&t.alpha===n.T.defaultStrokeStyle.alpha||this.context.stroke(),this}drawCircle(...t){return(0,r.t6)(r.lj,"Graphics#drawCircle has been renamed to Graphics#circle"),this._callContextMethod("circle",t)}drawEllipse(...t){return(0,r.t6)(r.lj,"Graphics#drawEllipse has been renamed to Graphics#ellipse"),this._callContextMethod("ellipse",t)}drawPolygon(...t){return(0,r.t6)(r.lj,"Graphics#drawPolygon has been renamed to Graphics#poly"),this._callContextMethod("poly",t)}drawRect(...t){return(0,r.t6)(r.lj,"Graphics#drawRect has been renamed to Graphics#rect"),this._callContextMethod("rect",t)}drawRoundedRect(...t){return(0,r.t6)(r.lj,"Graphics#drawRoundedRect has been renamed to Graphics#roundRect"),this._callContextMethod("roundRect",t)}drawStar(...t){return(0,r.t6)(r.lj,"Graphics#drawStar has been renamed to Graphics#star"),this._callContextMethod("star",t)}}},4023:(t,e,s)=>{s.d(e,{T:()=>j});var r=s(413),i=s(1598),n=s(1026),a=s(5638),o=s(8554),h=s(4124),l=s(2597),c=s(3475),u=s(8273),d=s(3736);var p=s(8486),f=s(4952),y=s(4360),x=s(7474),g=s(8116),m=s(9987);const _=1.1920929e-7;function b(t,e,s,r,i,n,a,o,h,l){let c=(1-Math.min(.99,Math.max(0,l??m.GH.defaultOptions.bezierSmoothness)))/1;return c*=c,function(t,e,s,r,i,n,a,o,h,l){M(t,e,s,r,i,n,a,o,h,l,0),h.push(a,o)}(e,s,r,i,n,a,o,h,t,c),t}function M(t,e,s,r,i,n,a,o,h,l,c){if(c>8)return;Math.PI;const u=(t+s)/2,d=(e+r)/2,p=(s+i)/2,f=(r+n)/2,y=(i+a)/2,x=(n+o)/2,g=(u+p)/2,m=(d+f)/2,b=(p+y)/2,P=(f+x)/2,v=(g+b)/2,S=(m+P)/2;if(c>0){let c=a-t,u=o-e;const d=Math.abs((s-a)*u-(r-o)*c),p=Math.abs((i-a)*u-(n-o)*c);if(d>_&&p>_){if((d+p)*(d+p)<=l*(c*c+u*u))return void h.push(v,S)}else if(d>_){if(d*d<=l*(c*c+u*u))return void h.push(v,S)}else if(p>_){if(p*p<=l*(c*c+u*u))return void h.push(v,S)}else if(c=v-(t+a)/2,u=S-(e+o)/2,c*c+u*u<=l)return void h.push(v,S)}M(t,e,u,d,g,m,v,S,h,l,c+1),M(v,S,b,P,y,x,a,o,h,l,c+1)}function P(t,e,s,r,i,n,a,o){let h=(1-Math.min(.99,Math.max(0,o??m.GH.defaultOptions.bezierSmoothness)))/1;return h*=h,function(t,e,s,r,i,n,a,o){v(a,t,e,s,r,i,n,o,0),a.push(i,n)}(e,s,r,i,n,a,t,h),t}function v(t,e,s,r,i,n,a,o,h){if(h>8)return;Math.PI;const l=(e+r)/2,c=(s+i)/2,u=(r+n)/2,d=(i+a)/2,p=(l+u)/2,f=(c+d)/2;let y=n-e,x=a-s;const g=Math.abs((r-n)*x-(i-a)*y);if(g>1.1920929e-7){if(g*g<=o*(y*y+x*x))return void t.push(p,f)}else if(y=p-(e+n)/2,x=f-(s+a)/2,y*y+x*x<=o)return void t.push(p,f);v(t,e,s,l,c,p,f,o,h+1),v(t,p,f,u,d,n,a,o,h+1)}function S(t,e,s,r,i,n,a,o){let h=Math.abs(i-n);(!a&&i>n||a&&n>i)&&(h=2*Math.PI-h),o||(o=Math.max(6,Math.floor(6*Math.pow(r,1/3)*(h/Math.PI))));let l=h/(o=Math.max(o,3)),c=i;l*=a?-1:1;for(let i=0;i<o+1;i++){const i=e+Math.cos(c)*r,n=s+Math.sin(c)*r;t.push(i,n),c+=l}}const C=2*Math.PI,T={centerX:0,centerY:0,ang1:0,ang2:0},k=({x:t,y:e},s,r,i,n,a,o,h)=>{const l=i*(t*=s)-n*(e*=r),c=n*t+i*e;return h.x=l+a,h.y=c+o,h};function w(t,e){const s=-1.5707963267948966===e?-.551915024494:4/3*Math.tan(e/4),r=1.5707963267948966===e?.551915024494:s,i=Math.cos(t),n=Math.sin(t),a=Math.cos(t+e),o=Math.sin(t+e);return[{x:i-n*r,y:n+i*r},{x:a+o*r,y:o-a*r},{x:a,y:o}]}const G=(t,e,s,r)=>{let i=t*s+e*r;return i>1&&(i=1),i<-1&&(i=-1),(t*r-e*s<0?-1:1)*Math.acos(i)};function R(t,e,s,r,i,n,a,o=0,h=0,l=0){if(0===n||0===a)return;const c=Math.sin(o*C/360),u=Math.cos(o*C/360),d=u*(e-r)/2+c*(s-i)/2,p=-c*(e-r)/2+u*(s-i)/2;if(0===d&&0===p)return;n=Math.abs(n),a=Math.abs(a);const f=Math.pow(d,2)/Math.pow(n,2)+Math.pow(p,2)/Math.pow(a,2);f>1&&(n*=Math.sqrt(f),a*=Math.sqrt(f)),((t,e,s,r,i,n,a,o,h,l,c,u,d)=>{const p=Math.pow(i,2),f=Math.pow(n,2),y=Math.pow(c,2),x=Math.pow(u,2);let g=p*f-p*x-f*y;g<0&&(g=0),g/=p*x+f*y,g=Math.sqrt(g)*(a===o?-1:1);const m=g*i/n*u,_=g*-n/i*c,b=l*m-h*_+(t+s)/2,M=h*m+l*_+(e+r)/2,P=(c-m)/i,v=(u-_)/n,S=(-c-m)/i,T=(-u-_)/n,k=G(1,0,P,v);let w=G(P,v,S,T);0===o&&w>0&&(w-=C),1===o&&w<0&&(w+=C),d.centerX=b,d.centerY=M,d.ang1=k,d.ang2=w})(e,s,r,i,n,a,h,l,c,u,d,p,T);let{ang1:y,ang2:x}=T;const{centerX:g,centerY:m}=T;let _=Math.abs(x)/(C/4);Math.abs(1-_)<1e-7&&(_=1);const M=Math.max(Math.ceil(_),1);x/=M;let P=t[t.length-2],v=t[t.length-1];const S={x:0,y:0};for(let e=0;e<M;e++){const e=w(y,x),{x:s,y:r}=k(e[0],n,a,u,c,g,m,S),{x:i,y:o}=k(e[1],n,a,u,c,g,m,S),{x:h,y:l}=k(e[2],n,a,u,c,g,m,S);b(t,P,v,s,r,i,o,h,l),P=h,v=l,y+=x}}const B=new x.M;class H{constructor(t){this.shapePrimitives=[],this._currentPoly=null,this._bounds=new c.c,this._graphicsPath2D=t}moveTo(t,e){return this.startPoly(t,e),this}lineTo(t,e){this._ensurePoly();const s=this._currentPoly.points,r=s[s.length-2],i=s[s.length-1];return r===t&&i===e||s.push(t,e),this}arc(t,e,s,r,i,n){this._ensurePoly(!1);return S(this._currentPoly.points,t,e,s,r,i,n),this}arcTo(t,e,s,r,i){this._ensurePoly();return function(t,e,s,r,i,n){const a=t[t.length-2],o=t[t.length-1]-s,h=a-e,l=i-s,c=r-e,u=Math.abs(o*c-h*l);if(u<1e-8||0===n)return void(t[t.length-2]===e&&t[t.length-1]===s||t.push(e,s));const d=o*o+h*h,p=l*l+c*c,f=o*l+h*c,y=n*Math.sqrt(d)/u,x=n*Math.sqrt(p)/u,g=y*f/d,m=x*f/p,_=y*c+x*h,b=y*l+x*o,M=h*(x+g),P=o*(x+g),v=c*(y+m),C=l*(y+m);S(t,_+e,b+s,n,Math.atan2(P-b,M-_),Math.atan2(C-b,v-_),h*l>c*o)}(this._currentPoly.points,t,e,s,r,i),this}arcToSvg(t,e,s,r,i,n,a){return R(this._currentPoly.points,this._currentPoly.lastX,this._currentPoly.lastY,n,a,t,e,s,r,i),this}bezierCurveTo(t,e,s,r,i,n,a){this._ensurePoly();const o=this._currentPoly;return b(this._currentPoly.points,o.lastX,o.lastY,t,e,s,r,i,n,a),this}quadraticCurveTo(t,e,s,r,i){this._ensurePoly();const n=this._currentPoly;return P(this._currentPoly.points,n.lastX,n.lastY,t,e,s,r,i),this}closePath(){return this.endPoly(!0),this}addPath(t,e){this.endPoly(),e&&!e.isIdentity()&&(t=t.clone(!0)).transform(e);for(let e=0;e<t.instructions.length;e++){const s=t.instructions[e];this[s.action](...s.data)}return this}finish(t=!1){this.endPoly(t)}rect(t,e,s,r,i){return this.drawShape(new x.M(t,e,s,r),i),this}circle(t,e,s,r){return this.drawShape(new p.j(t,e,s),r),this}poly(t,e,s){const r=new y.t(t);return r.closePath=e,this.drawShape(r,s),this}regularPoly(t,e,s,r,i=0,n){r=Math.max(0|r,3);const a=-1*Math.PI/2+i,o=2*Math.PI/r,h=[];for(let i=0;i<r;i++){const r=i*o+a;h.push(t+s*Math.cos(r),e+s*Math.sin(r))}return this.poly(h,!0,n),this}roundPoly(t,e,s,r,i,n=0,a){if(r=Math.max(0|r,3),i<=0)return this.regularPoly(t,e,s,r,n);const o=s*Math.sin(Math.PI/r)-.001;i=Math.min(i,o);const h=-1*Math.PI/2+n,l=2*Math.PI/r,c=(r-2)*Math.PI/r/2;for(let n=0;n<r;n++){const r=n*l+h,o=t+s*Math.cos(r),u=e+s*Math.sin(r),d=r+Math.PI+c,p=r-Math.PI-c,f=o+i*Math.cos(d),y=u+i*Math.sin(d),x=o+i*Math.cos(p),g=u+i*Math.sin(p);0===n?this.moveTo(f,y):this.lineTo(f,y),this.quadraticCurveTo(o,u,x,g,a)}return this.closePath()}roundShape(t,e,s=!1,r){return t.length<3?this:(s?function(t,e,s,r){const i=(t,e)=>Math.sqrt((t.x-e.x)**2+(t.y-e.y)**2),n=(t,e,s)=>({x:t.x+(e.x-t.x)*s,y:t.y+(e.y-t.y)*s}),a=e.length;for(let o=0;o<a;o++){const h=e[(o+1)%a],l=h.radius??s;if(l<=0){0===o?t.moveTo(h.x,h.y):t.lineTo(h.x,h.y);continue}const c=e[o],u=e[(o+2)%a],d=i(c,h);let p;p=d<1e-4?h:n(h,c,Math.min(d/2,l)/d);const f=i(u,h);let y;y=f<1e-4?h:n(h,u,Math.min(f/2,l)/f),0===o?t.moveTo(p.x,p.y):t.lineTo(p.x,p.y),t.quadraticCurveTo(h.x,h.y,y.x,y.y,r)}}(this,t,e,r):function(t,e,s){const r=(t,e)=>{const s=e.x-t.x,r=e.y-t.y,i=Math.sqrt(s*s+r*r);return{len:i,nx:s/i,ny:r/i}},i=(e,s)=>{0===e?t.moveTo(s.x,s.y):t.lineTo(s.x,s.y)};let n=e[e.length-1];for(let a=0;a<e.length;a++){const o=e[a%e.length],h=o.radius??s;if(h<=0){i(a,o),n=o;continue}const l=e[(a+1)%e.length],c=r(o,n),u=r(o,l);if(c.len<1e-4||u.len<1e-4){i(a,o),n=o;continue}let d=Math.asin(c.nx*u.ny-c.ny*u.nx),p=1,f=!1;c.nx*u.nx-c.ny*-u.ny<0?d<0?d=Math.PI+d:(d=Math.PI-d,p=-1,f=!0):d>0&&(p=-1,f=!0);const y=d/2;let x,g=Math.abs(Math.cos(y)*h/Math.sin(y));g>Math.min(c.len/2,u.len/2)?(g=Math.min(c.len/2,u.len/2),x=Math.abs(g*Math.sin(y)/Math.cos(y))):x=h;const m=o.x+u.nx*g+-u.ny*x*p,_=o.y+u.ny*g+u.nx*x*p,b=Math.atan2(c.ny,c.nx)+Math.PI/2*p,M=Math.atan2(u.ny,u.nx)-Math.PI/2*p;0===a&&t.moveTo(m+Math.cos(b)*x,_+Math.sin(b)*x),t.arc(m,_,x,b,M,f),n=o}}(this,t,e),this.closePath())}filletRect(t,e,s,r,i){if(0===i)return this.rect(t,e,s,r);const n=Math.min(s,r)/2,a=Math.min(n,Math.max(-n,i)),o=t+s,h=e+r,l=a<0?-a:0,c=Math.abs(a);return this.moveTo(t,e+c).arcTo(t+l,e+l,t+c,e,c).lineTo(o-c,e).arcTo(o-l,e+l,o,e+c,c).lineTo(o,h-c).arcTo(o-l,h-l,t+s-c,h,c).lineTo(t+c,h).arcTo(t+l,h-l,t,h-c,c).closePath()}chamferRect(t,e,s,r,i,n){if(i<=0)return this.rect(t,e,s,r);const a=Math.min(i,Math.min(s,r)/2),o=t+s,h=e+r,l=[t+a,e,o-a,e,o,e+a,o,h-a,o-a,h,t+a,h,t,h-a,t,e+a];for(let t=l.length-1;t>=2;t-=2)l[t]===l[t-2]&&l[t-1]===l[t-3]&&l.splice(t-1,2);return this.poly(l,!0,n)}ellipse(t,e,s,r,i){return this.drawShape(new f.P(t,e,s,r),i),this}roundRect(t,e,s,r,i,n){return this.drawShape(new g.T(t,e,s,r,i),n),this}drawShape(t,e){return this.endPoly(),this.shapePrimitives.push({shape:t,transform:e}),this}startPoly(t,e){let s=this._currentPoly;return s&&this.endPoly(),s=new y.t,s.points.push(t,e),this._currentPoly=s,this}endPoly(t=!1){const e=this._currentPoly;return e&&e.points.length>2&&(e.closePath=t,this.shapePrimitives.push({shape:e})),this._currentPoly=null,this}_ensurePoly(t=!0){if(!this._currentPoly&&(this._currentPoly=new y.t,t)){const t=this.shapePrimitives[this.shapePrimitives.length-1];if(t){let e=t.shape.x,s=t.shape.y;if(t.transform&&!t.transform.isIdentity()){const r=t.transform,i=e;e=r.a*e+r.c*s+r.tx,s=r.b*i+r.d*s+r.ty}this._currentPoly.points.push(e,s)}else this._currentPoly.points.push(0,0)}}buildPath(){const t=this._graphicsPath2D;this.shapePrimitives.length=0,this._currentPoly=null;for(let e=0;e<t.instructions.length;e++){const s=t.instructions[e];this[s.action](...s.data)}this.finish()}get bounds(){const t=this._bounds;t.clear();const e=this.shapePrimitives;for(let s=0;s<e.length;s++){const r=e[s],i=r.shape.getBounds(B);r.transform?t.addRect(i,r.transform):t.addRect(i)}return t}}class A{constructor(t){this.instructions=[],this.uid=(0,h.L)("graphicsPath"),this._dirty=!0,"string"==typeof t?function(t,e){const s=d(t),r=[];let i=null,n=0,a=0;for(let t=0;t<s.length;t++){const o=s[t],h=o[0],l=o;switch(h){case"M":n=l[1],a=l[2],e.moveTo(n,a);break;case"m":n+=l[1],a+=l[2],e.moveTo(n,a);break;case"H":n=l[1],e.lineTo(n,a);break;case"h":n+=l[1],e.lineTo(n,a);break;case"V":a=l[1],e.lineTo(n,a);break;case"v":a+=l[1],e.lineTo(n,a);break;case"L":n=l[1],a=l[2],e.lineTo(n,a);break;case"l":n+=l[1],a+=l[2],e.lineTo(n,a);break;case"C":n=l[5],a=l[6],e.bezierCurveTo(l[1],l[2],l[3],l[4],n,a);break;case"c":e.bezierCurveTo(n+l[1],a+l[2],n+l[3],a+l[4],n+l[5],a+l[6]),n+=l[5],a+=l[6];break;case"S":n=l[3],a=l[4],e.bezierCurveToShort(l[1],l[2],n,a);break;case"s":e.bezierCurveToShort(n+l[1],a+l[2],n+l[3],a+l[4]),n+=l[3],a+=l[4];break;case"Q":n=l[3],a=l[4],e.quadraticCurveTo(l[1],l[2],n,a);break;case"q":e.quadraticCurveTo(n+l[1],a+l[2],n+l[3],a+l[4]),n+=l[3],a+=l[4];break;case"T":n=l[1],a=l[2],e.quadraticCurveToShort(n,a);break;case"t":n+=l[1],a+=l[2],e.quadraticCurveToShort(n,a);break;case"A":n=l[6],a=l[7],e.arcToSvg(l[1],l[2],l[3],l[4],l[5],n,a);break;case"a":n+=l[6],a+=l[7],e.arcToSvg(l[1],l[2],l[3],l[4],l[5],n,a);break;case"Z":case"z":e.closePath(),r.length>0&&(i=r.pop(),i?(n=i.startX,a=i.startY):(n=0,a=0)),i=null;break;default:(0,u.R)(`Unknown SVG path command: ${h}`)}"Z"!==h&&"z"!==h&&null===i&&(i={startX:n,startY:a},r.push(i))}}(t,this):this.instructions=t?.slice()??[]}get shapePath(){return this._shapePath||(this._shapePath=new H(this)),this._dirty&&(this._dirty=!1,this._shapePath.buildPath()),this._shapePath}addPath(t,e){return t=t.clone(),this.instructions.push({action:"addPath",data:[t,e]}),this._dirty=!0,this}arc(...t){return this.instructions.push({action:"arc",data:t}),this._dirty=!0,this}arcTo(...t){return this.instructions.push({action:"arcTo",data:t}),this._dirty=!0,this}arcToSvg(...t){return this.instructions.push({action:"arcToSvg",data:t}),this._dirty=!0,this}bezierCurveTo(...t){return this.instructions.push({action:"bezierCurveTo",data:t}),this._dirty=!0,this}bezierCurveToShort(t,e,s,r,i){const n=this.instructions[this.instructions.length-1],o=this.getLastPoint(a.b.shared);let h=0,l=0;if(n&&"bezierCurveTo"===n.action){h=n.data[2],l=n.data[3];const t=o.x,e=o.y;h=t+(t-h),l=e+(e-l)}else h=o.x,l=o.y;return this.instructions.push({action:"bezierCurveTo",data:[h,l,t,e,s,r,i]}),this._dirty=!0,this}closePath(){return this.instructions.push({action:"closePath",data:[]}),this._dirty=!0,this}ellipse(...t){return this.instructions.push({action:"ellipse",data:t}),this._dirty=!0,this}lineTo(...t){return this.instructions.push({action:"lineTo",data:t}),this._dirty=!0,this}moveTo(...t){return this.instructions.push({action:"moveTo",data:t}),this}quadraticCurveTo(...t){return this.instructions.push({action:"quadraticCurveTo",data:t}),this._dirty=!0,this}quadraticCurveToShort(t,e,s){const r=this.instructions[this.instructions.length-1],i=this.getLastPoint(a.b.shared);let n=0,o=0;if(r&&"quadraticCurveTo"===r.action){n=r.data[0],o=r.data[1];const t=i.x,e=i.y;n=t+(t-n),o=e+(e-o)}else n=i.x,o=i.y;return this.instructions.push({action:"quadraticCurveTo",data:[n,o,t,e,s]}),this._dirty=!0,this}rect(t,e,s,r,i){return this.instructions.push({action:"rect",data:[t,e,s,r,i]}),this._dirty=!0,this}circle(t,e,s,r){return this.instructions.push({action:"circle",data:[t,e,s,r]}),this._dirty=!0,this}roundRect(...t){return this.instructions.push({action:"roundRect",data:t}),this._dirty=!0,this}poly(...t){return this.instructions.push({action:"poly",data:t}),this._dirty=!0,this}regularPoly(...t){return this.instructions.push({action:"regularPoly",data:t}),this._dirty=!0,this}roundPoly(...t){return this.instructions.push({action:"roundPoly",data:t}),this._dirty=!0,this}roundShape(...t){return this.instructions.push({action:"roundShape",data:t}),this._dirty=!0,this}filletRect(...t){return this.instructions.push({action:"filletRect",data:t}),this._dirty=!0,this}chamferRect(...t){return this.instructions.push({action:"chamferRect",data:t}),this._dirty=!0,this}star(t,e,s,r,i,n,a){i||(i=r/2);const o=-1*Math.PI/2+n,h=2*s,l=2*Math.PI/h,c=[];for(let s=0;s<h;s++){const n=s%2?i:r,a=s*l+o;c.push(t+n*Math.cos(a),e+n*Math.sin(a))}return this.poly(c,!0,a),this}clone(t=!1){const e=new A;if(t)for(let t=0;t<this.instructions.length;t++){const s=this.instructions[t];e.instructions.push({action:s.action,data:s.data.slice()})}else e.instructions=this.instructions.slice();return e}clear(){return this.instructions.length=0,this._dirty=!0,this}transform(t){if(t.isIdentity())return this;const e=t.a,s=t.b,r=t.c,i=t.d,n=t.tx,a=t.ty;let o=0,h=0,l=0,c=0,d=0,p=0,f=0,y=0;for(let x=0;x<this.instructions.length;x++){const g=this.instructions[x],m=g.data;switch(g.action){case"moveTo":case"lineTo":o=m[0],h=m[1],m[0]=e*o+r*h+n,m[1]=s*o+i*h+a;break;case"bezierCurveTo":l=m[0],c=m[1],d=m[2],p=m[3],o=m[4],h=m[5],m[0]=e*l+r*c+n,m[1]=s*l+i*c+a,m[2]=e*d+r*p+n,m[3]=s*d+i*p+a,m[4]=e*o+r*h+n,m[5]=s*o+i*h+a;break;case"quadraticCurveTo":l=m[0],c=m[1],o=m[2],h=m[3],m[0]=e*l+r*c+n,m[1]=s*l+i*c+a,m[2]=e*o+r*h+n,m[3]=s*o+i*h+a;break;case"arcToSvg":o=m[5],h=m[6],f=m[0],y=m[1],m[0]=e*f+r*y,m[1]=s*f+i*y,m[5]=e*o+r*h+n,m[6]=s*o+i*h+a;break;case"circle":m[4]=z(m[3],t);break;case"rect":m[4]=z(m[4],t);break;case"ellipse":m[8]=z(m[8],t);break;case"roundRect":m[5]=z(m[5],t);break;case"addPath":m[0].transform(t);break;case"poly":m[2]=z(m[2],t);break;default:(0,u.R)("unknown transform action",g.action)}}return this._dirty=!0,this}get bounds(){return this.shapePath.bounds}getLastPoint(t){let e=this.instructions.length-1,s=this.instructions[e];if(!s)return t.x=0,t.y=0,t;for(;"closePath"===s.action;){if(e--,e<0)return t.x=0,t.y=0,t;s=this.instructions[e]}switch(s.action){case"moveTo":case"lineTo":t.x=s.data[0],t.y=s.data[1];break;case"quadraticCurveTo":t.x=s.data[2],t.y=s.data[3];break;case"bezierCurveTo":t.x=s.data[4],t.y=s.data[5];break;case"arc":case"arcToSvg":t.x=s.data[5],t.y=s.data[6];break;case"addPath":s.data[0].getLastPoint(t)}return t}}function z(t,e){return t?t.prepend(e):e.clone()}function U(t,e){if("string"==typeof t){const e=document.createElement("div");e.innerHTML=t.trim(),t=e.querySelector("svg")}return D(t,{context:e,path:new A},null,null),e}function D(t,e,s,r){const n=t.children,{fillStyle:a,strokeStyle:o}=function(t){const e=t.getAttribute("style"),s={},r={};let n=!1,a=!1;if(e){const t=e.split(";");for(let e=0;e<t.length;e++){const o=t[e],[h,l]=o.split(":");switch(h){case"stroke":"none"!==l&&(s.color=i.Q.shared.setValue(l).toNumber(),a=!0);break;case"stroke-width":s.width=Number(l);break;case"fill":"none"!==l&&(n=!0,r.color=i.Q.shared.setValue(l).toNumber());break;case"fill-opacity":r.alpha=Number(l);break;case"stroke-opacity":s.alpha=Number(l);break;case"opacity":r.alpha=Number(l),s.alpha=Number(l)}}}else{const e=t.getAttribute("stroke");e&&"none"!==e&&(a=!0,s.color=i.Q.shared.setValue(e).toNumber(),s.width=I(t,"stroke-width",1));const o=t.getAttribute("fill");o&&"none"!==o&&(n=!0,r.color=i.Q.shared.setValue(o).toNumber())}return{strokeStyle:a?s:null,fillStyle:n?r:null}}(t);let h,l,c,u,d,p,f,y,x,g,m,_,b,M,P,v,S;switch(a&&s?s={...s,...a}:a&&(s=a),o&&r?r={...r,...o}:o&&(r=o),e.context.fillStyle=s,e.context.strokeStyle=r,t.nodeName.toLowerCase()){case"path":M=t.getAttribute("d"),P=new A(M),e.context.path(P),s&&e.context.fill(),r&&e.context.stroke();break;case"circle":f=I(t,"cx",0),y=I(t,"cy",0),x=I(t,"r",0),e.context.ellipse(f,y,x,x),s&&e.context.fill(),r&&e.context.stroke();break;case"rect":h=I(t,"x",0),l=I(t,"y",0),v=I(t,"width",0),S=I(t,"height",0),g=I(t,"rx",0),m=I(t,"ry",0),g||m?e.context.roundRect(h,l,v,S,g||m):e.context.rect(h,l,v,S),s&&e.context.fill(),r&&e.context.stroke();break;case"ellipse":f=I(t,"cx",0),y=I(t,"cy",0),g=I(t,"rx",0),m=I(t,"ry",0),e.context.beginPath(),e.context.ellipse(f,y,g,m),s&&e.context.fill(),r&&e.context.stroke();break;case"line":c=I(t,"x1",0),u=I(t,"y1",0),d=I(t,"x2",0),p=I(t,"y2",0),e.context.beginPath(),e.context.moveTo(c,u),e.context.lineTo(d,p),r&&e.context.stroke();break;case"polygon":b=t.getAttribute("points"),_=b.match(/\d+/g).map((t=>parseInt(t,10))),e.context.poly(_,!0),s&&e.context.fill(),r&&e.context.stroke();break;case"polyline":b=t.getAttribute("points"),_=b.match(/\d+/g).map((t=>parseInt(t,10))),e.context.poly(_,!1),r&&e.context.stroke();break;case"g":case"svg":break;default:console.info(`[SVG parser] <${t.nodeName}> elements unsupported`)}for(let t=0;t<n.length;t++)D(n[t],e,s,r)}function I(t,e,s){const r=t.getAttribute(e);return r?Number(r):s}var q=s(8785);const L=new a.b,F=new n.u,X=class t extends r.A{constructor(){super(...arguments),this.uid=(0,h.L)("graphicsContext"),this.dirty=!0,this.batchMode="auto",this.instructions=[],this._activePath=new A,this._transform=new n.u,this._fillStyle={...t.defaultFillStyle},this._strokeStyle={...t.defaultStrokeStyle},this._stateStack=[],this._tick=0,this._bounds=new c.c,this._boundsDirty=!0}clone(){const e=new t;return e.batchMode=this.batchMode,e.instructions=this.instructions.slice(),e._activePath=this._activePath.clone(),e._transform=this._transform.clone(),e._fillStyle={...this._fillStyle},e._strokeStyle={...this._strokeStyle},e._stateStack=this._stateStack.slice(),e._bounds=this._bounds.clone(),e._boundsDirty=!0,e}get fillStyle(){return this._fillStyle}set fillStyle(e){this._fillStyle=(0,q.w)(e,t.defaultFillStyle)}get strokeStyle(){return this._strokeStyle}set strokeStyle(e){this._strokeStyle=(0,q.T)(e,t.defaultStrokeStyle)}setFillStyle(e){return this._fillStyle=(0,q.w)(e,t.defaultFillStyle),this}setStrokeStyle(e){return this._strokeStyle=(0,q.w)(e,t.defaultStrokeStyle),this}texture(t,e,s,r,n,a){return this.instructions.push({action:"texture",data:{image:t,dx:s||0,dy:r||0,dw:n||t.frame.width,dh:a||t.frame.height,transform:this._transform.clone(),alpha:this._fillStyle.alpha,style:e?i.Q.shared.setValue(e).toNumber():16777215}}),this.onUpdate(),this}beginPath(){return this._activePath=new A,this}fill(e,s){let r;const i=this.instructions[this.instructions.length-1];return r=0===this._tick&&i&&"stroke"===i.action?i.data.path:this._activePath.clone(),r?(null!=e&&(void 0!==s&&"number"==typeof e&&((0,l.t6)(l.lj,"GraphicsContext.fill(color, alpha) is deprecated, use GraphicsContext.fill({ color, alpha }) instead"),e={color:e,alpha:s}),this._fillStyle=(0,q.w)(e,t.defaultFillStyle)),this.instructions.push({action:"fill",data:{style:this.fillStyle,path:r}}),this.onUpdate(),this._initNextPathLocation(),this._tick=0,this):this}_initNextPathLocation(){const{x:t,y:e}=this._activePath.getLastPoint(a.b.shared);this._activePath.clear(),this._activePath.moveTo(t,e)}stroke(e){let s;const r=this.instructions[this.instructions.length-1];return s=0===this._tick&&r&&"fill"===r.action?r.data.path:this._activePath.clone(),s?(null!=e&&(this._strokeStyle=(0,q.T)(e,t.defaultStrokeStyle)),this.instructions.push({action:"stroke",data:{style:this.strokeStyle,path:s}}),this.onUpdate(),this._initNextPathLocation(),this._tick=0,this):this}cut(){for(let t=0;t<2;t++){const e=this.instructions[this.instructions.length-1-t],s=this._activePath.clone();if(e&&("stroke"===e.action||"fill"===e.action)){if(!e.data.hole){e.data.hole=s;break}e.data.hole.addPath(s)}}return this._initNextPathLocation(),this}arc(t,e,s,r,i,n){this._tick++;const a=this._transform;return this._activePath.arc(a.a*t+a.c*e+a.tx,a.b*t+a.d*e+a.ty,s,r,i,n),this}arcTo(t,e,s,r,i){this._tick++;const n=this._transform;return this._activePath.arcTo(n.a*t+n.c*e+n.tx,n.b*t+n.d*e+n.ty,n.a*s+n.c*r+n.tx,n.b*s+n.d*r+n.ty,i),this}arcToSvg(t,e,s,r,i,n,a){this._tick++;const o=this._transform;return this._activePath.arcToSvg(t,e,s,r,i,o.a*n+o.c*a+o.tx,o.b*n+o.d*a+o.ty),this}bezierCurveTo(t,e,s,r,i,n,a){this._tick++;const o=this._transform;return this._activePath.bezierCurveTo(o.a*t+o.c*e+o.tx,o.b*t+o.d*e+o.ty,o.a*s+o.c*r+o.tx,o.b*s+o.d*r+o.ty,o.a*i+o.c*n+o.tx,o.b*i+o.d*n+o.ty,a),this}closePath(){return this._tick++,this._activePath?.closePath(),this}ellipse(t,e,s,r){return this._tick++,this._activePath.ellipse(t,e,s,r,this._transform.clone()),this}circle(t,e,s){return this._tick++,this._activePath.circle(t,e,s,this._transform.clone()),this}path(t){return this._tick++,this._activePath.addPath(t,this._transform.clone()),this}lineTo(t,e){this._tick++;const s=this._transform;return this._activePath.lineTo(s.a*t+s.c*e+s.tx,s.b*t+s.d*e+s.ty),this}moveTo(t,e){this._tick++;const s=this._transform,r=this._activePath.instructions,i=s.a*t+s.c*e+s.tx,n=s.b*t+s.d*e+s.ty;return 1===r.length&&"moveTo"===r[0].action?(r[0].data[0]=i,r[0].data[1]=n,this):(this._activePath.moveTo(i,n),this)}quadraticCurveTo(t,e,s,r,i){this._tick++;const n=this._transform;return this._activePath.quadraticCurveTo(n.a*t+n.c*e+n.tx,n.b*t+n.d*e+n.ty,n.a*s+n.c*r+n.tx,n.b*s+n.d*r+n.ty,i),this}rect(t,e,s,r){return this._tick++,this._activePath.rect(t,e,s,r,this._transform.clone()),this}roundRect(t,e,s,r,i){return this._tick++,this._activePath.roundRect(t,e,s,r,i,this._transform.clone()),this}poly(t,e){return this._tick++,this._activePath.poly(t,e,this._transform.clone()),this}regularPoly(t,e,s,r,i=0,n){return this._tick++,this._activePath.regularPoly(t,e,s,r,i,n),this}roundPoly(t,e,s,r,i,n){return this._tick++,this._activePath.roundPoly(t,e,s,r,i,n),this}roundShape(t,e,s,r){return this._tick++,this._activePath.roundShape(t,e,s,r),this}filletRect(t,e,s,r,i){return this._tick++,this._activePath.filletRect(t,e,s,r,i),this}chamferRect(t,e,s,r,i,n){return this._tick++,this._activePath.chamferRect(t,e,s,r,i,n),this}star(t,e,s,r,i=0,n=0){return this._tick++,this._activePath.star(t,e,s,r,i,n,this._transform.clone()),this}svg(t){return this._tick++,U(t,this),this}restore(){const t=this._stateStack.pop();return t&&(this._transform=t.transform,this._fillStyle=t.fillStyle,this._strokeStyle=t.strokeStyle),this}save(){return this._stateStack.push({transform:this._transform.clone(),fillStyle:{...this._fillStyle},strokeStyle:{...this._strokeStyle}}),this}getTransform(){return this._transform}resetTransform(){return this._transform.identity(),this}rotate(t){return this._transform.rotate(t),this}scale(t,e=t){return this._transform.scale(t,e),this}setTransform(t,e,s,r,i,a){return t instanceof n.u?(this._transform.set(t.a,t.b,t.c,t.d,t.tx,t.ty),this):(this._transform.set(t,e,s,r,i,a),this)}transform(t,e,s,r,i,a){return t instanceof n.u?(this._transform.append(t),this):(F.set(t,e,s,r,i,a),this._transform.append(F),this)}translate(t,e=t){return this._transform.translate(t,e),this}clear(){return this._activePath.clear(),this.instructions.length=0,this.resetTransform(),this.onUpdate(),this}onUpdate(){this.dirty||(this.emit("update",this,16),this.dirty=!0,this._boundsDirty=!0)}get bounds(){if(!this._boundsDirty)return this._bounds;const t=this._bounds;t.clear();for(let e=0;e<this.instructions.length;e++){const s=this.instructions[e],r=s.action;if("fill"===r){const e=s.data;t.addBounds(e.path.bounds)}else if("texture"===r){const e=s.data;t.addFrame(e.dx,e.dy,e.dx+e.dw,e.dy+e.dh,e.transform)}if("stroke"===r){const e=s.data,r=e.style.alignment,i=e.style.width*(1-r),n=e.path.bounds;t.addFrame(n.minX-i,n.minY-i,n.maxX+i,n.maxY+i)}}return t}containsPoint(t){if(!this.bounds.containsPoint(t.x,t.y))return!1;const e=this.instructions;let s=!1;for(let r=0;r<e.length;r++){const i=e[r],n=i.data,a=n.path;if(!i.action||!a)continue;const o=n.style,h=a.shapePath.shapePrimitives;for(let e=0;e<h.length;e++){const r=h[e].shape;if(!o||!r)continue;const a=h[e].transform,l=a?a.applyInverse(t,L):t;s="fill"===i.action?r.contains(l.x,l.y):r.strokeContains(l.x,l.y,o.width);const c=n.hole;if(c){const t=c.shapePath?.shapePrimitives;if(t)for(let e=0;e<t.length;e++)t[e].shape.contains(l.x,l.y)&&(s=!1)}if(s)return!0}}return s}destroy(t=!1){this._stateStack.length=0,this._transform=null,this.emit("destroy",this),this.removeAllListeners();if("boolean"==typeof t?t:t?.texture){const e="boolean"==typeof t?t:t?.textureSource;this._fillStyle.texture&&this._fillStyle.texture.destroy(e),this._strokeStyle.texture&&this._strokeStyle.texture.destroy(e)}this._fillStyle=null,this._strokeStyle=null,this.instructions=null,this._activePath=null,this._bounds=null,this._stateStack=null,this.customShader=null,this._transform=null}};X.defaultFillStyle={color:16777215,alpha:1,texture:o.g.WHITE,matrix:null,fill:null},X.defaultStrokeStyle={width:1,color:16777215,alpha:1,alignment:.5,miterLimit:10,cap:"butt",join:"miter",texture:o.g.WHITE,matrix:null,fill:null,pixelLine:!1};let j=X},9987:(t,e,s)=>{s.d(e,{GH:()=>z});var r=s(9084),i=s(1980),n=s(5834),a=s(3009),o=s(2597),h=s(8143),l=s(7474),c=s(9282),u=s(2883),d=s(8554),p=s(2401);const f={extension:{type:r.Ag.ShapeBuilder,name:"circle"},build(t,e){let s,r,i,n,a,o;if("circle"===t.type){const e=t;s=e.x,r=e.y,a=o=e.radius,i=n=0}else if("ellipse"===t.type){const e=t;s=e.x,r=e.y,a=e.halfWidth,o=e.halfHeight,i=n=0}else{const e=t,h=e.width/2,l=e.height/2;s=e.x+h,r=e.y+l,a=o=Math.max(0,Math.min(e.radius,Math.min(h,l))),i=h-a,n=l-o}if(!(a>=0&&o>=0&&i>=0&&n>=0))return e;const h=Math.ceil(2.3*Math.sqrt(a+o)),l=8*h+(i?4:0)+(n?4:0);if(0===l)return e;if(0===h)return e[0]=e[6]=s+i,e[1]=e[3]=r+n,e[2]=e[4]=s-i,e[5]=e[7]=r-n,e;let c=0,u=4*h+(i?2:0)+2,d=u,p=l,f=i+a,y=n,x=s+f,g=s-f,m=r+y;if(e[c++]=x,e[c++]=m,e[--u]=m,e[--u]=g,n){const t=r-y;e[d++]=g,e[d++]=t,e[--p]=t,e[--p]=x}for(let t=1;t<h;t++){const l=Math.PI/2*(t/h),f=i+Math.cos(l)*a,y=n+Math.sin(l)*o,x=s+f,g=s-f,m=r+y,_=r-y;e[c++]=x,e[c++]=m,e[--u]=m,e[--u]=g,e[d++]=g,e[d++]=_,e[--p]=_,e[--p]=x}f=i,y=n+o,x=s+f,g=s-f,m=r+y;const _=r-y;return e[c++]=x,e[c++]=m,e[--p]=_,e[--p]=x,i&&(e[c++]=g,e[c++]=m,e[--p]=_,e[--p]=g),e},triangulate(t,e,s,r,i,n){if(0===t.length)return;let a=0,o=0;for(let e=0;e<t.length;e+=2)a+=t[e],o+=t[e+1];a/=t.length/2,o/=t.length/2;let h=r;e[h*s]=a,e[h*s+1]=o;const l=h++;for(let r=0;r<t.length;r+=2)e[h*s]=t[r],e[h*s+1]=t[r+1],r>0&&(i[n++]=h,i[n++]=l,i[n++]=h-1),h++;i[n++]=l+1,i[n++]=l,i[n++]=h-1}},y={...f,extension:{...f.extension,name:"ellipse"}},x={...f,extension:{...f.extension,name:"roundedRectangle"}};var g=s(5638);const m=1e-4;function _(t,e,s,r,i,n,a,o){let h,l;a?(h=r,l=-s):(h=-r,l=s);const c=t-s*i+h,u=e-r*i+l,d=t+s*n+h,p=e+r*n+l;return o.push(c,u),o.push(d,p),2}function b(t,e,s,r,i,n,a,o){const h=s-t,l=r-e;let c=Math.atan2(h,l),u=Math.atan2(i-t,n-e);o&&c<u?c+=2*Math.PI:!o&&c>u&&(u+=2*Math.PI);let d=c;const p=u-c,f=Math.abs(p),y=Math.sqrt(h*h+l*l),x=1+(15*f*Math.sqrt(y)/Math.PI|0),g=p/x;if(d+=g,o){a.push(t,e),a.push(s,r);for(let s=1,r=d;s<x;s++,r+=g)a.push(t,e),a.push(t+Math.sin(r)*y,e+Math.cos(r)*y);a.push(t,e),a.push(i,n)}else{a.push(s,r),a.push(t,e);for(let s=1,r=d;s<x;s++,r+=g)a.push(t+Math.sin(r)*y,e+Math.cos(r)*y),a.push(t,e);a.push(i,n),a.push(t,e)}return 2*x}var M=s(3122);function P(t,e,s,r,i,n,a){const o=M(t,e,2);if(!o)return;for(let t=0;t<o.length;t+=3)n[a++]=o[t]+i,n[a++]=o[t+1]+i,n[a++]=o[t+2]+i;let h=i*r;for(let e=0;e<t.length;e+=2)s[h]=t[e],s[h+1]=t[e+1],h+=r}const v=[],S={extension:{type:r.Ag.ShapeBuilder,name:"polygon"},build(t,e){for(let s=0;s<t.points.length;s++)e[s]=t.points[s];return e},triangulate(t,e,s,r,i,n){P(t,v,e,s,r,i,n)}},C={extension:{type:r.Ag.ShapeBuilder,name:"rectangle"},build(t,e){const s=t,r=s.x,i=s.y,n=s.width,a=s.height;return n>=0&&a>=0?(e[0]=r,e[1]=i,e[2]=r+n,e[3]=i,e[4]=r+n,e[5]=i+a,e[6]=r,e[7]=i+a,e):e},triangulate(t,e,s,r,i,n){let a=0;e[(r*=s)+a]=t[0],e[r+a+1]=t[1],a+=s,e[r+a]=t[2],e[r+a+1]=t[3],a+=s,e[r+a]=t[6],e[r+a+1]=t[7],a+=s,e[r+a]=t[4],e[r+a+1]=t[5],a+=s;const o=r/s;i[n++]=o,i[n++]=o+1,i[n++]=o+2,i[n++]=o+1,i[n++]=o+3,i[n++]=o+2}},T={extension:{type:r.Ag.ShapeBuilder,name:"triangle"},build:(t,e)=>(e[0]=t.x,e[1]=t.y,e[2]=t.x2,e[3]=t.y2,e[4]=t.x3,e[5]=t.y3,e),triangulate(t,e,s,r,i,n){let a=0;e[(r*=s)+a]=t[0],e[r+a+1]=t[1],a+=s,e[r+a]=t[2],e[r+a+1]=t[3],a+=s,e[r+a]=t[4],e[r+a+1]=t[5];const o=r/s;i[n++]=o,i[n++]=o+1,i[n++]=o+2}},k={};r.XO.handleByMap(r.Ag.ShapeBuilder,k),r.XO.add(C,S,T,f,y,x);const w=new l.M;function G(t,e,s){const{vertices:r,uvs:i,indices:n}=s,a=n.length,o=r.length/2,l=[],c=k.rectangle,d=w,f=t.image;d.x=t.dx,d.y=t.dy,d.width=t.dw,d.height=t.dh;const y=t.transform;c.build(d,l),y&&(0,u.s)(l,y),c.triangulate(l,r,2,o,n,a);const x=f.uvs;i.push(x.x0,x.y0,x.x1,x.y1,x.x3,x.y3,x.x2,x.y2);const g=h.Z.get(p.G);g.indexOffset=a,g.indexSize=n.length-a,g.attributeOffset=o,g.attributeSize=r.length/2-o,g.baseColor=t.style,g.alpha=t.alpha,g.texture=f,g.geometryData=s,e.push(g)}function R(t,e,s,r,i,n){const{vertices:a,uvs:o,indices:l}=n,f=t.shapePrimitives.length-1;t.shapePrimitives.forEach((({shape:t,transform:y},x)=>{const M=l.length,v=a.length/2,S=[],C=k[t.type];let T="triangle-list";if(C.build(t,S),y&&(0,u.s)(S,y),r){const s=t.closePath??!0,r=e;r.pixelLine?(!function(t,e,s,r){const i=m;if(0===t.length)return;const n=t[0],a=t[1],o=t[t.length-2],h=t[t.length-1],l=e||Math.abs(n-o)<i&&Math.abs(a-h)<i,c=s,u=t.length/2,d=c.length/2;for(let e=0;e<u;e++)c.push(t[2*e]),c.push(t[2*e+1]);for(let t=0;t<u-1;t++)r.push(d+t,d+t+1);l&&r.push(d+u-1,d)}(S,s,a,l),T="line-list"):function(t,e,s,r,i,n){const a=m;if(0===t.length)return;const o=e;let h=o.alignment;if(.5!==e.alignment){let e=function(t){const e=t.length;if(e<6)return 1;let s=0;for(let r=0,i=t[e-2],n=t[e-1];r<e;r+=2){const e=t[r],a=t[r+1];s+=(e-i)*(a+n),i=e,n=a}return s<0?-1:1}(t);s&&(e*=-1),h=(h-.5)*e+.5}const l=new g.b(t[0],t[1]),c=new g.b(t[t.length-2],t[t.length-1]),u=r,d=Math.abs(l.x-c.x)<a&&Math.abs(l.y-c.y)<a;if(u){t=t.slice(),d&&(t.pop(),t.pop(),c.set(t[t.length-2],t[t.length-1]));const e=.5*(l.x+c.x),s=.5*(c.y+l.y);t.unshift(e,s),t.push(e,s)}const p=i,f=t.length/2;let y=t.length;const x=p.length/2,M=o.width/2,P=M*M,v=o.miterLimit*o.miterLimit;let S=t[0],C=t[1],T=t[2],k=t[3],w=0,G=0,R=-(C-k),B=S-T,H=0,A=0,z=Math.sqrt(R*R+B*B);R/=z,B/=z,R*=M,B*=M;const U=2*(1-h),D=2*h;u||("round"===o.cap?y+=b(S-R*(U-D)*.5,C-B*(U-D)*.5,S-R*U,C-B*U,S+R*D,C+B*D,p,!0)+2:"square"===o.cap&&(y+=_(S,C,R,B,U,D,!0,p))),p.push(S-R*U,C-B*U),p.push(S+R*D,C+B*D);for(let e=1;e<f-1;++e){S=t[2*(e-1)],C=t[2*(e-1)+1],T=t[2*e],k=t[2*e+1],w=t[2*(e+1)],G=t[2*(e+1)+1],R=-(C-k),B=S-T,z=Math.sqrt(R*R+B*B),R/=z,B/=z,R*=M,B*=M,H=-(k-G),A=T-w,z=Math.sqrt(H*H+A*A),H/=z,A/=z,H*=M,A*=M;const s=T-S,r=C-k,i=T-w,n=G-k,a=s*i+r*n,h=r*i-n*s,l=h<0;if(Math.abs(h)<.001*Math.abs(a)){p.push(T-R*U,k-B*U),p.push(T+R*D,k+B*D),a>=0&&("round"===o.join?y+=b(T,k,T-R*U,k-B*U,T-H*U,k-A*U,p,!1)+4:y+=2,p.push(T-H*D,k-A*D),p.push(T+H*U,k+A*U));continue}const c=(-R+S)*(-B+k)-(-R+T)*(-B+C),u=(-H+w)*(-A+k)-(-H+T)*(-A+G),d=(s*u-i*c)/h,f=(n*c-r*u)/h,x=(d-T)*(d-T)+(f-k)*(f-k),g=T+(d-T)*U,m=k+(f-k)*U,_=T-(d-T)*D,I=k-(f-k)*D,q=l?U:D;x<=Math.min(s*s+r*r,i*i+n*n)+q*q*P?"bevel"===o.join||x/P>v?(l?(p.push(g,m),p.push(T+R*D,k+B*D),p.push(g,m),p.push(T+H*D,k+A*D)):(p.push(T-R*U,k-B*U),p.push(_,I),p.push(T-H*U,k-A*U),p.push(_,I)),y+=2):"round"===o.join?l?(p.push(g,m),p.push(T+R*D,k+B*D),y+=b(T,k,T+R*D,k+B*D,T+H*D,k+A*D,p,!0)+4,p.push(g,m),p.push(T+H*D,k+A*D)):(p.push(T-R*U,k-B*U),p.push(_,I),y+=b(T,k,T-R*U,k-B*U,T-H*U,k-A*U,p,!1)+4,p.push(T-H*U,k-A*U),p.push(_,I)):(p.push(g,m),p.push(_,I)):(p.push(T-R*U,k-B*U),p.push(T+R*D,k+B*D),"round"===o.join?y+=l?b(T,k,T+R*D,k+B*D,T+H*D,k+A*D,p,!0)+2:b(T,k,T-R*U,k-B*U,T-H*U,k-A*U,p,!1)+2:"miter"===o.join&&x/P<=v&&(l?(p.push(_,I),p.push(_,I)):(p.push(g,m),p.push(g,m)),y+=2),p.push(T-H*U,k-A*U),p.push(T+H*D,k+A*D),y+=2)}S=t[2*(f-2)],C=t[2*(f-2)+1],T=t[2*(f-1)],k=t[2*(f-1)+1],R=-(C-k),B=S-T,z=Math.sqrt(R*R+B*B),R/=z,B/=z,R*=M,B*=M,p.push(T-R*U,k-B*U),p.push(T+R*D,k+B*D),u||("round"===o.cap?y+=b(T-R*(U-D)*.5,k-B*(U-D)*.5,T-R*U,k-B*U,T+R*D,k+B*D,p,!1)+2:"square"===o.cap&&(y+=_(T,k,R,B,U,D,!1,p)));for(let t=x;t<y+x-2;++t)S=p[2*t],C=p[2*t+1],T=p[2*(t+1)],k=p[2*(t+1)+1],w=p[2*(t+2)],G=p[2*(t+2)+1],Math.abs(S*(k-G)+T*(G-C)+w*(C-k))<1e-8||n.push(t,t+1,t+2)}(S,r,!1,s,a,l)}else if(s&&f===x){0!==f&&console.warn("[Pixi Graphics] only the last shape have be cut out");const t=[],e=S.slice(),r=function(t){if(!t)return[];const e=t.shapePrimitives,s=[];for(let t=0;t<e.length;t++){const r=e[t].shape,i=[];k[r.type].build(r,i),s.push(i)}return s}(s.shapePath);r.forEach((s=>{t.push(e.length/2),e.push(...s)})),P(e,t,a,2,v,l,M)}else C.triangulate(S,a,2,v,l,M);const w=o.length/2,G=e.texture;if(G!==d.g.WHITE){const t=e.matrix;t&&(y&&t.append(y.clone().invert()),(0,c.X)(a,2,v,o,w,2,a.length/2-v,t))}else(0,c.D)(o,w,2,a.length/2-v);const R=h.Z.get(p.G);R.indexOffset=M,R.indexSize=l.length-M,R.attributeOffset=v,R.attributeSize=a.length/2-v,R.baseColor=e.color,R.alpha=e.alpha,R.texture=G,R.geometryData=n,R.topology=T,i.push(R)}))}class B{constructor(){this.batches=[],this.geometryData={vertices:[],uvs:[],indices:[]}}}class H{constructor(){this.batcher=new n.J,this.instructions=new a.L}init(){this.instructions.reset()}get geometry(){return(0,o.t6)(o.Ek,"GraphicsContextRenderData#geometry is deprecated, please use batcher.geometry instead."),this.batcher.geometry}}const A=class t{constructor(t){this._gpuContextHash={},this._graphicsDataContextHash=Object.create(null),t.renderableGC.addManagedHash(this,"_gpuContextHash"),t.renderableGC.addManagedHash(this,"_graphicsDataContextHash")}init(e){t.defaultOptions.bezierSmoothness=e?.bezierSmoothness??t.defaultOptions.bezierSmoothness}getContextRenderData(t){return this._graphicsDataContextHash[t.uid]||this._initContextRenderData(t)}updateGpuContext(t){let e=this._gpuContextHash[t.uid]||this._initContext(t);if(t.dirty){e?this._cleanGraphicsContextData(t):e=this._initContext(t),function(t,e){const{geometryData:s,batches:r}=e;r.length=0,s.indices.length=0,s.vertices.length=0,s.uvs.length=0;for(let e=0;e<t.instructions.length;e++){const i=t.instructions[e];if("texture"===i.action)G(i.data,r,s);else if("fill"===i.action||"stroke"===i.action){const t="stroke"===i.action,e=i.data.path.shapePath,n=i.data.style,a=i.data.hole;t&&a&&R(a.shapePath,n,null,!0,r,s),R(e,n,a,t,r,s)}}}(t,e);const s=t.batchMode;t.customShader||"no-batch"===s?e.isBatchable=!1:"auto"===s&&(e.isBatchable=e.geometryData.vertices.length<400),t.dirty=!1}return e}getGpuContext(t){return this._gpuContextHash[t.uid]||this._initContext(t)}_initContextRenderData(t){const e=h.Z.get(H),{batches:s,geometryData:r}=this._gpuContextHash[t.uid],n=r.vertices.length,a=r.indices.length;for(let t=0;t<s.length;t++)s[t].applyTransform=!1;const o=e.batcher;o.ensureAttributeBuffer(n),o.ensureIndexBuffer(a),o.begin();for(let t=0;t<s.length;t++){const e=s[t];o.add(e)}o.finish(e.instructions);const l=o.geometry;l.indexBuffer.setDataWithSize(o.indexBuffer,o.indexSize,!0),l.buffers[0].setDataWithSize(o.attributeBuffer.float32View,o.attributeSize,!0);const c=o.batches;for(let t=0;t<c.length;t++){const e=c[t];e.bindGroup=(0,i.w)(e.textures.textures,e.textures.count)}return this._graphicsDataContextHash[t.uid]=e,e}_initContext(t){const e=new B;return e.context=t,this._gpuContextHash[t.uid]=e,t.on("destroy",this.onGraphicsContextDestroy,this),this._gpuContextHash[t.uid]}onGraphicsContextDestroy(t){this._cleanGraphicsContextData(t),t.off("destroy",this.onGraphicsContextDestroy,this),this._gpuContextHash[t.uid]=null}_cleanGraphicsContextData(t){const e=this._gpuContextHash[t.uid];e.isBatchable||this._graphicsDataContextHash[t.uid]&&(h.Z.return(this.getContextRenderData(t)),this._graphicsDataContextHash[t.uid]=null),e.batches&&e.batches.forEach((t=>{h.Z.return(t)}))}destroy(){for(const t in this._gpuContextHash)this._gpuContextHash[t]&&this.onGraphicsContextDestroy(this._gpuContextHash[t].context)}};A.extension={type:[r.Ag.WebGLSystem,r.Ag.WebGPUSystem,r.Ag.CanvasSystem],name:"graphicsContext"},A.defaultOptions={bezierSmoothness:.5};let z=A},1639:(t,e,s)=>{s.d(e,{_:()=>c});var r=s(1598),i=s(4184),n=s(1026),a=s(600),o=s(8554),h=s(4124);const l=class t{constructor(t,e,s,r){this.uid=(0,h.L)("fillGradient"),this.type="linear",this.gradientStops=[],this._styleKey=null,this.x0=t,this.y0=e,this.x1=s,this.y1=r}addColorStop(t,e){return this.gradientStops.push({offset:t,color:r.Q.shared.setValue(e).toHexa()}),this._styleKey=null,this}buildLinearGradient(){if(this.texture)return;const e=t.defaultTextureSize,{gradientStops:s}=this,r=i.e.get().createCanvas();r.width=e,r.height=e;const h=r.getContext("2d"),l=h.createLinearGradient(0,0,t.defaultTextureSize,1);for(let t=0;t<s.length;t++){const e=s[t];l.addColorStop(e.offset,e.color)}h.fillStyle=l,h.fillRect(0,0,e,e),this.texture=new o.g({source:new a.b({resource:r,addressModeU:"clamp-to-edge",addressModeV:"repeat"})});const{x0:c,y0:u,x1:d,y1:p}=this,f=new n.u,y=d-c,x=p-u,g=Math.sqrt(y*y+x*x),m=Math.atan2(x,y);f.translate(-c,-u),f.scale(1/e,1/e),f.rotate(-m),f.scale(256/g,1),this.transform=f,this._styleKey=null}get styleKey(){if(this._styleKey)return this._styleKey;const t=this.gradientStops.map((t=>`${t.offset}-${t.color}`)).join("-"),e=this.texture.uid,s=this.transform.toArray().join("-");return`fill-gradient-${this.uid}-${t}-${e}-${s}-${this.x0}-${this.y0}-${this.x1}-${this.y1}`}};l.defaultTextureSize=256;let c=l},8187:(t,e,s)=>{s.d(e,{m:()=>a});var r=s(1026),i=s(4124);const n={repeat:{addressModeU:"repeat",addressModeV:"repeat"},"repeat-x":{addressModeU:"repeat",addressModeV:"clamp-to-edge"},"repeat-y":{addressModeU:"clamp-to-edge",addressModeV:"repeat"},"no-repeat":{addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge"}};class a{constructor(t,e){this.uid=(0,i.L)("fillPattern"),this.transform=new r.u,this._styleKey=null,this.texture=t,this.transform.scale(1/t.frame.width,1/t.frame.height),e&&(t.source.style.addressModeU=n[e].addressModeU,t.source.style.addressModeV=n[e].addressModeV)}setTransform(t){const e=this.texture;this.transform.copyFrom(t),this.transform.invert(),this.transform.scale(1/e.frame.width,1/e.frame.height),this._styleKey=null}get styleKey(){return this._styleKey||(this._styleKey=`fill-pattern-${this.uid}-${this.texture.uid}-${this.transform.toArray().join("-")}`),this._styleKey}}},8785:(t,e,s)=>{s.d(e,{T:()=>p,w:()=>d});var r=s(1598),i=s(1026),n=s(8554),a=s(1639),o=s(8187);function h(t){return t instanceof o.m}function l(t){return t instanceof a._}function c(t,e,s){return t.fill=e,t.color=16777215,t.texture=e.texture,t.matrix=e.transform,{...s,...t}}function u(t,e,s){return e.buildLinearGradient(),t.fill=e,t.color=16777215,t.texture=e.texture,t.matrix=e.transform,{...s,...t}}function d(t,e){if(null==t)return null;const s={},a=t;return function(t){return r.Q.isColorLike(t)}(t)?function(t,e,s){const i=r.Q.shared.setValue(e??0);return t.color=i.toNumber(),t.alpha=1===i.alpha?s.alpha:i.alpha,t.texture=n.g.WHITE,{...s,...t}}(s,t,e):h(t)?c(s,t,e):l(t)?u(s,t,e):a.fill&&h(a.fill)?c(a,a.fill,e):a.fill&&l(a.fill)?u(a,a.fill,e):function(t,e){const s={...e,...t};if(s.texture){if(s.texture!==n.g.WHITE){const t=s.matrix?.clone().invert()||new i.u;t.translate(s.texture.frame.x,s.texture.frame.y),t.scale(1/s.texture.source.width,1/s.texture.source.height),s.matrix=t}const t=s.texture.source.style;"clamp-to-edge"===t.addressMode&&(t.addressMode="repeat",t.update())}const a=r.Q.shared.setValue(s.color);return s.alpha*=a.alpha,s.color=a.toNumber(),s.matrix=s.matrix?s.matrix.clone():null,s}(a,e)}function p(t,e){const{width:s,alignment:r,miterLimit:i,cap:n,join:a,pixelLine:o,...h}=e,l=d(t,h);return l?{width:s,alignment:r,miterLimit:i,cap:n,join:a,pixelLine:o,...l}:null}},8215:(t,e,s)=>{s.d(e,{b:()=>a});var r=s(2597),i=s(7981);const n=class t extends i.u{constructor(...t){super({});let e=t[0]??{};"number"==typeof e&&((0,r.t6)(r.lj,"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead"),e={width:e,height:t[1],verticesX:t[2],verticesY:t[3]}),this.build(e)}build(e){e={...t.defaultOptions,...e},this.verticesX=this.verticesX??e.verticesX,this.verticesY=this.verticesY??e.verticesY,this.width=this.width??e.width,this.height=this.height??e.height;const s=this.verticesX*this.verticesY,r=[],i=[],n=[],a=this.verticesX-1,o=this.verticesY-1,h=this.width/a,l=this.height/o;for(let t=0;t<s;t++){const e=t%this.verticesX,s=t/this.verticesX|0;r.push(e*h,s*l),i.push(e/a,s/o)}const c=a*o;for(let t=0;t<c;t++){const e=t%a,s=t/a|0,r=s*this.verticesX+e,i=s*this.verticesX+e+1,o=(s+1)*this.verticesX+e,h=(s+1)*this.verticesX+e+1;n.push(r,i,o,i,h,o)}this.buffers[0].data=new Float32Array(r),this.buffers[1].data=new Float32Array(i),this.indexBuffer.data=new Uint32Array(n),this.buffers[0].update(),this.buffers[1].update(),this.indexBuffer.update()}};n.defaultOptions={width:100,height:100,verticesX:10,verticesY:10};let a=n},41:(t,e,s)=>{s.d(e,{S:()=>d});var r=s(9084),i=s(1026),n=s(684),a=s(544),o=s(2152),h=s(3086),l=s(5106),c=s(8554),u=s(8273);class d{init(){const t=(0,n.I)({name:"mesh",bits:[a.mA,h.m,o.m]});this._shader=new l.M({glProgram:t,resources:{uTexture:c.g.EMPTY.source,textureUniforms:{uTextureMatrix:{type:"mat3x3<f32>",value:new i.u}}}})}execute(t,e){const s=t.renderer;let r=e._shader;if(r){if(!r.glProgram)return void(0,u.R)("Mesh shader has no glProgram",e.shader)}else{r=this._shader;const t=e.texture,s=t.source;r.resources.uTexture=s,r.resources.uSampler=s.style,r.resources.textureUniforms.uniforms.uTextureMatrix=t.textureMatrix.mapCoord}r.groups[100]=s.globalUniforms.bindGroup,r.groups[101]=t.localUniformsBindGroup,s.encoder.draw({geometry:e._geometry,shader:r,state:e.state})}destroy(){this._shader.destroy(!0),this._shader=null}}d.extension={type:[r.Ag.WebGLPipesAdaptor],name:"mesh"}},9927:(t,e,s)=>{s.d(e,{F:()=>d});var r=s(9084),i=s(1026),n=s(684),a=s(544),o=s(2152),h=s(3086),l=s(5106),c=s(8554),u=s(8273);class d{init(){const t=(0,n.v)({name:"mesh",bits:[a.Ls,h.R,o.b]});this._shader=new l.M({gpuProgram:t,resources:{uTexture:c.g.EMPTY._source,uSampler:c.g.EMPTY._source.style,textureUniforms:{uTextureMatrix:{type:"mat3x3<f32>",value:new i.u}}}})}execute(t,e){const s=t.renderer;let r=e._shader;if(r){if(!r.gpuProgram)return void(0,u.R)("Mesh shader has no gpuProgram",e.shader)}else r=this._shader,r.groups[2]=s.texture.getTextureBindGroup(e.texture);const i=r.gpuProgram;if(i.autoAssignGlobalUniforms&&(r.groups[0]=s.globalUniforms.bindGroup),i.autoAssignLocalUniforms){const e=t.localUniforms;r.groups[1]=s.renderPipes.uniformBatch.getUniformBindGroup(e,!0)}s.encoder.draw({geometry:e._geometry,shader:r,state:e.state})}destroy(){this._shader.destroy(!0),this._shader=null}}d.extension={type:[r.Ag.WebGPUPipesAdaptor],name:"mesh"}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,