"use strict";(self.webpackChunkpixijs_game=self.webpackChunkpixijs_game||[]).push([[302],{9399:(e,t,s)=>{s.d(t,{B:()=>i});var r=s(9084),n=s(8143);const i=new class{constructor(){this._effectClasses=[],this._tests=[],this._initialized=!1}init(){this._initialized||(this._initialized=!0,this._effectClasses.forEach((e=>{this.add({test:e.test,maskClass:e})})))}add(e){this._tests.push(e)}getMaskEffect(e){this._initialized||this.init();for(let t=0;t<this._tests.length;t++){const s=this._tests[t];if(s.test(e))return n.Z.get(s.maskClass,e)}return e}returnMaskEffect(e){n.Z.return(e)}};r.XO.handleByList(r.Ag.MaskEffect,i._effectClasses)},2066:(e,t,s)=>{s.d(t,{Z:()=>o});var r=s(9084),n=s(9571),i=s(1447),a=s(2994);class o{constructor(e){this.priority=0,this.inverse=!1,this.pipe="alphaMask",e?.mask&&this.init(e.mask)}init(e){this.mask=e,this.renderMaskToTexture=!(e instanceof n.k),this.mask.renderable=this.renderMaskToTexture,this.mask.includeInBuild=!this.renderMaskToTexture,this.mask.measurable=!1}reset(){this.mask.measurable=!0,this.mask=null}addBounds(e,t){this.inverse||(0,i.d)(this.mask,e,t)}addLocalBounds(e,t){(0,a.U)(this.mask,e,t)}containsPoint(e,t){return t(this.mask,e)}destroy(){this.reset()}static test(e){return e instanceof n.k}}o.extension=r.Ag.MaskEffect},6878:(e,t,s)=>{s.d(t,{z:()=>p});var r=s(9084),n=s(6276),i=s(3685),a=s(3475),o=s(1278),c=s(8235),d=s(9571),l=s(8143),u=s(8554),h=s(1448),f=s(2672);const _=new a.c;class k extends n.a{constructor(){super(),this.filters=[new i.L({sprite:new d.k(u.g.EMPTY),inverse:!1,resolution:"inherit",antialias:"inherit"})]}get sprite(){return this.filters[0].sprite}set sprite(e){this.filters[0].sprite=e}get inverse(){return this.filters[0].inverse}set inverse(e){this.filters[0].inverse=e}}class p{constructor(e){this._activeMaskStage=[],this._renderer=e}push(e,t,s){const r=this._renderer;if(r.renderPipes.batch.break(s),s.add({renderPipeId:"alphaMask",action:"pushMaskBegin",mask:e,inverse:t._maskOptions.inverse,canBundle:!1,maskedContainer:t}),e.inverse=t._maskOptions.inverse,e.renderMaskToTexture){const t=e.mask;t.includeInBuild=!0,(0,c.z)(t,s,r),t.includeInBuild=!1}r.renderPipes.batch.break(s),s.add({renderPipeId:"alphaMask",action:"pushMaskEnd",mask:e,maskedContainer:t,inverse:t._maskOptions.inverse,canBundle:!1})}pop(e,t,s){this._renderer.renderPipes.batch.break(s),s.add({renderPipeId:"alphaMask",action:"popMaskEnd",mask:e,inverse:t._maskOptions.inverse,canBundle:!1})}execute(e){const t=this._renderer,s=e.mask.renderMaskToTexture;if("pushMaskBegin"===e.action){const r=l.Z.get(k);if(r.inverse=e.inverse,s){e.mask.mask.measurable=!0;const s=(0,o.fB)(e.mask.mask,!0,_);e.mask.mask.measurable=!1,s.ceil();const n=t.renderTarget.renderTarget.colorTexture.source,i=h.W.getOptimalTexture(s.width,s.height,n._resolution,n.antialias);t.renderTarget.push(i,!0),t.globalUniforms.push({offset:s,worldColor:4294967295});const a=r.sprite;a.texture=i,a.worldTransform.tx=s.minX,a.worldTransform.ty=s.minY,this._activeMaskStage.push({filterEffect:r,maskedContainer:e.maskedContainer,filterTexture:i})}else r.sprite=e.mask.mask,this._activeMaskStage.push({filterEffect:r,maskedContainer:e.maskedContainer})}else if("pushMaskEnd"===e.action){const e=this._activeMaskStage[this._activeMaskStage.length-1];s&&(t.type===f.W.WEBGL&&t.renderTarget.finishRenderPass(),t.renderTarget.pop(),t.globalUniforms.pop()),t.filter.push({renderPipeId:"filter",action:"pushFilter",container:e.maskedContainer,filterEffect:e.filterEffect,canBundle:!1})}else if("popMaskEnd"===e.action){t.filter.pop();const e=this._activeMaskStage.pop();s&&h.W.returnTexture(e.filterTexture),l.Z.return(e.filterEffect)}}destroy(){this._renderer=null,this._activeMaskStage=null}}p.extension={type:[r.Ag.WebGLPipes,r.Ag.WebGPUPipes,r.Ag.CanvasPipes],name:"alphaMask"}},2602:(e,t,s)=>{s.d(t,{W:()=>n});var r=s(9084);class n{constructor(e){this.priority=0,this.pipe="colorMask",e?.mask&&this.init(e.mask)}init(e){this.mask=e}destroy(){}static test(e){return"number"==typeof e}}n.extension=r.Ag.MaskEffect},7542:(e,t,s)=>{s.d(t,{u:()=>n});var r=s(9084);class n{constructor(e){this._colorStack=[],this._colorStackIndex=0,this._currentColor=0,this._renderer=e}buildStart(){this._colorStack[0]=15,this._colorStackIndex=1,this._currentColor=15}push(e,t,s){this._renderer.renderPipes.batch.break(s);const r=this._colorStack;r[this._colorStackIndex]=r[this._colorStackIndex-1]&e.mask;const n=this._colorStack[this._colorStackIndex];n!==this._currentColor&&(this._currentColor=n,s.add({renderPipeId:"colorMask",colorMask:n,canBundle:!1})),this._colorStackIndex++}pop(e,t,s){this._renderer.renderPipes.batch.break(s);const r=this._colorStack;this._colorStackIndex--;const n=r[this._colorStackIndex-1];n!==this._currentColor&&(this._currentColor=n,s.add({renderPipeId:"colorMask",colorMask:n,canBundle:!1}))}execute(e){this._renderer.colorMask.setMask(e.colorMask)}destroy(){this._colorStack=null}}n.extension={type:[r.Ag.WebGLPipes,r.Ag.WebGPUPipes,r.Ag.CanvasPipes],name:"colorMask"}},2314:(e,t,s)=>{s.d(t,{r:()=>o});var r=s(9084),n=s(9032),i=s(1447),a=s(2994);class o{constructor(e){this.priority=0,this.pipe="stencilMask",e?.mask&&this.init(e.mask)}init(e){this.mask=e,this.mask.includeInBuild=!1,this.mask.measurable=!1}reset(){this.mask.measurable=!0,this.mask.includeInBuild=!0,this.mask=null}addBounds(e,t){(0,i.d)(this.mask,e,t)}addLocalBounds(e,t){(0,a.U)(this.mask,e,t)}containsPoint(e,t){return t(this.mask,e)}destroy(){this.reset()}static test(e){return e instanceof n.mc}}o.extension=r.Ag.MaskEffect},3318:(e,t,s)=>{s.d(t,{j:()=>o});var r=s(9084),n=s(8235),i=s(2652),a=s(1960);class o{constructor(e){this._maskStackHash={},this._maskHash=new WeakMap,this._renderer=e}push(e,t,s){var r;const i=e,a=this._renderer;a.renderPipes.batch.break(s),a.renderPipes.blendMode.setBlendMode(i.mask,"none",s),s.add({renderPipeId:"stencilMask",action:"pushMaskBegin",mask:e,inverse:t._maskOptions.inverse,canBundle:!1});const o=i.mask;o.includeInBuild=!0,this._maskHash.has(i)||this._maskHash.set(i,{instructionsStart:0,instructionsLength:0});const c=this._maskHash.get(i);c.instructionsStart=s.instructionSize,(0,n.z)(o,s,a),o.includeInBuild=!1,a.renderPipes.batch.break(s),s.add({renderPipeId:"stencilMask",action:"pushMaskEnd",mask:e,inverse:t._maskOptions.inverse,canBundle:!1});const d=s.instructionSize-c.instructionsStart-1;c.instructionsLength=d;const l=a.renderTarget.renderTarget.uid;(r=this._maskStackHash)[l]??(r[l]=0)}pop(e,t,s){const r=e,n=this._renderer;n.renderPipes.batch.break(s),n.renderPipes.blendMode.setBlendMode(r.mask,"none",s),s.add({renderPipeId:"stencilMask",action:"popMaskBegin",inverse:t._maskOptions.inverse,canBundle:!1});const i=this._maskHash.get(e);for(let e=0;e<i.instructionsLength;e++)s.instructions[s.instructionSize++]=s.instructions[i.instructionsStart++];s.add({renderPipeId:"stencilMask",action:"popMaskEnd",canBundle:!1})}execute(e){var t;const s=this._renderer,r=s.renderTarget.renderTarget.uid;let n=(t=this._maskStackHash)[r]??(t[r]=0);"pushMaskBegin"===e.action?(s.renderTarget.ensureDepthStencil(),s.stencil.setStencilMode(a.K.RENDERING_MASK_ADD,n),n++,s.colorMask.setMask(0)):"pushMaskEnd"===e.action?(e.inverse?s.stencil.setStencilMode(a.K.INVERSE_MASK_ACTIVE,n):s.stencil.setStencilMode(a.K.MASK_ACTIVE,n),s.colorMask.setMask(15)):"popMaskBegin"===e.action?(s.colorMask.setMask(0),0!==n?s.stencil.setStencilMode(a.K.RENDERING_MASK_REMOVE,n):(s.renderTarget.clear(null,i.u.STENCIL),s.stencil.setStencilMode(a.K.DISABLED,n)),n--):"popMaskEnd"===e.action&&(e.inverse?s.stencil.setStencilMode(a.K.INVERSE_MASK_ACTIVE,n):s.stencil.setStencilMode(a.K.MASK_ACTIVE,n),s.colorMask.setMask(15)),this._maskStackHash[r]=n}destroy(){this._renderer=null,this._maskStackHash=null,this._maskHash=null}}o.extension={type:[r.Ag.WebGLPipes,r.Ag.WebGPUPipes,r.Ag.CanvasPipes],name:"stencilMask"}},1447:(e,t,s)=>{s.d(t,{d:()=>a});var r=s(3475),n=s(1278);const i=new r.c;function a(e,t,s){const r=i;e.measurable=!0,(0,n.fB)(e,s,r),t.addBoundsMask(r),e.measurable=!1}},2994:(e,t,s)=>{s.d(t,{U:()=>a});var r=s(98),n=s(5249),i=s(8273);function a(e,t,s){const i=n.o.get();e.measurable=!0;const a=n.u.get().identity(),c=o(e,s,a);(0,r.n)(e,i,c),e.measurable=!1,t.addBoundsMask(i),n.u.return(a),n.o.return(i)}function o(e,t,s){return e?(e!==t&&(o(e.parent,t,s),e.updateLocalTransform(),s.append(e.localTransform)),s):((0,i.R)("Mask bounds, renderable is not inside the root container"),s)}},7016:(e,t,s)=>{s.d(t,{q:()=>o});var r=s(6579),n=s(7290),i=s(7778);const a=["webgl","webgpu","canvas"];async function o(e){let t,o=[];e.preference?(o.push(e.preference),a.forEach((t=>{t!==e.preference&&o.push(t)}))):o=a.slice();let c={};for(let a=0;a<o.length;a++){const d=o[a];if("webgpu"===d&&await(0,n.V)()){const{WebGPURenderer:r}=await Promise.all([s.e(217),s.e(346),s.e(640),s.e(395),s.e(443),s.e(17),s.e(858),s.e(517),s.e(2),s.e(404),s.e(302),s.e(417),s.e(457),s.e(929),s.e(676),s.e(135),s.e(410),s.e(716),s.e(630),s.e(42)]).then(s.bind(s,3461));t=r,c={...e,...e.webgpu};break}if("webgl"===d&&(0,r.M)(e.failIfMajorPerformanceCaveat??i.k.defaultOptions.failIfMajorPerformanceCaveat)){const{WebGLRenderer:r}=await Promise.all([s.e(217),s.e(346),s.e(640),s.e(395),s.e(443),s.e(17),s.e(858),s.e(517),s.e(2),s.e(404),s.e(302),s.e(417),s.e(457),s.e(929),s.e(676),s.e(135),s.e(410),s.e(716),s.e(630),s.e(42)]).then(s.bind(s,3239));t=r,c={...e,...e.webgl};break}if("canvas"===d)throw c={...e},new Error("CanvasRenderer is not yet implemented")}if(delete c.webgpu,delete c.webgl,!t)throw new Error("No available renderer for the current environment");const d=new t;return await d.init(c),d}},501:(e,t,s)=>{s.d(t,{N:()=>r});class r{constructor(){this.width=-1,this.height=-1,this.msaa=!1,this.msaaRenderBuffer=[]}}},3239:(e,t,s)=>{s.d(t,{WebGLRenderer:()=>Y});var r=s(9084),n=s(7541),i=s(41),a=s(7628),o=s(7778),c=s(767),d=s(2672),l=s(4583),u=(e=>(e[e.ELEMENT_ARRAY_BUFFER=34963]="ELEMENT_ARRAY_BUFFER",e[e.ARRAY_BUFFER=34962]="ARRAY_BUFFER",e[e.UNIFORM_BUFFER=35345]="UNIFORM_BUFFER",e))(u||{});class h{constructor(e,t){this._lastBindBaseLocation=-1,this._lastBindCallId=-1,this.buffer=e||null,this.updateID=-1,this.byteLength=-1,this.type=t}}class f{constructor(e){this._gpuBuffers=Object.create(null),this._boundBufferBases=Object.create(null),this._minBaseLocation=0,this._nextBindBaseIndex=this._minBaseLocation,this._bindCallId=0,this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuBuffers")}destroy(){this._renderer=null,this._gl=null,this._gpuBuffers=null,this._boundBufferBases=null}contextChange(){const e=this._gl=this._renderer.gl;this._gpuBuffers=Object.create(null),this._maxBindings=e.MAX_UNIFORM_BUFFER_BINDINGS?e.getParameter(e.MAX_UNIFORM_BUFFER_BINDINGS):0}getGlBuffer(e){return this._gpuBuffers[e.uid]||this.createGLBuffer(e)}bind(e){const{_gl:t}=this,s=this.getGlBuffer(e);t.bindBuffer(s.type,s.buffer)}bindBufferBase(e,t){const{_gl:s}=this;this._boundBufferBases[t]!==e&&(this._boundBufferBases[t]=e,e._lastBindBaseLocation=t,s.bindBufferBase(s.UNIFORM_BUFFER,t,e.buffer))}nextBindBase(e){this._bindCallId++,this._minBaseLocation=0,e&&(this._boundBufferBases[0]=null,this._minBaseLocation=1,this._nextBindBaseIndex<1&&(this._nextBindBaseIndex=1))}freeLocationForBufferBase(e){let t=this.getLastBindBaseLocation(e);if(t>=this._minBaseLocation)return e._lastBindCallId=this._bindCallId,t;let s=0,r=this._nextBindBaseIndex;for(;s<2;){r>=this._maxBindings&&(r=this._minBaseLocation,s++);const e=this._boundBufferBases[r];if(!e||e._lastBindCallId!==this._bindCallId)break;r++}return t=r,this._nextBindBaseIndex=r+1,s>=2?-1:(e._lastBindCallId=this._bindCallId,this._boundBufferBases[t]=null,t)}getLastBindBaseLocation(e){const t=e._lastBindBaseLocation;return this._boundBufferBases[t]===e?t:-1}bindBufferRange(e,t,s,r){const{_gl:n}=this;s||(s=0),t||(t=0),this._boundBufferBases[t]=null,n.bindBufferRange(n.UNIFORM_BUFFER,t||0,e.buffer,256*s,r||256)}updateBuffer(e){const{_gl:t}=this,s=this.getGlBuffer(e);if(e._updateID===s.updateID)return s;s.updateID=e._updateID,t.bindBuffer(s.type,s.buffer);const r=e.data,n=e.descriptor.usage&l.S.STATIC?t.STATIC_DRAW:t.DYNAMIC_DRAW;return r?s.byteLength>=r.byteLength?t.bufferSubData(s.type,0,r,0,e._updateSize/r.BYTES_PER_ELEMENT):(s.byteLength=r.byteLength,t.bufferData(s.type,r,n)):(s.byteLength=e.descriptor.size,t.bufferData(s.type,s.byteLength,n)),s}destroyAll(){const e=this._gl;for(const t in this._gpuBuffers)e.deleteBuffer(this._gpuBuffers[t].buffer);this._gpuBuffers=Object.create(null)}onBufferDestroy(e,t){const s=this._gpuBuffers[e.uid],r=this._gl;t||r.deleteBuffer(s.buffer),this._gpuBuffers[e.uid]=null}createGLBuffer(e){const{_gl:t}=this;let s=u.ARRAY_BUFFER;e.descriptor.usage&l.S.INDEX?s=u.ELEMENT_ARRAY_BUFFER:e.descriptor.usage&l.S.UNIFORM&&(s=u.UNIFORM_BUFFER);const r=new h(t.createBuffer(),s);return this._gpuBuffers[e.uid]=r,e.on("destroy",this.onBufferDestroy,this),r}}f.extension={type:[r.Ag.WebGLSystem],name:"buffer"};var _=s(412),k=s(8226),p=s(8273),g=s(6712),B=s(5106),m=s(9678),b=s(1822),M=s(8554),E=s(1368);const S=new g.V({attributes:{aPosition:[-1,-1,3,-1,-1,3]}}),T=class e{constructor(e){this.useBackBuffer=!1,this._useBackBufferThisRender=!1,this._renderer=e}init(t={}){const{useBackBuffer:s,antialias:r}={...e.defaultOptions,...t};this.useBackBuffer=s,this._antialias=r,this._renderer.context.supports.msaa||((0,p.R)("antialiasing, is not supported on when using the back buffer"),this._antialias=!1),this._state=m.U.for2d();const n=new E.M({vertex:"\n                attribute vec2 aPosition;\n                out vec2 vUv;\n\n                void main() {\n                    gl_Position = vec4(aPosition, 0.0, 1.0);\n\n                    vUv = (aPosition + 1.0) / 2.0;\n\n                    // flip dem UVs\n                    vUv.y = 1.0 - vUv.y;\n                }",fragment:"\n                in vec2 vUv;\n                out vec4 finalColor;\n\n                uniform sampler2D uTexture;\n\n                void main() {\n                    finalColor = texture(uTexture, vUv);\n                }",name:"big-triangle"});this._bigTriangleShader=new B.M({glProgram:n,resources:{uTexture:M.g.WHITE.source}})}renderStart(e){const t=this._renderer.renderTarget.getRenderTarget(e.target);if(this._useBackBufferThisRender=this.useBackBuffer&&!!t.isRoot,this._useBackBufferThisRender){const t=this._renderer.renderTarget.getRenderTarget(e.target);this._targetTexture=t.colorTexture,e.target=this._getBackBufferTexture(t.colorTexture)}}renderEnd(){this._presentBackBuffer()}_presentBackBuffer(){const e=this._renderer;e.renderTarget.finishRenderPass(),this._useBackBufferThisRender&&(e.renderTarget.bind(this._targetTexture,!1),this._bigTriangleShader.resources.uTexture=this._backBufferTexture.source,e.encoder.draw({geometry:S,shader:this._bigTriangleShader,state:this._state}))}_getBackBufferTexture(e){return this._backBufferTexture=this._backBufferTexture||new M.g({source:new b.v({width:e.width,height:e.height,resolution:e._resolution,antialias:this._antialias})}),this._backBufferTexture.source.resize(e.width,e.height,e._resolution),this._backBufferTexture}destroy(){this._backBufferTexture&&(this._backBufferTexture.destroy(),this._backBufferTexture=null)}};T.extension={type:[r.Ag.WebGLSystem],name:"backBuffer",priority:1},T.defaultOptions={useBackBuffer:!1};let v=T;class R{constructor(e){this._colorMaskCache=15,this._renderer=e}setMask(e){this._colorMaskCache!==e&&(this._colorMaskCache=e,this._renderer.gl.colorMask(!!(8&e),!!(4&e),!!(2&e),!!(1&e)))}}R.extension={type:[r.Ag.WebGLSystem],name:"colorMask"};class I{constructor(e){this.commandFinished=Promise.resolve(),this._renderer=e}setGeometry(e,t){this._renderer.geometry.bind(e,t.glProgram)}finishRenderPass(){}draw(e){const t=this._renderer,{geometry:s,shader:r,state:n,skipSync:i,topology:a,size:o,start:c,instanceCount:d}=e;t.shader.bind(r,i),t.geometry.bind(s,t.shader._activeProgram),n&&t.state.set(n),t.geometry.draw(a,o,c,d??s.instanceCount)}destroy(){this._renderer=null}}I.extension={type:[r.Ag.WebGLSystem],name:"encoder"};var x=s(8387),C=s(1960);class y{constructor(e){this._stencilCache={enabled:!1,stencilReference:0,stencilMode:C.K.NONE},this._renderTargetStencilState=Object.create(null),e.renderTarget.onRenderTargetChange.add(this)}contextChange(e){this._gl=e,this._comparisonFuncMapping={always:e.ALWAYS,never:e.NEVER,equal:e.EQUAL,"not-equal":e.NOTEQUAL,less:e.LESS,"less-equal":e.LEQUAL,greater:e.GREATER,"greater-equal":e.GEQUAL},this._stencilOpsMapping={keep:e.KEEP,zero:e.ZERO,replace:e.REPLACE,invert:e.INVERT,"increment-clamp":e.INCR,"decrement-clamp":e.DECR,"increment-wrap":e.INCR_WRAP,"decrement-wrap":e.DECR_WRAP},this._stencilCache.enabled=!1,this._stencilCache.stencilMode=C.K.NONE,this._stencilCache.stencilReference=0}onRenderTargetChange(e){if(this._activeRenderTarget===e)return;this._activeRenderTarget=e;let t=this._renderTargetStencilState[e.uid];t||(t=this._renderTargetStencilState[e.uid]={stencilMode:C.K.DISABLED,stencilReference:0}),this.setStencilMode(t.stencilMode,t.stencilReference)}setStencilMode(e,t){const s=this._renderTargetStencilState[this._activeRenderTarget.uid],r=this._gl,n=x.g[e],i=this._stencilCache;s.stencilMode=e,s.stencilReference=t,e!==C.K.DISABLED?(this._stencilCache.enabled||(this._stencilCache.enabled=!0,r.enable(r.STENCIL_TEST)),e===i.stencilMode&&i.stencilReference===t||(i.stencilMode=e,i.stencilReference=t,r.stencilFunc(this._comparisonFuncMapping[n.stencilBack.compare],t,255),r.stencilOp(r.KEEP,r.KEEP,this._stencilOpsMapping[n.stencilBack.passOp]))):this._stencilCache.enabled&&(this._stencilCache.enabled=!1,r.disable(r.STENCIL_TEST))}}y.extension={type:[r.Ag.WebGLSystem],name:"stencil"};var A=s(1740),L=s(5463),P=s(2500);class w extends A.W{constructor(){super({createUboElements:L.l,generateUboSync:P.N})}}w.extension={type:[r.Ag.WebGLSystem],name:"ubo"};var U=s(2016),N=s(7115),F=s(3832),O=s(9271),G=s(7995);const W=[...c.i,w,v,_.q,f,G._,U.E,k.r,F.e,N.S,I,O.u,y,R],D=[...c.f],K=[a.t,i.S,n.k],z=[],H=[],V=[];r.XO.handleByNamedList(r.Ag.WebGLSystem,z),r.XO.handleByNamedList(r.Ag.WebGLPipes,H),r.XO.handleByNamedList(r.Ag.WebGLPipesAdaptor,V),r.XO.add(...W,...D,...K);class Y extends o.k{constructor(){super({name:"webgl",type:d.W.WEBGL,systems:z,renderPipes:H,renderPipeAdaptors:V})}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,